[{"name":"coldSpotX","description":"Horizontal and vertical position of the frame's cold spot, relative to its hot spot. It is considered to be the point at which the frame would touch the ground. It's mostly used by objects such as walking enemies and pickup crates, as well as players themselves. In particular, the jjOBJ method putOnGround, if its argument is set to true, uses coldSpotY to determine the outcome.\n","full":"int16 coldSpotXint16 coldSpotX","type":"property","arguments":[]},{"name":"coldSpotY","description":"Horizontal and vertical position of the frame's gun spot, i.e. the point that's used to determine initial position of projectiles, relative to its hot spot. Originally this is only defined for player animations and sprites of enemies that produce projectiles.\n","full":"int16 coldSpotYint16 coldSpotY","type":"property","arguments":[]},{"name":"gunSpotX","description":"Horizontal and vertical position of the frame's hot spot, added to the sprite position by all drawing operations and used by collision detection, etc. These properties are analogous to the hot spot coordinates shown by Jazz Sprite Dynamite, however it should be noted that JSD inverts their values for user convenience, while JJ2 doesn't. This means that you will usually want to use negative values for these properties.\n","full":"int16 gunSpotXint16 gunSpotX","type":"property","arguments":[]},{"name":"gunSpotY","description":"Horizontal and vertical position of the frame's hot spot, added to the sprite position by all drawing operations and used by collision detection, etc. These properties are analogous to the hot spot coordinates shown by Jazz Sprite Dynamite, however it should be noted that JSD inverts their values for user convenience, while JJ2 doesn't. This means that you will usually want to use negative values for these properties.\n","full":"int16 gunSpotYint16 gunSpotY","type":"property","arguments":[]},{"name":"height","description":"Frame width in pixels.\n","full":"const uint16 heightconst uint16 height","type":"property","arguments":[]},{"name":"hotSpotX","description":"","full":"int16 hotSpotXint16 hotSpotX","type":"property","arguments":[]},{"name":"hotSpotY","description":"","full":"int16 hotSpotYint16 hotSpotY","type":"property","arguments":[]},{"name":"transparent","description":"","full":"bool transparentbool transparent","type":"property","arguments":[]},{"name":"width","description":"","full":"const uint16 widthconst uint16 width","type":"property","arguments":[]},{"name":"doesCollide","description":"","full":"bool doesCollide(int xPos, int yPos, int direction, const jjANIMFRAME@ frame2, int xPos2, int yPos2, int direction2, bool always = false) const","type":"function","arguments":[{"type":"int","name":"xPos","attributes":[],"items":[]},{"type":"int","name":"yPos","attributes":[],"items":[]},{"type":"int","name":"direction","attributes":[],"items":[]},{"type":"jjANIMFRAME@","name":"frame2","attributes":["const"],"items":[]},{"type":"int","name":"xPos2","attributes":[],"items":[]},{"type":"int","name":"yPos2","attributes":[],"items":[]},{"type":"int","name":"direction2","attributes":[],"items":[]},{"type":"bool","name":"always","defaultValue":"false","attributes":[],"items":[]}]}]