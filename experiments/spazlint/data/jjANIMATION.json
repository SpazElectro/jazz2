[{"name":"firstFrame","description":"This property corresponds to the \"FPS\" number for animations in Jazz Sprite Dynamite, but that name is only a guess, because its value is never referenced by JJ2 at all. Most commonly equals 10.\n","full":"uint firstFrameuint firstFrame","type":"property","arguments":[]},{"name":"fps","description":"Saves all the frames of this animation to an animated GIF image file on the local computer and returns whether successful. The image will be saved with whatever palette is passed to this method, by default the game's current palette. Each frame's delay time will be set to jjANIMATION::fps.\nThere are several limits to this method. The file cannot be saved in any directory other than the default one, which is the directory containing the executable (for local games and servers) or cache (for clients). File extension has to be \".gif\" and if any other or no extension is provided in the string, it will be replaced. Additionally, scripts downloaded from a server can only save up to 16 files on the computer of a client; they are, however, allowed to overwrite files they saved previously. (The limit of 16 files is shared with jjPIXELMAP::save and jjSTREAM::save).\n","full":"int16 fpsint16 fps","type":"property","arguments":[]},{"name":"frameCount","description":"Reads all frames of a GIF image on the local computer and outputs them as a series of jjANIMFRAME objects, and adjusts this animation's firstFrame and frameCount properties to match the new frames. Each frame in the animation will be trimmed to exclude fully transparent rows/columns on the edges. Returns true on success or false if the filename cannot be found or is in some way not a valid GIF.\nEach resulting sprite will use the same palette indices as the GIF itself. The GIF's own palette will be ignored. For the easiest to understand results, then, you should use a GIF using an unoptimized palette that is identical or similar (e.g. day vs. night versions) to the one the level is using, or grayscale for use with SPRITE::ALPHAMAP. Alternatively, you may want to load the GIF's actual palette using jjPAL::load.\njjANIMFRAME::coldSpotY is only relevant to certain objects affected by gravity, which use it to determine how far off the ground their sprites should be. For the first frame, coldSpotY will be set to the bottom of the opaque pixels, and each subsequent sprite will have its coldSpotY at the same distance from its hotSpotY as in the first sprite. If this automatic guess isn't quite right for your sprites, and you want to adjust these numbers so the sprites sink into the ground or float above it a little more, you can use the optional coldSpotYOffset argument.\nBy default, any new animframes begin at the first unused entries in jjAnimFrames. By passing a positive value to the firstFrameToOverwrite argument, however, you may choose specific animframes to overwrite instead.\nThis method always sets jjANIMFRAME::gunSpotX and jjANIMFRAME::coldSpotX to the same value as jjANIMFRAME::hotSpotX, jjANIMFRAME::gunSpotY to the same value as jjANIMFRAME::hotSpotY, jjANIMFRAME::transparent to false, and jjANIMATION::fps to the first gif frame's delay (or 10 if no delay is specified in the file). If your script has any more specialized use for those properties you will have to set them manually.\n","full":"uint16 frameCountuint16 frameCount","type":"property","arguments":[]},{"name":"save","description":"This method always sets jjANIMFRAME::gunSpotX and jjANIMFRAME::coldSpotX to the same value as jjANIMFRAME::hotSpotX, jjANIMFRAME::gunSpotY to the same value as jjANIMFRAME::hotSpotY, jjANIMFRAME::transparent to false, and jjANIMATION::fps to the first gif frame's delay (or 10 if no delay is specified in the file). If your script has any more specialized use for those properties you will have to set them manually.\n","full":"bool save(const string &in filename, const jjPAL &in palette = jjPalette) const","type":"function","arguments":[{"type":"string","name":"filename","attributes":["const","&in"],"items":[]},{"type":"jjPAL","name":"palette","attributes":["const","&in"],"items":[]}]},{"name":"load","description":"","full":"bool load(const string &in filename, int hotSpotX, int hotSpotY, int coldSpotYOffset = 0, int firstFrameToOverwrite = -1)","type":"function","arguments":[{"type":"string","name":"filename","attributes":["const","&in"],"items":[]},{"type":"int","name":"hotSpotX","attributes":[],"items":[]},{"type":"int","name":"hotSpotY","attributes":[],"items":[]},{"type":"int","name":"coldSpotYOffset","defaultValue":"0","attributes":[],"items":[]},{"type":"int","name":"firstFrameToOverwrite","defaultValue":"-1","attributes":[],"items":[]}]}]