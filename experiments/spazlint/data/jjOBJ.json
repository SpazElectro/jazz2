[{"name":"age","description":"Intended to determine how fast the object animates. However, only gem rings, speed destruct scenery, and collapse scenery actually use this property for that purpose, and all other non-bullet objects leave it untouched.\nBULLETS: This property stores the amount of damage a bullet does to enemies, e.g. 1 for normal blaster, 2 for normal seekers, or 3 for certain shield bullets.\n","full":"int ageint age","type":"property","arguments":[]},{"name":"animSpeed","description":"Which function is called for this object's behavior. See jjBEHAVIORINTERFACE.\nIn order to avoid common bugs, it's strongly discouraged to modify behavior of objects of eventID OBJECT::GENERATOR, and especially of jjObjectPresets[OBJECT::GENERATOR]. Currently a great portion of game code tests it against BEHAVIOR::GENERATOR and if it doesn't succeed, it may take unexpected actions, typically involving kicking and banning clients for invalid weapons. Similarly, replacing BEHAVIOR::DIAMONDSAREFOREVER is liable to break Treasure Hunt or Head Hunters games.\nReplacing BEHAVIOR::DESTRUCTSCENERY, BEHAVIOR::TRIGGERSCENERY, or BEHAVIOR::SUPERGEM will normally prevent the states of those objects from being shared with newly joining clients in online servers, but this can be circumvented by replacing them with jjBEHAVIORINTERFACE-implementing classes that define onGetActive/onSetActive methods appropriately.\n","full":"int animSpeedint animSpeed","type":"property","arguments":[]},{"name":"behavior","description":"When true, colliding bullets will ricochet off of this object unless bulletHandling is set to DESTROYBULLET.\n","full":"jjBEHAVIOR behaviorjjBEHAVIOR behavior","type":"property","arguments":[]},{"name":"bulletHandling","description":"The object ID or player ID of the object or player that created this object, as usable as the index for jjObjects or jjPlayers. 0 if no creator is actually known.\n","full":"HANDLING::Bullet bulletHandlingHANDLING::Bullet bulletHandlingHANDLING::Bullet bulletHandling","type":"property","arguments":[]},{"name":"causesRicochet","description":"If the object was created by a Generator object specifically, then creatorType will equal CREATOR::LEVEL, but creatorID will equal the object ID of that Generator object rather than 0.\n","full":"bool causesRicochetbool causesRicochet","type":"property","arguments":[]},{"name":"counter","description":"The overall current frame displayed to the screen to represent this object, taking into account both curAnim and frameID; an index for the jjAnimFrames array. You can obtain useful values for this from the determineCurFrame method or else any jjANIMATION::firstFrame.\n","full":"int counterint counter","type":"property","arguments":[]},{"name":"counterEnd","description":"Which way the object is facing. Generally, direction >= 0 is right and < 0 is left. Some objects may also correctly interpret SPRITE::Direction constants: SPRITE::FLIPNONE, SPRITE::FLIPH, SPRITE::FLIPV and SPRITE::FLIPHV but the ones involving vertical flip will not be perfectly reliable for objects without custom behavior, except for box objects (crates, barrels, monitors), which will take vertically flipped direction values as a cue to fall upwards instead of downwards.\n","full":"uint8 counterEnduint8 counterEnd","type":"property","arguments":[]},{"name":"creator","description":"e.g. 158 for a peach, 43 for a bomb, 243 for an airboard, 1 for a blaster bullet, and so on. Is a uint8 for maximum flexibility, but you should probably set/compare it to OBJECT::Object constants instead most of the time, if for no other reason than readability.\nWhile this value is not strictly constant/read-only, changing it can lead to unpredictable and undesirable effects, since this is the only truly reliable way of knowing what kind of object a given jjOBJ really is, and JJ2 queries it very frequently. The effects can vary from a food pickup playing the wrong sound effect when collected to, say, a red spring simply not working at all when touched. You have been warned.\n","full":"int creatorint creator","type":"property","arguments":[]},{"name":"creatorID","description":"0 if the object is unfrozen, otherwise counts down to 0 for most behaviors, though you'll need to implement that manually if writing your own.\n","full":"int creatorIDint creatorID","type":"property","arguments":[]},{"name":"creatorType","description":"When true, nearby TNT explosions will set this object's xSpeed and ySpeed properties.\n","full":"CREATOR::Type creatorTypeCREATOR::Type creatorTypeCREATOR::Type creatorType","type":"property","arguments":[]},{"name":"curAnim","description":"When this property has a non-zero value, most objects will be drawn as pure white until the property counts back down to 0 one tick at a time. JJ2 deincrements this property for all objects, so you needn't worry about it when defining your own behavior functions.\n","full":"int16 curAnimint16 curAnim","type":"property","arguments":[]},{"name":"curFrame","description":"The intensity of the light produced by the object.\n","full":"uint curFrameuint curFrame","type":"property","arguments":[]},{"name":"deactivates","description":"If the object is frozen, what state it was in before it was frozen. Possible constants are listed in the appendix at the end of this file.\n","full":"bool deactivatesbool deactivates","type":"property","arguments":[]},{"name":"direction","description":"How many points a player will gain for destroying the object.\n","full":"int8 directionint8 direction","type":"property","arguments":[]},{"name":"doesHurt","description":"For all values of n such that n < jjObjectMax, jjObjects[n].objectID == n.\n","full":"uint8 doesHurtuint8 doesHurt","type":"property","arguments":[]},{"name":"energy","description":"When true, JJ2 will call some version of onObjectHit to determine what to do if a bullet or player is detected as having collided with this object. See jjBEHAVIORINTERFACE. This property's effect if playerHandling is anything other than ENEMY, PICKUP, or SPECIAL is presently undefined.\n","full":"int8 energyint8 energy","type":"property","arguments":[]},{"name":"eventID","description":"BULLETS: This property stores the animation (curAnim-style) that is used if the bullet is shot upwards, not horizontally. If this property equals 0, it will not be possible to shoot the bullet upwards except by mouse aiming; this is how shields work.\n","full":"uint8 eventIDuint8 eventID","type":"property","arguments":[]},{"name":"frameID","description":"A series of general-purpose variables, used for different things by different objects. In general, earlier values are more likely to be used by the game's native behavior functions than later ones.\nBULLETS:\n\t\t\t\tvar[3] represents what ammo type the bullet is, 1-9, which is primarily used for destroying destruct scenery with a non-zero \"Weapon\" parameter.\n\t\t\t\tvar[6] is used as a series of boolean flags that specify how the bullet interacts with various objects: bit 2 for fire-based bullets which can melt springs and burn enemies into fire/smoke particles; bit 4 for the laser shield's laser; bit 8 for bullets that do two damage in multiplayer; and bit 16 for bullets that pass through enemies, like the fireball, rather than explode on impact.\n\t\t\t\tvar[7] is the xSpeed that the player who fired this bullet was moving at when the bullet was fired, reduced to a range of -8ï¿½8... multiplied by 65536. Sorry about that.\n\t\t\t\tvar[9] is a counter for how many times the bullet has ricocheted in its lifetime, beginning at 0.\n\t\t\t\tvar[10] is a counter for how long it's been since the bullet has last ricocheted; each ricochet resets it to 0, but traditional bullet behaviors constantly increment it, and a bullet cannot ricochet if the value is less than 8.\n\t\t\t\n","full":"int8 frameIDint8 frameID","type":"property","arguments":[]},{"name":"freeze","description":"Original horizontal location in pixels.\n","full":"uint8 freezeuint8 freeze","type":"property","arguments":[]},{"name":"isActive","description":"Horizontal speed in pixels per game tick, positive or negative.\n","full":"const bool isActiveconst bool isActive","type":"property","arguments":[]},{"name":"isBlastable","description":"Current vertical location in pixels.\n","full":"bool isBlastablebool isBlastable","type":"property","arguments":[]},{"name":"isFreezable","description":"Vertical speed in pixels per game tick, positive or negative.\n","full":"bool isFreezablebool isFreezable","type":"property","arguments":[]},{"name":"isTarget","description":"Makes the object act as a platform for players. Unlike beSolid, this method will only cause interactions with players on top of the object and not on its sides. Additionally, this method better accounts for the object's self-induced movement. The parameters xOld and yOld should be set to horizontal and vertical position of the object in the previous tick, whereas the jjOBJ properties xPos and yPos will be used for its current position. The remaining two parameters, width and height, should indicate the platform's dimensions in pixels. The default value of 0 will result in dimensions chosen automatically based on the size of the object's curFrame.\n","full":"bool isTargetbool isTarget","type":"property","arguments":[]},{"name":"justHit","description":"If shouldCheckForStompingLocalPlayers is true, any local players who are landing on this object while buttstomping get an additional chance to destroy this object before landing, effectively by calling jjPLAYER::objectHit. If the collision changes this object's state to either STATE::ACTION or STATE::KILL, jjOBJ::behave() will be called.\n","full":"uint8 justHituint8 justHit","type":"property","arguments":[]},{"name":"killAnim","description":"Causes all local players that are currently standing on top of this object or pushing it to no longer be standing on top of it or pushing it. Should be called when deleting an object that calls bePlatform or beSolid.\n","full":"int16 killAnimint16 killAnim","type":"property","arguments":[]},{"name":"light","description":"Permanently deletes the object. Like jjAddObject, this method is purely local in its scope.\n","full":"int8 lightint8 light","type":"property","arguments":[]},{"name":"lightType","description":"You are allowed to use a simple uint8 to specify the setID, but an ANIM::Set constant is strongly recommended, since the values for certain sets differ between 1.23 and 1.24. The full list of constants can be found in the appendix at the bottom of this file.\nInternally, this method runs the following code:\n\t\t\t\tif (jjAnimSets[setID].firstAnim == 0) //not yet loaded\n\tjjAnimSets[setID].load(); //load from anims.j2a or plus.j2a, depending on setID\nconst int16 newCurAnimValue = jjAnimSets[setID].firstAnim + animation;\nif (change)\n\tthis.curAnim = newCurAnimValue;\nreturn newCurAnimValue;\n","full":"LIGHT::Type lightTypeLIGHT::Type lightType","type":"property","arguments":[]},{"name":"oldState","description":"Internally, this method runs the following code:\n\t\t\t\tconst jjANIMATION@ animation = jjAnimations[this.curAnim];\nconst uint newCurFrameValue = (animation.frameCount == 0) ? 0 : (animation.firstFrame + (this.frameID % animation.frameCount));\nif (change)\n\tthis.curFrame = newCurFrameValue;\nreturn newCurFrameValue;\n","full":"STATE::State oldStateSTATE::State oldState","type":"property","arguments":[]},{"name":"playerHandling","description":"Essentially a wrapper for jjDrawSpriteFromCurFrame; uses the jjOBJ's xPos, yPos, direction, freeze, justHit, and curFrame properties to determine where to draw the sprite and what mode to use. This isn't specific enough for all objects, but it does the job in a high percentage of cases.\n","full":"HANDLING::Player playerHandlingHANDLING::Player playerHandlingHANDLING::Player playerHandling","type":"property","arguments":[]},{"name":"points","description":"Returns the playerID property of the nearest jjPLAYER object within maxDistance, or a negative number if none exist. If the foundDistance parameter is included, it will be set to the distance of the found jjPLAYER. Both maxDistance and foundDistance are actually squares of the distance expressed in pixels. Used by numerous enemies and other objects in order to react to nearby players.\n","full":"uint16 pointsuint16 points","type":"property","arguments":[]},{"name":"noHit","description":"Potentially creates a random pickup (red gem, green gem, blue gem, or carrot) in front of the jjOBJ, the likelihood depending on frequency (higher values are less likely). Traditionally, this method is called when an enemy or crate is destroyed by a bullet, and frequency equals 5 if the bullet was an unpowered-up blaster bullet or otherwise 10.\nThe player parameter is necessary because one in every eight pickups a player is granted is a fastfire instead, so JJ2 needs to be able to keep track of when each individual player should next receive a fastfire.\nOnly works if creatorType equals CREATOR::LEVEL.\n","full":"int8 noHitint8 noHit","type":"property","arguments":[]},{"name":"objectID","description":"Assumes that this object is a player bullet colliding with object target, even if they are not in the same area or if this object is not actually HANDLING::PLAYERBULLET. You are allowed to set what HANDLING::Player value the target object will be treated as havingï¿½HANDLING::ENEMY, HANDLING::SPECIAL, or HANDLING::PICKUP, with all other values having no effectï¿½but otherwise the code will run exactly as if the two objects really did collide. Effects may or may not be broadcast to other players in the server, and some version of onObjectHit will be called (with force as this object's animSpeed property) iff target has scriptedCollisions set to true and HANDLING::SPECIAL is passed as playerHandling.\n","full":"const uint16 objectIDconst uint16 objectID","type":"property","arguments":[]},{"name":"objType","description":"Makes the object use the same waypoint-based path movement as the Butterfly and Rocket Turtle objects. The method potentially sets the xAcc, yAcc, xPos, yPos, xSpeed, ySpeed, counter, direction, var[6] and var[7] properties in the process.\n","full":"uint8 objTypeuint8 objType","type":"property","arguments":[]},{"name":"scriptedCollisions","description":"To be used on bullet objects. Reverses the bullet's xSpeed/xAcc/direction, gives it a randomized ySpeed, plays one of the SOUND::AMMO_BUL* samples, and calls jjAddParticle(PARTICLE::SPARK) several times. Returns false if the bullet last ricocheted too recently.\n","full":"bool scriptedCollisionsbool scriptedCollisions","type":"property","arguments":[]},{"name":"special","description":"","full":"int specialint special","type":"property","arguments":[]},{"name":"state","description":"","full":"STATE::State stateSTATE::State state","type":"property","arguments":[]},{"name":"triggersTNT","description":"","full":"bool triggersTNTbool triggersTNT","type":"property","arguments":[]},{"name":"var[11]","description":"","full":"int var[11]int var[11]","type":"property","arguments":[]},{"name":"xAcc","description":"","full":"float xAccfloat xAcc","type":"property","arguments":[]},{"name":"xOrg","description":"","full":"float xOrgfloat xOrg","type":"property","arguments":[]},{"name":"xPos","description":"","full":"float xPosfloat xPos","type":"property","arguments":[]},{"name":"xSpeed","description":"","full":"float xSpeedfloat xSpeed","type":"property","arguments":[]},{"name":"yAcc","description":"","full":"float yAccfloat yAcc","type":"property","arguments":[]},{"name":"yPos","description":"","full":"float yPosfloat yPos","type":"property","arguments":[]},{"name":"yOrg","description":"","full":"float yOrgfloat yOrg","type":"property","arguments":[]},{"name":"ySpeed","description":"","full":"float ySpeedfloat ySpeed","type":"property","arguments":[]},{"name":"behave","description":"","full":"void behave(jjBEHAVIOR behavior = BEHAVIOR::DEFAULT, bool draw = true)","type":"function","arguments":[{"type":"jjBEHAVIOR","name":"behavior","defaultValue":"BEHAVIOR::DEFAULT","attributes":[],"items":["BULLET","SEEKERBULLET","RFBULLET","TOASTERBULLET","PEPPERBULLET","ELECTROBULLET","BUMP","PADDLE","BIGOBJECT","WALKINGENEMY","DESTRUCTSCENERY","ROCKETTURTLE","ROCKETTURTLEPLUS","BOLLYTOP","BOLLYBOTTOM","PLATFORM","SPRING","AMMO15","MONITOR","CRATE","PICKUP","DIAMONDSAREFOREVER","FLAG","INACTIVE","DEFAULT","MONKEYBULLET","BILSYBULLET","BOLLYBULLET","BOLLYSPIKEBALL","WITCHBULLET","TUFBOSSBULLET","ROBOTSHARD","BONE","EXPLOSION2","BURNING","AIRBOARDFALL","BIRDFEATHER","UFO","CORPSE"]},{"type":"bool","name":"draw","defaultValue":"true","attributes":[],"items":[]}]},{"name":"bePlatform","description":"","full":"void bePlatform(float xOld, float yOld, int width = 0, int height = 0)","type":"function","arguments":[{"type":"float","name":"xOld","attributes":[],"items":[]},{"type":"float","name":"yOld","attributes":[],"items":[]},{"type":"int","name":"width","defaultValue":"0","attributes":[],"items":[]},{"type":"int","name":"height","defaultValue":"0","attributes":[],"items":[]}]},{"name":"beSolid","description":"","full":"int beSolid(bool shouldCheckForStompingLocalPlayers = false)","type":"function","arguments":[{"type":"bool","name":"shouldCheckForStompingLocalPlayers","defaultValue":"false","attributes":[],"items":[]}]},{"name":"blast","description":"","full":"void blast(int maxDistance, bool blastObjects)","type":"function","arguments":[{"type":"int","name":"maxDistance","attributes":[],"items":[]},{"type":"bool","name":"blastObjects","attributes":[],"items":[]}]},{"name":"clearPlatform()","description":"","full":"void clearPlatform()","type":"function","arguments":[]},{"name":"deactivate","description":"","full":"void deactivate()","type":"function","arguments":[]},{"name":"delete","description":"","full":"void delete()","type":"function","arguments":[]},{"name":"determineCurAnim","description":"","full":"int16 determineCurAnim(uint8 setID, uint8 animation, bool change = true)","type":"function","arguments":[{"type":"uint8","name":"setID","attributes":[],"items":[]},{"type":"uint8","name":"animation","attributes":[],"items":[]},{"type":"bool","name":"change","defaultValue":"true","attributes":[],"items":[]}]},{"name":"determineCurAnim","description":"","full":"int16 determineCurAnim(ANIM::Set setID, uint8 animation, bool change = true)","type":"function","arguments":[{"type":"ANIM::Set","name":"setID","attributes":[],"items":["AMMO","BAT","BEEBOY","BEES","BIGBOX","BIGROCK","BIGTREE","BILSBOSS","BIRD","BIRD3D","BOLLPLAT","BONUS","BOSS","BRIDGE","BUBBA","BUMBEE","BUTTERFLY","CARROTPOLE","CAT","CAT2","CATERPIL","CHUCK","COMMON","CONTINUE","DEMON","DESTSCEN","DEVAN","DEVILDEVAN","DIAMPOLE","DOG","DOOR","DRAGFLY","DRAGON","EVA","FACES","FATCHK","FENCER","FISH","FLAG","FLARE","FONT","FROG","FRUITPLAT","GEMRING","GLOVE","GRASSPLAT","HATTER","HELMUT","JAZZ","JAZZ3D","JUNGLEPOLE","LABRAT","LIZARD","LORI","LORI2","MENU","MENUFONT","MONKEY","MOTH","PICKUPS","PINBALL","PINKPLAT","PSYCHPOLE","QUEEN","RAPIER","RAVEN","ROBOT","ROCK","ROCKTURT","SKELETON","SMALTREE","SNOW","SONCSHIP","SONICPLAT","SPARK","SPAZ","SPAZ2","SPAZ3D","SPIKEBOLL","SPIKEBOLL3D","SPIKEPLAT","SPRING","STEAM","SUCKER","TUBETURT","TUFBOSS","TUFTUR","TURTLE","TWEEDLE","UTERUS","VINE","WARP10","WARP100","WARP20","WARP50","WITCH","XBILSY","XLIZARD","XTURTLE","ZDOG","ZSPARK"]},{"type":"uint8","name":"animation","attributes":[],"items":[]},{"type":"bool","name":"change","defaultValue":"true","attributes":[],"items":[]}]},{"name":"determineCurFrame","description":"","full":"uint determineCurFrame(bool change = true)","type":"function","arguments":[{"type":"bool","name":"change","defaultValue":"true","attributes":[],"items":[]}]},{"name":"doesCollide","description":"","full":"bool doesCollide(const jjOBJ@ object, bool always = false) const","type":"function","arguments":[{"type":"jjOBJ@","name":"object","attributes":["const"],"items":[]},{"type":"bool","name":"always","defaultValue":"false","attributes":[],"items":[]}]},{"name":"doesCollide","description":"","full":"bool doesCollide(const jjPLAYER@ player, bool always = false) const","type":"function","arguments":[{"type":"jjPLAYER@","name":"player","attributes":["const"],"items":[]},{"type":"bool","name":"always","defaultValue":"false","attributes":[],"items":[]}]},{"name":"draw","description":"","full":"int draw()","type":"function","arguments":[]},{"name":"findNearestPlayer","description":"","full":"int findNearestPlayer(int maxDistance) const","type":"function","arguments":[{"type":"int","name":"maxDistance","attributes":[],"items":[]}]},{"name":"findNearestPlayer","description":"","full":"int findNearestPlayer(int maxDistance, int &out foundDistance) const","type":"function","arguments":[{"type":"int","name":"maxDistance","attributes":[],"items":[]},{"type":"int","name":"&out","attributes":[],"items":[]}]},{"name":"fireBullet","description":"","full":"int fireBullet(OBJECT::Object eventID) const","type":"function","arguments":[{"type":"OBJECT::Object","name":"eventID","attributes":[],"items":["BLASTERBULLET","BOUNCERBULLET","ICEBULLET","SEEKERBULLET","RFBULLET","TOASTERBULLET","FIREBALLBULLET","ELECTROBULLET","BLASTERBULLETPU","BOUNCERBULLETPU","ICEBULLETPU","SEEKERBULLETPU","RFBULLETPU","TOASTERBULLETPU","FIREBALLBULLETPU","ELECTROBULLETPU","FIRESHIELDBULLET","WATERSHIELDBULLET","BUBBLESHIELDBULLET","LIGHTNINGSHIELDBULLET","PLASMASHIELDBULLET","BULLET","SMOKERING","SHARD","EXPLOSION","BOUNCEONCE","FLICKERGEM","LASER","UTERUSSPIKEBALL","BIRD","BUBBLE","ICEAMMO3","BOUNCERAMMO3","SEEKERAMMO3","RFAMMO3","TOASTERAMMO3","TNTAMMO3","GUN8AMMO3","GUN9AMMO3","TURTLESHELL","SWINGINGVINE","BOMB","SILVERCOIN","GOLDCOIN","GUNCRATE","CARROTCRATE","ONEUPCRATE","GEMBARREL","CARROTBARREL","ONEUPBARREL","BOMBCRATE","ICEAMMO15","BOUNCERAMMO15","SEEKERAMMO15","RFAMMO15","TOASTERAMMO15","TNT","AIRBOARDGENERATOR","FROZENSPRING","FASTFIRE","SPRINGCRATE","REDGEM","GREENGEM","BLUEGEM","PURPLEGEM","SUPERGEM","BIRDCAGE","GUNBARREL","GEMCRATE","MORPH","CARROT","FULLENERGY","FIRESHIELD","WATERSHIELD","BUBBLESHIELD","LIGHTNINGSHIELD","PLASMASHIELD","FASTFEET","ONEUP","EXTRALIFE","EXTRALIVE","EOLPOST","SAVEPOST","CHECKPOINT","BONUSPOST","REDSPRING","GREENSPRING","BLUESPRING","INVINCIBILITY","EXTRATIME","FREEZER","FREEZEENEMIES","HORREDSPRING","HORGREENSPRING","HORBLUESPRING","BIRDMORPH","TRIGGERCRATE","FLYCARROT","RECTREDGEM","RECTGREENGEM","RECTBLUEGEM","TUFTURT","TUFBOSS","LABRAT","DRAGON","LIZARD","BEE","BUMBEE","RAPIER","SPARK","BAT","SUCKER","CATERPILLAR","CHESHIRE1","CHESHIRE2","HATTER","BILSY","SKELETON","DOGGYDOGG","NORMTURTLE","HELMUT","DEMON","DRAGONFLY","MONKEY","FATCHICK","FENCER","FISH","MOTH","STEAM","ROTATINGROCK","BLASTERPOWERUP","BOUNCERPOWERUP","ICEPOWERUP","SEEKERPOWERUP","RFPOWERUP","TOASTERPOWERUP","LEFTPADDLE","RIGHTPADDLE","FIVEHUNDREDBUMP","CARROTBUMP","APPLE","BANANA","CHERRY","ORANGE","PEAR","PRETZEL","STRAWBERRY","STEADYLIGHT","PULZELIGHT","PULSELIGHT","FLICKERLIGHT","QUEEN","FLOATSUCKER","BRIDGE","LEMON","LIME","THING","WATERMELON","PEACH","GRAPES","LETTUCE","EGGPLANT","CUCUMB","CUCUMBER","COKE","SOFTDRINK","PEPSI","SODAPOP","MILK","PIE","CAKE","DONUT","CUPCAKE","CHIPS","CANDY","CHOCBAR","CHOCOLATEBAR","ICECREAM","BURGER","PIZZA","FRIES","CHICKENLEG","SANDWICH","TACO","WEENIE","HAM","CHEESE","FLOATLIZARD","STANDMONKEY","DESTRUCTSCENERY","DESTRUCTSCENERYBOMB","TNTDESTRUCTSCENERY","COLLAPSESCENERY","STOMPSCENERY","GEMSTOMP","RAVEN","TUBETURTLE","GEMRING","SMALLTREE","AMBIENTSOUND","UTERUS","CRAB","WITCH","ROCKETTURTLE","BUBBA","DEVILDEVAN","DEVANROBOT","ROBOT","CARROTUSPOLE","PSYCHPOLE","DIAMONDUSPOLE","FRUITPLATFORM","BOLLPLATFORM","GRASSPLATFORM","PINKPLATFORM","SONICPLATFORM","SPIKEPLATFORM","SPIKEBOLL","GENERATOR","EVA","BUBBLER","TNTPOWERUP","GUN8POWERUP","GUN9POWERUP","SPIKEBOLL3D","SPRINGCORD","BEES","COPTER","LASERSHIELD","STOPWATCH","JUNGLEPOLE","WARP","BIGROCK","BIGBOX","TRIGGERSCENERY","BOLLY","BUTTERFLY","BEEBOY","SNOW","TWEEDLEBOSS","AIRBOARD","CTFBASE","XMASNORMTURTLE","XMASLIZARD","XMASFLOATLIZARD","XMASBILSY","CAT","PACMANGHOST"]}]},{"name":"grantPickup","description":"","full":"void grantPickup(jjPLAYER@ player, int frequency) const","type":"function","arguments":[{"type":"jjPLAYER@","name":"player","attributes":[],"items":[]},{"type":"int","name":"frequency","attributes":[],"items":[]}]},{"name":"objectHit","description":"","full":"void objectHit(jjOBJ@ target, HANDLING::Player playerHandling)","type":"function","arguments":[{"type":"jjOBJ@","name":"target","attributes":[],"items":[]},{"type":"HANDLING::Player","name":"playerHandling","attributes":[],"items":["PICKUP","ENEMY","SPECIAL","PICKUP","ENEMYBULLET","PLAYERBULLET"]}]},{"name":"particlePixelExplosion","description":"","full":"void particlePixelExplosion(int style) const","type":"function","arguments":[{"type":"int","name":"style","attributes":[],"items":[]}]},{"name":"pathMovement","description":"","full":"void pathMovement()","type":"function","arguments":[]},{"name":"putOnGround","description":"","full":"void putOnGround(bool precise = false)","type":"function","arguments":[{"type":"bool","name":"precise","defaultValue":"false","attributes":[],"items":[]}]},{"name":"ricochet","description":"","full":"bool ricochet()","type":"function","arguments":[]},{"name":"unfreeze","description":"","full":"int unfreeze(int style)","type":"function","arguments":[{"type":"int","name":"style","attributes":[],"items":[]}]}]