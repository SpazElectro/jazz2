[{"name":"jjActiveGameTicks","description":"Whether weapon 8 is fireball instead pepper spray, as set by the /fireball command.\n","full":"const uint jjActiveGameTicksconst uint jjActiveGameTicks","type":"property","arguments":[]},{"name":"jjAllowsFireball","description":"Whether the server allows players to use the /ready command, as set by the /allowready command.\n","full":"const bool jjAllowsFireballconst bool jjAllowsFireball","type":"property","arguments":[]},{"name":"jjAllowsMouseAim","description":"Whether always running is enabled, as set by the /run command.\n","full":"const bool jjAllowsMouseAimconst bool jjAllowsMouseAim","type":"property","arguments":[]},{"name":"jjAllowsReady","description":"See also jjTiles.\n","full":"const bool jjAllowsReadyconst bool jjAllowsReady","type":"property","arguments":[]},{"name":"jjAllowsWalljump","description":"Loaded animation frames. See the jjANIMFRAME class description for more information.\n","full":"const bool jjAllowsWalljumpconst bool jjAllowsWalljump","type":"property","arguments":[]},{"name":"jjAlwaysRunning","description":"Whether automatic weapon change is locally enabled, as set by the /weaponchange command.\n","full":"const bool jjAlwaysRunningconst bool jjAlwaysRunning","type":"property","arguments":[]},{"name":"jjAnimatedTiles[0x10000]","description":"The size of the black borders that appear at the edges of each local player's subscreen when a subscreen is larger than the level/server's maximum resolution, when a subscreen is larger than Layer 4 (and Layer 4 does not have Tile Width/Tile Height checked), and/or when the F3 key has been used. Useful for deciding where to draw HUD/UI elements. Note that these values refer to the size of each border, not the overall size of the black space, so for instance if jjBorderWidth is 80, there will be 80 columns of black pixels on the left side of the subscreen and an additional 80 columns on the right side.\n","full":"jjTILE@ jjAnimatedTiles[0x10000]jjTILE@ jjAnimatedTiles[0x10000]","type":"property","arguments":[]},{"name":"jjAnimations[1500]","description":"Color depth in bits per pixel. Either 8 or 16.\n","full":"jjANIMATION@ jjAnimations[1500]jjANIMATION@ jjAnimations[1500]","type":"property","arguments":[]},{"name":"jjAnimFrames[15000]","description":"When the player dies in Single Player mode, this property is set to true before all jjOBJs have their state property set to DEACTIVATE. Since DEACTIVATE is also used for when an object goes too far off-screen, this property is how to discover the reason for the state change. In practice, is probably only ever consulted by destruct scenery and trigger scenery.\n","full":"jjANIMFRAME@ jjAnimFrames[15000]jjANIMFRAME@ jjAnimFrames[15000]","type":"property","arguments":[]},{"name":"jjAnimSets[ANIM::Set]","description":"If set to true, box objects (trigger crates, all wooden crates, bird morph monitors, and also bird cages) spawned from Generator objects will derive their parameters from the tile they begin at, not the tile they are created at. If the Generator object is in the air, the crate will appear on top of the nearest solid tile below the Generator, and will get its parameters from the tile there.\n","full":"jjANIMSET@ jjAnimSets[ANIM::Set]jjANIMSET@ jjAnimSets[ANIM::Set]","type":"property","arguments":[]},{"name":"jjAutoWeaponChange","description":"When you set this property, jjDifficultyNext will also be set to the new value. So for example, if you want to make enemies move a little faster in this level without affecting the difficulty of the next level in the series, try: jjDifficulty += 1; jjDifficultyNext = jjDifficultyOrig;\n","full":"const bool jjAutoWeaponChangeconst bool jjAutoWeaponChange","type":"property","arguments":[]},{"name":"jjBackupPalette","description":"The difficulty at the start of the level, prior to it being potentially changed by scripts setting jjDifficulty. In online servers, clients who join this level partway through will be sent this value for their difficulty, so they will remove the same events from the event map that everyone else in the server did.\n","full":"const jjPAL jjBackupPaletteconst jjPAL jjBackupPaletteconst jjPAL jjBackupPaletteconst jjPAL jjBackupPalette","type":"property","arguments":[]},{"name":"jjBorderHeight","description":"The current degree of echo, as set by the \"Echo\" event.\n","full":"const int jjBorderHeightconst int jjBorderHeight","type":"property","arguments":[]},{"name":"jjBorderWidth","description":"Usually all true. When a Text event is touched with AngelScript=1,Vanish=1, the jjEnabledASFunctions[#] bool for that Text event's TextID value will be set to false and the corresponding onFunction# will be uncallable by other Text events until the bool is set to true again.\n","full":"const int jjBorderWidthconst int jjBorderWidth","type":"property","arguments":[]},{"name":"jjBottomFeeder","description":"This setting defines the minimal ambient lighting options required from the game. It will not change game settings if they don't fulfill the requirements but it will display lights as if the settings were changed. Allowed values are:\n\t\t\t\tOPTIONAL: The default value; ambient lighting can be freely disabled and enabled with no limits.\n\t\t\t\tBASIC: Ambient lighting can be disabled but basic lights, such as those emitted by objects, players and laser shields, have to be drawn. This only affects the game if ambient lighting is disabled and low detail is enabled, because that's when basic lights stop being drawn.\n\t\t\t\tCOMPLETE: Ambient lighting cannot be disabled, all lights have to be drawn.\n\t\t\t\t\n","full":"jjPLAYER@ jjBottomFeederjjPLAYER@ jjBottomFeeder","type":"property","arguments":[]},{"name":"jjCharacters[CHAR::Char]","description":"The current frames per second rate, as viewable by pressing F9 twice.\n","full":"jjCHARACTER@ jjCharacters[CHAR::Char]jjCHARACTER@ jjCharacters[CHAR::Char]","type":"property","arguments":[]},{"name":"jjColorDepth","description":"Is this game joinable by players from other computers, and if so, must they be connected to the same network or just the internet? Options are LOCAL, ONLINE, and LAN.\n","full":"const int jjColorDepthconst int jjColorDepth","type":"property","arguments":[]},{"name":"jjControlPoints[16]","description":"What is the current base gamemode, irrespective of whether there is a custom gamemode or not? Options are SP, COOP, BATTLE, CTF, TREASURE, and RACE.\n","full":"const jjCONTROLPOINT@ jjControlPoints[16]const jjCONTROLPOINT@ jjControlPoints[16]","type":"property","arguments":[]},{"name":"jjDeactivatingBecauseOfDeath","description":"How long the game has been actively running, at a rate of 70 ticks per second.\n","full":"const bool jjDeactivatingBecauseOfDeathconst bool jjDeactivatingBecauseOfDeath","type":"property","arguments":[]},{"name":"jjDebugF10","description":"Whether the current game executable is logged in as a Remote Admin in the current online server. To check this property for any client in the server, use jjPLAYER property isAdmin instead.\n","full":"const bool jjDebugF10const bool jjDebugF10","type":"property","arguments":[]},{"name":"jjDelayGeneratedCrateOrigins","description":"Whether there's any active weather effect. The type of the effect is determined by jjSnowingType.\n","full":"bool jjDelayGeneratedCrateOriginsbool jjDelayGeneratedCrateOrigins","type":"property","arguments":[]},{"name":"jjDifficulty","description":"Whether the current game executable is 1.23+ or 1.24+. Useful for Lori, XMas enemies, etc.\n","full":"int jjDifficultyint jjDifficulty","type":"property","arguments":[]},{"name":"jjDifficultyNext","description":"Shortcut global properties for the same-named jjLAYER properties on the same-indexed jjLayers objects.\n","full":"int jjDifficultyNextint jjDifficultyNext","type":"property","arguments":[]},{"name":"jjDifficultyOrig","description":"Shortcut global properties for the same-named jjLAYER properties on the same-indexed jjLayers objects.\n","full":"const int jjDifficultyOrigconst int jjDifficultyOrig","type":"property","arguments":[]},{"name":"jjDoZombiesAlreadyExist","description":"Shortcut global properties for the same-named jjLAYER properties on the same-indexed jjLayers objects.\n","full":"const bool jjDoZombiesAlreadyExistconst bool jjDoZombiesAlreadyExist","type":"property","arguments":[]},{"name":"jjEcho","description":"Shortcut global properties for the same-named jjLAYER properties on the same-indexed jjLayers objects.\n","full":"int jjEchoint jjEcho","type":"property","arguments":[]},{"name":"jjEnabledASFunctions[256]","description":"The original eight layers placed in this level (i.e. jjLevelFileName) in JCS or some other level editor, 1-indexed to match the JCS numbers, e.g. jjLayers[4] for the main sprite layer or jjLayers[8] for the final background layer, regardless of what other code may have done to create new layers or alter their order. See the jjLAYER documentation above for further details.\n","full":"bool jjEnabledASFunctions[256]bool jjEnabledASFunctions[256]","type":"property","arguments":[]},{"name":"jjEnabledTeams[TEAM::Color]","description":"Title of the current level, e.g. Dungeon Dilemma.\n","full":"const bool jjEnabledTeams[TEAM::Color]const bool jjEnabledTeams[TEAM::Color]","type":"property","arguments":[]},{"name":"jjEnabledTeams[4]","description":"The number of local players.\n","full":"const bool jjEnabledTeams[4]const bool jjEnabledTeams[4]","type":"property","arguments":[]},{"name":"jjEnforceLighting","description":"Whether the Low Detail video setting is enabled. When true, only jjLayers[8] and layers whose xSpeed/ySpeed both equal exactly 1 and whose xSpeedModel/ySpeedModel both equal LAYERSPEEDMODEL::NORMAL will be drawn, and even those only if hasTileMap and hasTiles are both true.\n","full":"LIGHT::Enforce jjEnforceLightingLIGHT::Enforce jjEnforceLighting","type":"property","arguments":[]},{"name":"jjEventAtLastMaskedPixel","description":"In competitive game modes, the score required to win, as set by the /maxscore command.\n","full":"uint8 jjEventAtLastMaskedPixeluint8 jjEventAtLastMaskedPixel","type":"property","arguments":[]},{"name":"jjFPS","description":"The current position of the mouse cursor relative to the top left corner of the game window. To convert these coordinates to coordinates within layer 4, you'll need to use the jjPLAYER cameraX and cameraY properties.\n","full":"const int jjFPSconst int jjFPS","type":"property","arguments":[]},{"name":"jjFriendlyFire","description":"File name of the music file currently playing, e.g. 3ddemo.mod, all lowercase. The file extension will be included (even if not included by the level or user, e.g. this string will be \"castle.j2b\" if \"castle\" was written in Level Properties), but not the folder structure.\nThis is a const property. To change it, use jjMusicLoad.\n","full":"const bool jjFriendlyFireconst bool jjFriendlyFire","type":"property","arguments":[]},{"name":"jjGameConnection","description":"Music Volume, as seen in the Sound & Music Properties window.\n","full":"const GAME::Connection jjGameConnectionconst GAME::Connection jjGameConnectionconst GAME::Connection jjGameConnectionconst GAME::Connection jjGameConnection","type":"property","arguments":[]},{"name":"jjGameCustom","description":"Whether the game blocks movement during stopped games, as set by the /nomovement command.\n","full":"const GAME::Custom jjGameCustomconst GAME::Custom jjGameCustomconst GAME::Custom jjGameCustomconst GAME::Custom jjGameCustom","type":"property","arguments":[]},{"name":"jjGameMode","description":"The most jjOBJs that can ever exist at the same time. This equals 2048 in local Single Player/Coop, or 4096 otherwise.\n","full":"const GAME::Mode jjGameModeconst GAME::Mode jjGameModeconst GAME::Mode jjGameModeconst GAME::Mode jjGameMode","type":"property","arguments":[]},{"name":"jjGameState","description":"All the objects currently in memory.\n","full":"const GAME::State jjGameStateconst GAME::State jjGameStateconst GAME::State jjGameStateconst GAME::State jjGameState","type":"property","arguments":[]},{"name":"jjGameTicks","description":"The current palette. See the jjPAL documentation above for further details.\n","full":"const int jjGameTicksconst int jjGameTicks","type":"property","arguments":[]},{"name":"jjHelpStrings[16]","description":"Doesn't work! Check back later.\n","full":"string jjHelpStrings[16]string jjHelpStrings[16]","type":"property","arguments":[]},{"name":"jjIsAdmin","description":"Whether the quirks mode is enabled, as set by the /quirks command.\n","full":"const bool jjIsAdminconst bool jjIsAdmin","type":"property","arguments":[]},{"name":"jjIsServer","description":"The size of the current game window in pixels, usually 640 by 480.\n","full":"const bool jjIsServerconst bool jjIsServer","type":"property","arguments":[]},{"name":"jjIsSnowing","description":"The maximum size the game window is allowed to be in the current level/server.\n","full":"bool jjIsSnowingbool jjIsSnowing","type":"property","arguments":[]},{"name":"jjIsSnowingOutdoorsOnly","description":"Whether the show max health option from the Plus menu is enabled.\n","full":"bool jjIsSnowingOutdoorsOnlybool jjIsSnowingOutdoorsOnly","type":"property","arguments":[]},{"name":"jjIsTSF","description":"Type of the current weather effect. Note that that this setting only influences the game if jjIsSnowing is true. Possible values are SNOW, FLOWER, RAIN, and LEAF, each spawning particles of the corresponding PARTICLE::Type.\n","full":"const bool jjIsTSFconst bool jjIsTSF","type":"property","arguments":[]},{"name":"jjKey[256]","description":"Mute Sound, as seen in the Sound & Music Properties window.\n","full":"const bool jjKey[256]const bool jjKey[256]","type":"property","arguments":[]},{"name":"jjKeyChat","description":"How much health a player starts with, as set by the /starthealth command. Defaults to 5 in Single Player/Cooperative/Battle, or 3 in Capture The Flag.\n","full":"uint8 jjKeyChatuint8 jjKeyChat","type":"property","arguments":[]},{"name":"jjLayerHasTiles[8]","description":"The size of a player's subscreen in pixels. If there is only one local player and the game is not being viewed in 3D, these will be equal to jjResolutionHeight and jjResolutionWidth -- otherwise, either or both may be cut in half. The subscreen size includes, and is therefore not changed by the values of, jjBorderHeight and jjBorderWidth.\n","full":"bool jjLayerHasTiles[8]bool jjLayerHasTiles[8]","type":"property","arguments":[]},{"name":"jjLayerHeight[8]","description":"In online multiplayer levels where this is false for the host, clients with sugar rushes will be kicked for hacking. This property is set to true between onLevelLoad and onLevelBegin if there are any events in the level that will spawn food objects. If you need to allow sugar rushes for another reason, e.g. jjPLAYER::startSugarRush, your script should set this property to true in onLevelBegin at the earliest. (See the description of jjWEAPON::allowed for more technical details, but as applied to the list of food events instead.)\n","full":"const int jjLayerHeight[8]const int jjLayerHeight[8]","type":"property","arguments":[]},{"name":"jjLayerLimitVisibleRegion[8]","description":"Each team's current score in team-based game modes and undefined value in other modes. Available indexes are BLUE, RED, GREEN and YELLOW.\n","full":"bool jjLayerLimitVisibleRegion[8]bool jjLayerLimitVisibleRegion[8]","type":"property","arguments":[]},{"name":"jjLayerTileHeight[8]","description":"Shortcut global properties for corresponding jjLAYER or jjLAYER::warpHorizon properties of the background layer, i.e. jjLayers[8].\n","full":"bool jjLayerTileHeight[8]bool jjLayerTileHeight[8]","type":"property","arguments":[]},{"name":"jjLayerTileWidth[8]","description":"Shortcut global properties for corresponding jjLAYER or jjLAYER::warpHorizon properties of the background layer, i.e. jjLayers[8].\n","full":"bool jjLayerTileWidth[8]bool jjLayerTileWidth[8]","type":"property","arguments":[]},{"name":"jjLayerWidth[8]","description":"Shortcut global properties for corresponding jjLAYER or jjLAYER::warpHorizon properties of the background layer, i.e. jjLayers[8].\n","full":"const int jjLayerWidth[8]const int jjLayerWidth[8]","type":"property","arguments":[]},{"name":"jjLayerWidthReal[8]","description":"A shortcut property for jjLayers[8]'s textureSurface property. Returns true iff the property is anything other than SURFACE::UNTEXTURED. Set jjTexturedBGUsed to true to set to SURFACE::LEGACY, or to false to set to SURFACE::UNTEXTURED.\n","full":"const int jjLayerWidthReal[8]const int jjLayerWidthReal[8]","type":"property","arguments":[]},{"name":"jjLayerWidthRounded[8]","description":"The number of (non-animated, non-flipped) tiles currently defined in the level, usually a multiple of 10. Can be increased using jjTilesFromTileset.\n","full":"const int jjLayerWidthRounded[8]const int jjLayerWidthRounded[8]","type":"property","arguments":[]},{"name":"jjLayerXAutoSpeed[8]","description":"Static and animated tiles corresponding to tile IDs.\nSee also jjAnimatedTiles.\n","full":"float jjLayerXAutoSpeed[8]float jjLayerXAutoSpeed[8]","type":"property","arguments":[]},{"name":"jjLayerYAutoSpeed[8]","description":"See also jjAnimatedTiles.\n","full":"float jjLayerYAutoSpeed[8]float jjLayerYAutoSpeed[8]","type":"property","arguments":[]},{"name":"jjLayerXOffset[8]","description":"File name of the tileset used by the current level, e.g. castle1.j2t, all lowercase. The file extension (.j2t) will be included, but not the folder structure.\n","full":"float jjLayerXOffset[8]float jjLayerXOffset[8]","type":"property","arguments":[]},{"name":"jjLayerYOffset[8]","description":"Each tile's tile type: 0 for normal, 1 for translucent, 3 for invisible, and so on. Refer to your JCS.ini for the full list.\n","full":"float jjLayerYOffset[8]float jjLayerYOffset[8]","type":"property","arguments":[]},{"name":"jjLayerXSpeed[8]","description":"The triggers, as set by the Trigger Zone and Trigger Crate events.\n","full":"float jjLayerXSpeed[8]float jjLayerXSpeed[8]","type":"property","arguments":[]},{"name":"jjLayerYSpeed[8]","description":"In Roast Tag game mode, the player who is currently \"it\" or null if none. For the other special role in Roast Tag, see jjBottomFeeder.\n","full":"float jjLayerYSpeed[8]float jjLayerYSpeed[8]","type":"property","arguments":[]},{"name":"jjLayers[8]","description":"If there are exactly two local players, how the window is divided into their two subscreens.\n","full":"jjLAYER@ jjLayers[8]jjLAYER@ jjLayers[8]jjLAYER@ jjLayers[8]","type":"property","arguments":[]},{"name":"jjLevelFileName","description":"How fast water moves up or down when the water level is set (by event or function) with the \"Instant\" parameter set to false. Defaults to 1.\n","full":"const string jjLevelFileNameconst string jjLevelFileName","type":"property","arguments":[]},{"name":"jjLevelName","description":"Which layer, 1-8, water is drawn in front of when visible. Defaults to 1. Set to any non-existing layer number to make water invisible. Note that this is a purely visual setting, and putting water behind the sprite layer will not prevent players from swimming in it.\nIf the order of layers has been changed, this property's distance from 4 is its distance from the sprite layer, e.g. leaving it at 1 means that it will be drawn in front of the third layer in front of the sprite layer. (And therefore, if the sprite layer is the first, second, or third layer in the drawing order, water will not be drawn at all.)\n","full":"string jjLevelNamestring jjLevelName","type":"property","arguments":[]},{"name":"jjLocalPlayerCount","description":"This is a constant value; use the jjSetWaterLevel helper function instead for changing it.\n","full":"const int jjLocalPlayerCountconst int jjLocalPlayerCount","type":"property","arguments":[]},{"name":"jjLocalPlayers[4]","description":"The height the water is moving towards, in pixels. If the water level is set (by event or function) with the \"Instant\" parameter set to false, there will be a period in which jjWaterLevel and jjWaterTarget are two distinct values.\nThis is a constant value; use the jjSetWaterLevel helper function instead for changing it.\n","full":"const jjPLAYER@ jjLocalPlayers[4]const jjPLAYER@ jjLocalPlayers[4]const jjPLAYER@ jjLocalPlayers[4]const jjPLAYER@ jjLocalPlayers[4]","type":"property","arguments":[]},{"name":"jjLowDetail","description":"Various properties of the nine different weapons available to a player; see the jjWEAPON section. Possible constants appear in the appendix below, or you may use simple 1-indexed numbers instead.\n","full":"const bool jjLowDetailconst bool jjLowDetail","type":"property","arguments":[]},{"name":"jjMaxHealth","description":"","full":"const int jjMaxHealthconst int jjMaxHealth","type":"property","arguments":[]},{"name":"jjMaxScore","description":"","full":"const int jjMaxScoreconst int jjMaxScore","type":"property","arguments":[]},{"name":"jjMouseAim","description":"","full":"const bool jjMouseAimconst bool jjMouseAim","type":"property","arguments":[]},{"name":"jjMouseX","description":"","full":"const int jjMouseXconst int jjMouseX","type":"property","arguments":[]},{"name":"jjMouseY","description":"","full":"const int jjMouseYconst int jjMouseY","type":"property","arguments":[]},{"name":"jjMusicActive","description":"","full":"const bool jjMusicActiveconst bool jjMusicActive","type":"property","arguments":[]},{"name":"jjMusicFileName","description":"","full":"const string jjMusicFileNameconst string jjMusicFileName","type":"property","arguments":[]},{"name":"jjMusicVolume","description":"","full":"const int jjMusicVolumeconst int jjMusicVolume","type":"property","arguments":[]},{"name":"jjNoBlink","description":"","full":"const bool jjNoBlinkconst bool jjNoBlink","type":"property","arguments":[]},{"name":"jjNoMovement","description":"","full":"const bool jjNoMovementconst bool jjNoMovement","type":"property","arguments":[]},{"name":"jjObjectCount","description":"","full":"const int jjObjectCountconst int jjObjectCount","type":"property","arguments":[]},{"name":"jjObjectMax","description":"","full":"const int jjObjectMaxconst int jjObjectMax","type":"property","arguments":[]},{"name":"jjObjectPresets[256]","description":"","full":"jjOBJ@ jjObjectPresets[256]jjOBJ@ jjObjectPresets[256]jjOBJ@ jjObjectPresets[256]","type":"property","arguments":[]},{"name":"jjObjects[jjObjectMax]","description":"","full":"jjOBJ@ jjObjects[jjObjectMax]jjOBJ@ jjObjects[jjObjectMax]jjOBJ@ jjObjects[jjObjectMax]","type":"property","arguments":[]},{"name":"jjP","description":"","full":"jjPLAYER@ jjPjjPLAYER@ jjPjjPLAYER@ jjP","type":"property","arguments":[]},{"name":"jjPalette","description":"","full":"jjPAL jjPalettejjPAL jjPalettejjPAL jjPalette","type":"property","arguments":[]},{"name":"jjParticles[1024]","description":"","full":"jjPARTICLE@ jjParticles[1024]jjPARTICLE@ jjParticles[1024]","type":"property","arguments":[]},{"name":"jjPlayerCount","description":"","full":"const int jjPlayerCountconst int jjPlayerCount","type":"property","arguments":[]},{"name":"jjPlayers[32]","description":"","full":"const jjPLAYER@ jjPlayers[32]const jjPLAYER@ jjPlayers[32]const jjPLAYER@ jjPlayers[32]const jjPLAYER@ jjPlayers[32]","type":"property","arguments":[]},{"name":"jjQuirks","description":"","full":"const bool jjQuirksconst bool jjQuirks","type":"property","arguments":[]},{"name":"jjRenderFrame","description":"","full":"const int jjRenderFrameconst int jjRenderFrame","type":"property","arguments":[]},{"name":"jjResolutionHeight","description":"","full":"const int jjResolutionHeightconst int jjResolutionHeight","type":"property","arguments":[]},{"name":"jjResolutionWidth","description":"","full":"const int jjResolutionWidthconst int jjResolutionWidth","type":"property","arguments":[]},{"name":"jjResolutionMaxHeight","description":"","full":"const int jjResolutionMaxHeightconst int jjResolutionMaxHeight","type":"property","arguments":[]},{"name":"jjResolutionMaxWidth","description":"","full":"const int jjResolutionMaxWidthconst int jjResolutionMaxWidth","type":"property","arguments":[]},{"name":"jjScriptModuleID","description":"","full":"const uint jjScriptModuleIDconst uint jjScriptModuleID","type":"property","arguments":[]},{"name":"jjShowMaxHealth","description":"","full":"const bool jjShowMaxHealthconst bool jjShowMaxHealth","type":"property","arguments":[]},{"name":"jjSnowingIntensity","description":"","full":"uint8 jjSnowingIntensityuint8 jjSnowingIntensity","type":"property","arguments":[]},{"name":"jjSnowingType","description":"","full":"SNOWING::Type jjSnowingTypeSNOWING::Type jjSnowingTypeSNOWING::Type jjSnowingType","type":"property","arguments":[]},{"name":"jjSoundEnabled","description":"","full":"const bool jjSoundEnabledconst bool jjSoundEnabled","type":"property","arguments":[]},{"name":"jjSoundFXActive","description":"","full":"const bool jjSoundFXActiveconst bool jjSoundFXActive","type":"property","arguments":[]},{"name":"jjSoundFXVolume","description":"","full":"const int jjSoundFXVolumeconst int jjSoundFXVolume","type":"property","arguments":[]},{"name":"jjStartHealth","description":"","full":"const int jjStartHealthconst int jjStartHealth","type":"property","arguments":[]},{"name":"jjStrongPowerups","description":"","full":"const bool jjStrongPowerupsconst bool jjStrongPowerups","type":"property","arguments":[]},{"name":"jjSubscreenHeight","description":"","full":"const int jjSubscreenHeightconst int jjSubscreenHeight","type":"property","arguments":[]},{"name":"jjSubscreenWidth","description":"","full":"const int jjSubscreenWidthconst int jjSubscreenWidth","type":"property","arguments":[]},{"name":"jjSugarRushAllowed","description":"","full":"bool jjSugarRushAllowedbool jjSugarRushAllowed","type":"property","arguments":[]},{"name":"jjTeamScore[TEAM::Color]","description":"","full":"const int jjTeamScore[TEAM::Color]const int jjTeamScore[TEAM::Color]","type":"property","arguments":[]},{"name":"jjTexturedBGFadePositionX","description":"","full":"float jjTexturedBGFadePositionXfloat jjTexturedBGFadePositionX","type":"property","arguments":[]},{"name":"jjTexturedBGFadePositionY","description":"","full":"float jjTexturedBGFadePositionYfloat jjTexturedBGFadePositionY","type":"property","arguments":[]},{"name":"jjTexturedBGStars","description":"","full":"bool jjTexturedBGStarsbool jjTexturedBGStars","type":"property","arguments":[]},{"name":"jjTexturedBGStyle","description":"","full":"TEXTURE::Style jjTexturedBGStyleTEXTURE::Style jjTexturedBGStyleTEXTURE::Style jjTexturedBGStyle","type":"property","arguments":[]},{"name":"jjTexturedBGTexture","description":"","full":"TEXTURE::Texture jjTexturedBGTextureTEXTURE::Texture jjTexturedBGTextureTEXTURE::Texture jjTexturedBGTexture","type":"property","arguments":[]},{"name":"jjTexturedBGUsed","description":"","full":"bool jjTexturedBGUsedbool jjTexturedBGUsed","type":"property","arguments":[]},{"name":"jjTileCount","description":"","full":"const uint jjTileCountconst uint jjTileCount","type":"property","arguments":[]},{"name":"jjTiles[0x10000]","description":"","full":"const jjTILE@ jjTiles[0x10000]const jjTILE@ jjTiles[0x10000]","type":"property","arguments":[]},{"name":"jjTilesetFileName","description":"","full":"const string jjTilesetFileNameconst string jjTilesetFileName","type":"property","arguments":[]},{"name":"jjTileType[4096]","description":"","full":"uint8 jjTileType[4096]uint8 jjTileType[4096]","type":"property","arguments":[]},{"name":"jjTriggers[32]","description":"","full":"bool jjTriggers[32]bool jjTriggers[32]","type":"property","arguments":[]},{"name":"jjTokenOwner","description":"","full":"jjPLAYER@ jjTokenOwnerjjPLAYER@ jjTokenOwner","type":"property","arguments":[]},{"name":"jjUseLayer8Speeds","description":"","full":"bool jjUseLayer8Speedsbool jjUseLayer8Speeds","type":"property","arguments":[]},{"name":"jjVerticalSplitscreen","description":"","full":"bool jjVerticalSplitscreenbool jjVerticalSplitscreen","type":"property","arguments":[]},{"name":"jjWarpsTransmuteCoins","description":"","full":"bool jjWarpsTransmuteCoinsbool jjWarpsTransmuteCoins","type":"property","arguments":[]},{"name":"jjWaterChangeSpeed","description":"","full":"float jjWaterChangeSpeedfloat jjWaterChangeSpeed","type":"property","arguments":[]},{"name":"jjWaterInteraction","description":"","full":"WATERINTERACTION::WaterInteraction jjWaterInteractionWATERINTERACTION::WaterInteraction jjWaterInteractionWATERINTERACTION::WaterInteraction jjWaterInteraction","type":"property","arguments":[]},{"name":"jjWaterLayer","description":"","full":"int jjWaterLayerint jjWaterLayer","type":"property","arguments":[]},{"name":"jjWaterLevel","description":"","full":"const float jjWaterLevelconst float jjWaterLevel","type":"property","arguments":[]},{"name":"jjWaterLighting","description":"","full":"WATERLIGHT::wl jjWaterLightingWATERLIGHT::wl jjWaterLightingWATERLIGHT::wl jjWaterLighting","type":"property","arguments":[]},{"name":"jjWaterTarget","description":"","full":"const float jjWaterTargetconst float jjWaterTarget","type":"property","arguments":[]},{"name":"jjWeapons[WEAPON::Weapon]","description":"","full":"jjWEAPON jjWeapons[WEAPON::Weapon]jjWEAPON jjWeapons[WEAPON::Weapon]","type":"property","arguments":[]},{"name":"jjWeapons[9]","description":"","full":"jjWEAPON jjWeapons[9]jjWEAPON jjWeapons[9]","type":"property","arguments":[]},{"name":"p","description":"","full":"jjPLAYER@ pjjPLAYER@ pjjPLAYER@ p","type":"property","arguments":[]}]