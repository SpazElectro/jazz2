[{"name":"color[256]","description":"Causes the contents of this jjPAL object to be the current colors in use by the game, and by extension jjPalette.\nNote that this function does a fair bit of housekeeping behind the scenes to make sure everything is propertly converted to the new palette�there's a difference between myPal.apply(); and jjPalette = myPal;�and so it should always be called after doing any edits, even if you've been making the edits directly to jjPalette. Failure to do so can have unpredictable consequences.\n","full":"jjPALCOLOR color[256]jjPALCOLOR color[256]","type":"property","arguments":[]},{"name":"apply","description":"Overlays length colors from source onto the current palette, beginning at start on this palette and start2 on source. If opacity is below 1.0, the new colors will only partially replace the old.\n","full":"void apply() const","type":"function","arguments":[]},{"name":"copyFrom","description":"Returns index of the palette entry whose components differ the least from those of the provided color. Ensures the result has no special treatment by never returning values from the range of 0-15.\n","full":"void copyFrom(uint8 start, uint8 length, uint8 start2, const jjPAL &in source, float opacity)","type":"function","arguments":[{"type":"uint8","name":"start","attributes":[],"items":[]},{"type":"uint8","name":"length","attributes":[],"items":[]},{"type":"uint8","name":"start2","attributes":[],"items":[]},{"type":"jjPAL","name":"source","attributes":["const","&in"],"items":[]},{"type":"float","name":"opacity","attributes":[],"items":[]}]},{"name":"fill","description":"Replaces a series of length colors beginning at start with a gradient beginning with red1,green1,blue1 (or color1) and ending with red2,green2,blue2 (or color2). If opacity is specified and below 1.0, the new colors will only partially replace the old, making for a tinting effect.\nIf inclusive is false (default), the gradient will lead up to the second color but the second color will not itself appear. If true, the second color will appear directly in the palette as the final color of the gradient. For example, a gradient of red1:100, red2:0, and length:3 will produce the red values 100,66,33 when inclusive is false, but 100,50,0 when inclusive is true.\nThe default values for start and length will set a gradient for the colors used by water and (in most tilesets) textured backgrounds.\n","full":"void fill(uint8 red, uint8 green, uint8 blue, uint8 start, uint8 length, float opacity = 1.0)","type":"function","arguments":[{"type":"uint8","name":"red","attributes":[],"items":[]},{"type":"uint8","name":"green","attributes":[],"items":[]},{"type":"uint8","name":"blue","attributes":[],"items":[]},{"type":"uint8","name":"start","attributes":[],"items":[]},{"type":"uint8","name":"length","attributes":[],"items":[]},{"type":"float","name":"opacity","defaultValue":"1.0","attributes":[],"items":[]}]},{"name":"fill","description":"The default values for start and length will set a gradient for the colors used by water and (in most tilesets) textured backgrounds.\n","full":"void fill(uint8 red, uint8 green, uint8 blue, float opacity = 1.0)","type":"function","arguments":[{"type":"uint8","name":"red","attributes":[],"items":[]},{"type":"uint8","name":"green","attributes":[],"items":[]},{"type":"uint8","name":"blue","attributes":[],"items":[]},{"type":"float","name":"opacity","defaultValue":"1.0","attributes":[],"items":[]}]},{"name":"fill","description":"Loads a palette from the specified file. If the file is a tileset with a \".j2t\" extension, an 8-bit globally-paletted GIF image/animation with a \".gif\" extension, or an 8-bit paletted or grayscale PNG image with a \".png\" extension, will try to access the palette stored in the file. Otherwise, tries to treat it as a palette file saved in \"Color Table\" format in Palette Suite, and if that fails, simply reads the first 1024 bytes of the file. Returns false if the file cannot be found, or if trying to read the file based on its extension fails, or if the file is fewer than 1024 bytes long; otherwise true.\n","full":"void fill(jjPALCOLOR color, uint8 start, uint8 length, float opacity = 1.0)","type":"function","arguments":[{"type":"jjPALCOLOR","name":"color","attributes":[],"items":[]},{"type":"uint8","name":"start","attributes":[],"items":[]},{"type":"uint8","name":"length","attributes":[],"items":[]},{"type":"float","name":"opacity","defaultValue":"1.0","attributes":[],"items":[]}]},{"name":"fill","description":"Loads the original colors used by the tileset. There is no non-stylistic difference between myPal.reset(); and myPal = jjBackupPalette;.\n","full":"void fill(jjPALCOLOR color, float opacity = 1.0)","type":"function","arguments":[{"type":"jjPALCOLOR","name":"color","attributes":[],"items":[]},{"type":"float","name":"opacity","defaultValue":"1.0","attributes":[],"items":[]}]},{"name":"findNearestColor","description":"","full":"uint8 findNearestColor(jjPALCOLOR color) const","type":"function","arguments":[{"type":"jjPALCOLOR","name":"color","attributes":[],"items":[]}]},{"name":"gradient","description":"","full":"void gradient(uint8 red1, uint8 green1, uint8 blue1, uint8 red2, uint8 green2, uint8 blue2, uint8 start = 176, uint8 length = 32, float opacity = 1.0, bool inclusive = false)","type":"function","arguments":[{"type":"uint8","name":"red1","attributes":[],"items":[]},{"type":"uint8","name":"green1","attributes":[],"items":[]},{"type":"uint8","name":"blue1","attributes":[],"items":[]},{"type":"uint8","name":"red2","attributes":[],"items":[]},{"type":"uint8","name":"green2","attributes":[],"items":[]},{"type":"uint8","name":"blue2","attributes":[],"items":[]},{"type":"uint8","name":"start","defaultValue":"176","attributes":[],"items":[]},{"type":"uint8","name":"length","defaultValue":"32","attributes":[],"items":[]},{"type":"float","name":"opacity","defaultValue":"1.0","attributes":[],"items":[]},{"type":"bool","name":"inclusive","defaultValue":"false","attributes":[],"items":[]}]},{"name":"gradient","description":"","full":"void gradient(jjPALCOLOR color1, jjPALCOLOR color2, uint8 start = 176, uint8 length = 32, float opacity = 1.0, bool inclusive = false)","type":"function","arguments":[{"type":"jjPALCOLOR","name":"color1","attributes":[],"items":[]},{"type":"jjPALCOLOR","name":"color2","attributes":[],"items":[]},{"type":"uint8","name":"start","defaultValue":"176","attributes":[],"items":[]},{"type":"uint8","name":"length","defaultValue":"32","attributes":[],"items":[]},{"type":"float","name":"opacity","defaultValue":"1.0","attributes":[],"items":[]},{"type":"bool","name":"inclusive","defaultValue":"false","attributes":[],"items":[]}]},{"name":"load","description":"","full":"bool load(string& filename)","type":"function","arguments":[{"type":"string&","name":"filename","attributes":[],"items":[]}]},{"name":"reset","description":"","full":"void reset()","type":"function","arguments":[]}]