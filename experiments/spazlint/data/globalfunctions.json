[{"name":"jjAddObject","description":"The difference between jjAddObject(1, 0, 0, CREATOR::OBJECT, 0, BEHAVIOR::BOUNCERBULLET); and jjObjects[jjAddObject(1, 0, 0)].behavior = BEHAVIOR::BOUNCERBULLET; is that jjAddObject calls the object's behavior function as part of creating it. The first version will call BEHAVIOR::BOUNCERBULLET while the object's state is still STATE::START; the second version will call jjObjectPresets[1].behavior and only switch the object's behavior to BEHAVIOR::BOUNCERBULLET after it has already been initialized and its state likely changed to something else. The same distinction applies to setting the object's xOrg/yOrg, creatorType, and creatorID properties as parameters to the function or later on. See jjBEHAVIORINTERFACE.\n","full":"int jjAddObject(uint8 eventID, float xPixel, float yPixel, uint16 creatorID = 0, CREATOR::Type creatorType = CREATOR::OBJECT, jjBEHAVIOR behavior = BEHAVIOR::DEFAULT)","type":"function","arguments":[{"type":"uint8","name":"eventID","attributes":[],"items":[]},{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"uint16","name":"creatorID","defaultValue":"0","attributes":[],"items":[]},{"type":"CREATOR::Type","name":"creatorType","defaultValue":"CREATOR::OBJECT","attributes":[],"items":["OBJECT","LEVEL","PLAYER"]},{"type":"jjBEHAVIOR","name":"behavior","defaultValue":"BEHAVIOR::DEFAULT","attributes":[],"items":["BULLET","SEEKERBULLET","RFBULLET","TOASTERBULLET","PEPPERBULLET","ELECTROBULLET","BUMP","PADDLE","BIGOBJECT","WALKINGENEMY","DESTRUCTSCENERY","ROCKETTURTLE","ROCKETTURTLEPLUS","BOLLYTOP","BOLLYBOTTOM","PLATFORM","SPRING","AMMO15","MONITOR","CRATE","PICKUP","DIAMONDSAREFOREVER","FLAG","INACTIVE","DEFAULT","MONKEYBULLET","BILSYBULLET","BOLLYBULLET","BOLLYSPIKEBALL","WITCHBULLET","TUFBOSSBULLET","ROBOTSHARD","BONE","EXPLOSION2","BURNING","AIRBOARDFALL","BIRDFEATHER","UFO","CORPSE"]}]},{"name":"jjAddParticle","description":"Creates four fragments of a tile falling from a specified location, like when destroying a destructable scenery block. Does not produce a sound effect; use jjSample or jjSamplePriority for that instead. The fragments will continue to be drawn until they fall off the screen. If you want more control over the fragments' positions, speeds, etc., use jjAddParticle instead.\n","full":"jjPARTICLE@ jjAddParticle(PARTICLE::Type type)","type":"function","arguments":[{"type":"PARTICLE::Type","name":"type","attributes":[],"items":["INACTIVE","FIRE","FLOWER","ICETRAIL","LEAF","PIXEL","RAIN","SMOKE","SNOW","SPARK","STAR","STRING","TILE"]}]},{"name":"jjAddParticlePixelExplosion","description":"In online play, sends text to the server as a line of chat. If text is a command (e.g. \"/spectate on\" or \"/ready\"), it will be interpreted as such to the extent that the local player is allowed to use that command in the server.\nIn offline play, JJ2+ will try to parse text as a command but will not display it as chat because there is no chat in offline mode. If you want to simulate chatting in a local game, use jjAlert instead.\n","full":"void jjAddParticlePixelExplosion(float xPixel, float yPixel, int curFrame, int direction, int mode)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"int","name":"curFrame","attributes":[],"items":[]},{"type":"int","name":"direction","attributes":[],"items":[]},{"type":"int","name":"mode","attributes":[],"items":[]}]},{"name":"jjAddParticleTileExplosion","description":"Returns the cosine of angle with a range of 0.0-1.0 and a domain of 0-1023. Numbers outside the domain will be seemlessly moduloed. You may prefer AngelScript's native cos function.\n","full":"void jjAddParticleTileExplosion(uint16 xTile, uint16 yTile, uint16 tile, bool collapseSceneryStyle)","type":"function","arguments":[{"type":"uint16","name":"xTile","attributes":[],"items":[]},{"type":"uint16","name":"yTile","attributes":[],"items":[]},{"type":"uint16","name":"tile","attributes":[],"items":[]},{"type":"bool","name":"collapseSceneryStyle","attributes":[],"items":[]}]},{"name":"jjAlert","description":"Writes text to the chatlogger window (but not ingame), but only if [General]AngelscriptDebug equals True in plus.ini. If timestamp is true, adds a timestamp before the text.\n","full":"void jjAlert(const string &in text, bool sendToAll = false, STRING::Size size = STRING::SMALL)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"bool","name":"sendToAll","defaultValue":"false","attributes":[],"items":[]},{"type":"STRING::Size","name":"size","defaultValue":"STRING::SMALL","attributes":[],"items":["SMALL","MEDIUM","LARGE"]}]},{"name":"jjChat","description":"Global function versions of the jjCANVAS methods as applied to onDrawLayer# hooks, differing in that the jjCANVAS methods are executed instantly, whereas these functions create instructions for JJ2 to perform the drawing operations later on, at the proper time. For example, a swinging platform will call jjDrawSpriteFromCurFrame many times over, once for each of its chain links, in the middle of its behavior function, but the links won't actually get drawn to the screen until later in the game cycle. Native JJ2 code uses this method for everything but HUD graphics.\nThe layerZ parameter specifies which layer, 1-8, the graphic should be drawn in front of as its Z-index. Unlike the jjCANVAS hooks, this can be used even for layers that don't have any tiles. JJ2 draws sprites exclusively(?) in front of layers 3, 4, and 5, but you're welcome to experiment.\nThe layerXY parameter specifies which layer, 1-8, the graphic should be positioned relative to the top left corner of. JJ2 always, always does layer 4, but you can vary it up a bit. Unfortunately the game cycle is ordered so that the layers besides layer 4 may actually move around a little after the instruction is registered but before the graphic is drawn, so these drawing instructions will always be one frame behind. Here the jjCANVAS methods have a clear advantage.\nIf the order of layers has been changed, then layerZ and layerXY's distance from 4 are their distance from the sprite layer, e.g. 3 means not necessarily jjLayers[3], but rather 4-1, the first layer in front of the sprite layer, whichever jjLAYER that happens to be.\nThe playerID parameter specifies which player should see the drawn graphic, 0-31, or -1 for all of them (restricted only to players with true isLocal). Drawing for one player a time is used by JJ2+ to, for example, draw fastfire pickups as green/blue or normal/powered-up depending on the charCurr and powerup[1] values of each jjPLAYER viewing them. When spectating, sprites are drawn for the player ID of the spectator, not the spectatee.\n","full":"void jjChat(const string &in text, bool teamchat = false)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"bool","name":"teamchat","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjConsole","description":"Global function versions of the jjCANVAS methods as applied to onDrawLayer# hooks, differing in that the jjCANVAS methods are executed instantly, whereas these functions create instructions for JJ2 to perform the drawing operations later on, at the proper time. For example, a swinging platform will call jjDrawSpriteFromCurFrame many times over, once for each of its chain links, in the middle of its behavior function, but the links won't actually get drawn to the screen until later in the game cycle. Native JJ2 code uses this method for everything but HUD graphics.\nThe layerZ parameter specifies which layer, 1-8, the graphic should be drawn in front of as its Z-index. Unlike the jjCANVAS hooks, this can be used even for layers that don't have any tiles. JJ2 draws sprites exclusively(?) in front of layers 3, 4, and 5, but you're welcome to experiment.\nThe layerXY parameter specifies which layer, 1-8, the graphic should be positioned relative to the top left corner of. JJ2 always, always does layer 4, but you can vary it up a bit. Unfortunately the game cycle is ordered so that the layers besides layer 4 may actually move around a little after the instruction is registered but before the graphic is drawn, so these drawing instructions will always be one frame behind. Here the jjCANVAS methods have a clear advantage.\nIf the order of layers has been changed, then layerZ and layerXY's distance from 4 are their distance from the sprite layer, e.g. 3 means not necessarily jjLayers[3], but rather 4-1, the first layer in front of the sprite layer, whichever jjLAYER that happens to be.\nThe playerID parameter specifies which player should see the drawn graphic, 0-31, or -1 for all of them (restricted only to players with true isLocal). Drawing for one player a time is used by JJ2+ to, for example, draw fastfire pickups as green/blue or normal/powered-up depending on the charCurr and powerup[1] values of each jjPLAYER viewing them. When spectating, sprites are drawn for the player ID of the spectator, not the spectatee.\n","full":"void jjConsole(const string &in text, bool sendToAll = false)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"bool","name":"sendToAll","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjCos","description":"Global function versions of the jjCANVAS methods as applied to onDrawLayer# hooks, differing in that the jjCANVAS methods are executed instantly, whereas these functions create instructions for JJ2 to perform the drawing operations later on, at the proper time. For example, a swinging platform will call jjDrawSpriteFromCurFrame many times over, once for each of its chain links, in the middle of its behavior function, but the links won't actually get drawn to the screen until later in the game cycle. Native JJ2 code uses this method for everything but HUD graphics.\nThe layerZ parameter specifies which layer, 1-8, the graphic should be drawn in front of as its Z-index. Unlike the jjCANVAS hooks, this can be used even for layers that don't have any tiles. JJ2 draws sprites exclusively(?) in front of layers 3, 4, and 5, but you're welcome to experiment.\nThe layerXY parameter specifies which layer, 1-8, the graphic should be positioned relative to the top left corner of. JJ2 always, always does layer 4, but you can vary it up a bit. Unfortunately the game cycle is ordered so that the layers besides layer 4 may actually move around a little after the instruction is registered but before the graphic is drawn, so these drawing instructions will always be one frame behind. Here the jjCANVAS methods have a clear advantage.\nIf the order of layers has been changed, then layerZ and layerXY's distance from 4 are their distance from the sprite layer, e.g. 3 means not necessarily jjLayers[3], but rather 4-1, the first layer in front of the sprite layer, whichever jjLAYER that happens to be.\nThe playerID parameter specifies which player should see the drawn graphic, 0-31, or -1 for all of them (restricted only to players with true isLocal). Drawing for one player a time is used by JJ2+ to, for example, draw fastfire pickups as green/blue or normal/powered-up depending on the charCurr and powerup[1] values of each jjPLAYER viewing them. When spectating, sprites are drawn for the player ID of the spectator, not the spectatee.\n","full":"float jjCos(uint angle)","type":"function","arguments":[{"type":"uint","name":"angle","attributes":[],"items":[]}]},{"name":"jjCRC32","description":"Global function versions of the jjCANVAS methods as applied to onDrawLayer# hooks, differing in that the jjCANVAS methods are executed instantly, whereas these functions create instructions for JJ2 to perform the drawing operations later on, at the proper time. For example, a swinging platform will call jjDrawSpriteFromCurFrame many times over, once for each of its chain links, in the middle of its behavior function, but the links won't actually get drawn to the screen until later in the game cycle. Native JJ2 code uses this method for everything but HUD graphics.\nThe layerZ parameter specifies which layer, 1-8, the graphic should be drawn in front of as its Z-index. Unlike the jjCANVAS hooks, this can be used even for layers that don't have any tiles. JJ2 draws sprites exclusively(?) in front of layers 3, 4, and 5, but you're welcome to experiment.\nThe layerXY parameter specifies which layer, 1-8, the graphic should be positioned relative to the top left corner of. JJ2 always, always does layer 4, but you can vary it up a bit. Unfortunately the game cycle is ordered so that the layers besides layer 4 may actually move around a little after the instruction is registered but before the graphic is drawn, so these drawing instructions will always be one frame behind. Here the jjCANVAS methods have a clear advantage.\nIf the order of layers has been changed, then layerZ and layerXY's distance from 4 are their distance from the sprite layer, e.g. 3 means not necessarily jjLayers[3], but rather 4-1, the first layer in front of the sprite layer, whichever jjLAYER that happens to be.\nThe playerID parameter specifies which player should see the drawn graphic, 0-31, or -1 for all of them (restricted only to players with true isLocal). Drawing for one player a time is used by JJ2+ to, for example, draw fastfire pickups as green/blue or normal/powered-up depending on the charCurr and powerup[1] values of each jjPLAYER viewing them. When spectating, sprites are drawn for the player ID of the spectator, not the spectatee.\n","full":"uint jjCRC32(const jjSTREAM &in input, uint crc = 0)","type":"function","arguments":[{"type":"jjSTREAM","name":"input","attributes":["const","&in"],"items":[]},{"type":"uint","name":"crc","defaultValue":"0","attributes":[],"items":[]}]},{"name":"jjDebug","description":"The playerID parameter specifies which player should see the drawn graphic, 0-31, or -1 for all of them (restricted only to players with true isLocal). Drawing for one player a time is used by JJ2+ to, for example, draw fastfire pickups as green/blue or normal/powered-up depending on the charCurr and powerup[1] values of each jjPLAYER viewing them. When spectating, sprites are drawn for the player ID of the spectator, not the spectatee.\n","full":"void jjDebug(const string &in text, bool timestamp = false)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"bool","name":"timestamp","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjDeleteObject","description":"Gets the Event ID at tile xTile,yTile, as seen in JCS.ini. This number can also be compared to the OBJECT or AREA constants listed in the appendix at the bottom of this file.\n","full":"void jjDeleteObject(int objectID)","type":"function","arguments":[{"type":"int","name":"objectID","attributes":[],"items":[]}]},{"name":"jjDrawPixel","description":"Sets the event at tile xTile,yTile to newEventID. Possible OBJECT or AREA constants are listed in the appendix at the bottom of this file.\nCaution: this is a permanent change and will subsist even after death in offline play.\n","full":"void jjDrawPixel(float xPixel, float yPixel, uint8 color, SPRITE::Mode mode = SPRITE::NORMAL, int param = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"uint8","name":"color","attributes":[],"items":[]},{"type":"SPRITE::Mode","name":"mode","defaultValue":"SPRITE::NORMAL","attributes":[],"items":["ALPHAMAP","BLEND_NORMAL","BLEND_DISSOLVE","BLEND_DARKEN","BLEND_MULTIPLY","BLEND_BURN","BLEND_LIGHTEN","BLEND_SCREEN","BLEND_DODGE","BLEND_OVERLAY","BLEND_SOFTLIGHT","BLEND_HARDLIGHT","BLEND_DIFFERENCE","BLEND_EXCLUSION","BLEND_COLOR","BLEND_HUE","BLEND_SATURATION","BLEND_LUMINANCE","BRIGHTNESS","CHROMAKEY","FROZEN","GEM","INVISIBLE","MAPPING","MENUPLAYER","NEONGLOW","NORMAL","PALSHIFT","PLAYER","RESIZED","SHADOW","SINGLECOLOR","SINGLEHUE","TINTED","TRANSLUCENT","TRANSLUCENTCOLOR","TRANSLUCENTMAPPING","TRANSLUCENTPALSHIFT","TRANSLUCENTPLAYER","TRANSLUCENTSINGLEHUE","TRANSLUCENTTILE"]},{"type":"int","name":"param","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawRectangle","description":"Shortcut global function for jjLAYER::generateSettableTileArea on the same-indexed jjLayers objects.\n","full":"void jjDrawRectangle(float xPixel, float yPixel, int width, int height, uint8 color, SPRITE::Mode mode = SPRITE::NORMAL, int param = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"int","name":"width","attributes":[],"items":[]},{"type":"int","name":"height","attributes":[],"items":[]},{"type":"uint8","name":"color","attributes":[],"items":[]},{"type":"SPRITE::Mode","name":"mode","defaultValue":"SPRITE::NORMAL","attributes":[],"items":["ALPHAMAP","BLEND_NORMAL","BLEND_DISSOLVE","BLEND_DARKEN","BLEND_MULTIPLY","BLEND_BURN","BLEND_LIGHTEN","BLEND_SCREEN","BLEND_DODGE","BLEND_OVERLAY","BLEND_SOFTLIGHT","BLEND_HARDLIGHT","BLEND_DIFFERENCE","BLEND_EXCLUSION","BLEND_COLOR","BLEND_HUE","BLEND_SATURATION","BLEND_LUMINANCE","BRIGHTNESS","CHROMAKEY","FROZEN","GEM","INVISIBLE","MAPPING","MENUPLAYER","NEONGLOW","NORMAL","PALSHIFT","PLAYER","RESIZED","SHADOW","SINGLECOLOR","SINGLEHUE","TINTED","TRANSLUCENT","TRANSLUCENTCOLOR","TRANSLUCENTMAPPING","TRANSLUCENTPALSHIFT","TRANSLUCENTPLAYER","TRANSLUCENTSINGLEHUE","TRANSLUCENTTILE"]},{"type":"int","name":"param","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawResizedSprite","description":"Calls and returns the result of jjLayers[8].getFadeColor().\n","full":"void jjDrawResizedSprite(float xPixel, float yPixel, int setID, uint8 animation, uint8 frame, float xScale, float yScale, SPRITE::Mode mode = SPRITE::NORMAL, int param = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"int","name":"setID","attributes":[],"items":[]},{"type":"uint8","name":"animation","attributes":[],"items":[]},{"type":"uint8","name":"frame","attributes":[],"items":[]},{"type":"float","name":"xScale","attributes":[],"items":[]},{"type":"float","name":"yScale","attributes":[],"items":[]},{"type":"SPRITE::Mode","name":"mode","defaultValue":"SPRITE::NORMAL","attributes":[],"items":["ALPHAMAP","BLEND_NORMAL","BLEND_DISSOLVE","BLEND_DARKEN","BLEND_MULTIPLY","BLEND_BURN","BLEND_LIGHTEN","BLEND_SCREEN","BLEND_DODGE","BLEND_OVERLAY","BLEND_SOFTLIGHT","BLEND_HARDLIGHT","BLEND_DIFFERENCE","BLEND_EXCLUSION","BLEND_COLOR","BLEND_HUE","BLEND_SATURATION","BLEND_LUMINANCE","BRIGHTNESS","CHROMAKEY","FROZEN","GEM","INVISIBLE","MAPPING","MENUPLAYER","NEONGLOW","NORMAL","PALSHIFT","PLAYER","RESIZED","SHADOW","SINGLECOLOR","SINGLEHUE","TINTED","TRANSLUCENT","TRANSLUCENTCOLOR","TRANSLUCENTMAPPING","TRANSLUCENTPALSHIFT","TRANSLUCENTPLAYER","TRANSLUCENTSINGLEHUE","TRANSLUCENTTILE"]},{"type":"int","name":"param","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawResizedSpriteFromCurFrame","description":"Returns the current order in the currently playing module music, or -1 if the currently playing music is not a module, a module not handled by BASS or no music is playing.\n","full":"void jjDrawResizedSpriteFromCurFrame(float xPixel, float yPixel, uint sprite, float xScale, float yScale, SPRITE::Mode mode = SPRITE::NORMAL, int param = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"uint","name":"sprite","attributes":[],"items":[]},{"type":"float","name":"xScale","attributes":[],"items":[]},{"type":"float","name":"yScale","attributes":[],"items":[]},{"type":"SPRITE::Mode","name":"mode","defaultValue":"SPRITE::NORMAL","attributes":[],"items":["ALPHAMAP","BLEND_NORMAL","BLEND_DISSOLVE","BLEND_DARKEN","BLEND_MULTIPLY","BLEND_BURN","BLEND_LIGHTEN","BLEND_SCREEN","BLEND_DODGE","BLEND_OVERLAY","BLEND_SOFTLIGHT","BLEND_HARDLIGHT","BLEND_DIFFERENCE","BLEND_EXCLUSION","BLEND_COLOR","BLEND_HUE","BLEND_SATURATION","BLEND_LUMINANCE","BRIGHTNESS","CHROMAKEY","FROZEN","GEM","INVISIBLE","MAPPING","MENUPLAYER","NEONGLOW","NORMAL","PALSHIFT","PLAYER","RESIZED","SHADOW","SINGLECOLOR","SINGLEHUE","TINTED","TRANSLUCENT","TRANSLUCENTCOLOR","TRANSLUCENTMAPPING","TRANSLUCENTPALSHIFT","TRANSLUCENTPLAYER","TRANSLUCENTSINGLEHUE","TRANSLUCENTTILE"]},{"type":"int","name":"param","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawRotatedSprite","description":"Returns the current row in the currently playing module music, or -1 if the currently playing music is not a module, a module not handled by BASS or no music is playing.\n","full":"void jjDrawRotatedSprite(float xPixel, float yPixel, int setID, uint8 animation, uint8 frame, int angle, float xScale = 1, float yScale = 1, SPRITE::Mode mode = SPRITE::NORMAL, int param = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"int","name":"setID","attributes":[],"items":[]},{"type":"uint8","name":"animation","attributes":[],"items":[]},{"type":"uint8","name":"frame","attributes":[],"items":[]},{"type":"int","name":"angle","attributes":[],"items":[]},{"type":"float","name":"xScale","defaultValue":"1","attributes":[],"items":[]},{"type":"float","name":"yScale","defaultValue":"1","attributes":[],"items":[]},{"type":"SPRITE::Mode","name":"mode","defaultValue":"SPRITE::NORMAL","attributes":[],"items":["ALPHAMAP","BLEND_NORMAL","BLEND_DISSOLVE","BLEND_DARKEN","BLEND_MULTIPLY","BLEND_BURN","BLEND_LIGHTEN","BLEND_SCREEN","BLEND_DODGE","BLEND_OVERLAY","BLEND_SOFTLIGHT","BLEND_HARDLIGHT","BLEND_DIFFERENCE","BLEND_EXCLUSION","BLEND_COLOR","BLEND_HUE","BLEND_SATURATION","BLEND_LUMINANCE","BRIGHTNESS","CHROMAKEY","FROZEN","GEM","INVISIBLE","MAPPING","MENUPLAYER","NEONGLOW","NORMAL","PALSHIFT","PLAYER","RESIZED","SHADOW","SINGLECOLOR","SINGLEHUE","TINTED","TRANSLUCENT","TRANSLUCENTCOLOR","TRANSLUCENTMAPPING","TRANSLUCENTPALSHIFT","TRANSLUCENTPLAYER","TRANSLUCENTSINGLEHUE","TRANSLUCENTTILE"]},{"type":"int","name":"param","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawRotatedSpriteFromCurFrame","description":"Returns the \"speed\" parameter (ticks per row) of the currently playing module music, or -1 if the currently playing music is not a module, a module not handled by BASS or no music is playing.\n","full":"void jjDrawRotatedSpriteFromCurFrame(float xPixel, float yPixel, uint sprite, int angle, float xScale = 1, float yScale = 1, SPRITE::Mode mode = SPRITE::NORMAL, int param = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"uint","name":"sprite","attributes":[],"items":[]},{"type":"int","name":"angle","attributes":[],"items":[]},{"type":"float","name":"xScale","defaultValue":"1","attributes":[],"items":[]},{"type":"float","name":"yScale","defaultValue":"1","attributes":[],"items":[]},{"type":"SPRITE::Mode","name":"mode","defaultValue":"SPRITE::NORMAL","attributes":[],"items":["ALPHAMAP","BLEND_NORMAL","BLEND_DISSOLVE","BLEND_DARKEN","BLEND_MULTIPLY","BLEND_BURN","BLEND_LIGHTEN","BLEND_SCREEN","BLEND_DODGE","BLEND_OVERLAY","BLEND_SOFTLIGHT","BLEND_HARDLIGHT","BLEND_DIFFERENCE","BLEND_EXCLUSION","BLEND_COLOR","BLEND_HUE","BLEND_SATURATION","BLEND_LUMINANCE","BRIGHTNESS","CHROMAKEY","FROZEN","GEM","INVISIBLE","MAPPING","MENUPLAYER","NEONGLOW","NORMAL","PALSHIFT","PLAYER","RESIZED","SHADOW","SINGLECOLOR","SINGLEHUE","TINTED","TRANSLUCENT","TRANSLUCENTCOLOR","TRANSLUCENTMAPPING","TRANSLUCENTPALSHIFT","TRANSLUCENTPLAYER","TRANSLUCENTSINGLEHUE","TRANSLUCENTTILE"]},{"type":"int","name":"param","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawSprite","description":"Returns the tempo of the currently playing module music, or -1 if the currently playing music is not a module, a module not handled by BASS or no music is playing.\n","full":"void jjDrawSprite(float xPixel, float yPixel, int setID, uint8 animation, uint8 frame, int direction = 0, SPRITE::Mode mode = SPRITE::NORMAL, int param = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"int","name":"setID","attributes":[],"items":[]},{"type":"uint8","name":"animation","attributes":[],"items":[]},{"type":"uint8","name":"frame","attributes":[],"items":[]},{"type":"int","name":"direction","defaultValue":"0","attributes":[],"items":[]},{"type":"SPRITE::Mode","name":"mode","defaultValue":"SPRITE::NORMAL","attributes":[],"items":["ALPHAMAP","BLEND_NORMAL","BLEND_DISSOLVE","BLEND_DARKEN","BLEND_MULTIPLY","BLEND_BURN","BLEND_LIGHTEN","BLEND_SCREEN","BLEND_DODGE","BLEND_OVERLAY","BLEND_SOFTLIGHT","BLEND_HARDLIGHT","BLEND_DIFFERENCE","BLEND_EXCLUSION","BLEND_COLOR","BLEND_HUE","BLEND_SATURATION","BLEND_LUMINANCE","BRIGHTNESS","CHROMAKEY","FROZEN","GEM","INVISIBLE","MAPPING","MENUPLAYER","NEONGLOW","NORMAL","PALSHIFT","PLAYER","RESIZED","SHADOW","SINGLECOLOR","SINGLEHUE","TINTED","TRANSLUCENT","TRANSLUCENTCOLOR","TRANSLUCENTMAPPING","TRANSLUCENTPALSHIFT","TRANSLUCENTPLAYER","TRANSLUCENTSINGLEHUE","TRANSLUCENTTILE"]},{"type":"int","name":"param","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawSpriteFromCurFrame","description":"If moduleName is a name of a currently running script module that registers the onGetPublicInterface hook, calls that hook and returns its result, otherwise returns null. Module names are the same as names of files that contain the modules, including the file extension \".j2as\" or \".mut\", and the comparison is not case sensitive. In the target module, onGetPublicInterface must be a global function with the following signature:\n\t\t\tjjPUBLICINTERFACE@ onGetPublicInterface()\n\t\t\tThe exact return type may differ as long as it is a handle to a class or interface that implements jjPUBLICINTERFACE. This function should not be called earlier than in onLevelLoad, i.e. it should not be used to initialize a global variable, as the target module may not be available at that point yet. More details about usage of this function may be found in the dedicated section of this document.\n","full":"void jjDrawSpriteFromCurFrame(float xPixel, float yPixel, uint sprite, int direction = 0, SPRITE::Mode mode = SPRITE::NORMAL, int param = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"uint","name":"sprite","attributes":[],"items":[]},{"type":"int","name":"direction","defaultValue":"0","attributes":[],"items":[]},{"type":"SPRITE::Mode","name":"mode","defaultValue":"SPRITE::NORMAL","attributes":[],"items":["ALPHAMAP","BLEND_NORMAL","BLEND_DISSOLVE","BLEND_DARKEN","BLEND_MULTIPLY","BLEND_BURN","BLEND_LIGHTEN","BLEND_SCREEN","BLEND_DODGE","BLEND_OVERLAY","BLEND_SOFTLIGHT","BLEND_HARDLIGHT","BLEND_DIFFERENCE","BLEND_EXCLUSION","BLEND_COLOR","BLEND_HUE","BLEND_SATURATION","BLEND_LUMINANCE","BRIGHTNESS","CHROMAKEY","FROZEN","GEM","INVISIBLE","MAPPING","MENUPLAYER","NEONGLOW","NORMAL","PALSHIFT","PLAYER","RESIZED","SHADOW","SINGLECOLOR","SINGLEHUE","TINTED","TRANSLUCENT","TRANSLUCENTCOLOR","TRANSLUCENTMAPPING","TRANSLUCENTPALSHIFT","TRANSLUCENTPLAYER","TRANSLUCENTSINGLEHUE","TRANSLUCENTTILE"]},{"type":"int","name":"param","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawString","description":"If tileID is animated, i.e. (tileID & TILE::ANIMATED) != 0, returns tile ID of the current animation frame of the tile corresponding to tileID. Otherwise returns tileID.\nLike animated tiles themselves, this function relies on system time rather than game ticks, which means that subsequent calls during the same frame may return different results, and that results may insignificantly differ compared to the effective state of the animation. This behavior may change in the future.\nThis function never returns tile ID of animated tiles. If its result would be animated, which may happen in levels edited by other means than JCS, the function is called recursively on the result until a static tile is obtained.\n","full":"void jjDrawString(float xPixel, float yPixel, const string &in text, STRING::SIZE size = STRING::SMALL, STRING::Mode mode = STRING::NORMAL, uint8 param = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"STRING::SIZE","name":"size","defaultValue":"STRING::SMALL","attributes":[],"items":["SMALL","MEDIUM","LARGE"]},{"type":"STRING::Mode","name":"mode","defaultValue":"STRING::NORMAL","attributes":[],"items":["NORMAL","DARK","RIGHTALIGN","BOUNCE","SPIN","PALSHIFT"]},{"type":"uint8","name":"param","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawString","description":"Like animated tiles themselves, this function relies on system time rather than game ticks, which means that subsequent calls during the same frame may return different results, and that results may insignificantly differ compared to the effective state of the animation. This behavior may change in the future.\nThis function never returns tile ID of animated tiles. If its result would be animated, which may happen in levels edited by other means than JCS, the function is called recursively on the result until a static tile is obtained.\n","full":"void jjDrawString(float xPixel, float yPixel, const string &in text, const jjANIMATION &in animation, STRING::Mode mode = STRING::NORMAL, uint8 param = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"jjANIMATION","name":"animation","attributes":["const","&in"],"items":[]},{"type":"STRING::Mode","name":"mode","defaultValue":"STRING::NORMAL","attributes":[],"items":["NORMAL","DARK","RIGHTALIGN","BOUNCE","SPIN","PALSHIFT"]},{"type":"uint8","name":"param","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawString","description":"Returns width, in pixels, that text would have if it was drawn in specified size (or animation) and style. If style allows multi-line text and text is multi-line, width of the longest line is returned.\n","full":"void jjDrawString(float xPixel, float yPixel, const string &in text, STRING::SIZE size, const jjTEXTAPPEARANCE &in appearance, uint8 param1 = 0, SPRITE::Mode spriteMode = SPRITE::PALSHIFT, uint8 param2 = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"STRING::SIZE","name":"size","attributes":[],"items":["SMALL","MEDIUM","LARGE"]},{"type":"jjTEXTAPPEARANCE","name":"appearance","attributes":["const","&in"],"items":[]},{"type":"uint8","name":"param1","defaultValue":"0","attributes":[],"items":[]},{"type":"SPRITE::Mode","name":"spriteMode","defaultValue":"SPRITE::PALSHIFT","attributes":[],"items":["ALPHAMAP","BLEND_NORMAL","BLEND_DISSOLVE","BLEND_DARKEN","BLEND_MULTIPLY","BLEND_BURN","BLEND_LIGHTEN","BLEND_SCREEN","BLEND_DODGE","BLEND_OVERLAY","BLEND_SOFTLIGHT","BLEND_HARDLIGHT","BLEND_DIFFERENCE","BLEND_EXCLUSION","BLEND_COLOR","BLEND_HUE","BLEND_SATURATION","BLEND_LUMINANCE","BRIGHTNESS","CHROMAKEY","FROZEN","GEM","INVISIBLE","MAPPING","MENUPLAYER","NEONGLOW","NORMAL","PALSHIFT","PLAYER","RESIZED","SHADOW","SINGLECOLOR","SINGLEHUE","TINTED","TRANSLUCENT","TRANSLUCENTCOLOR","TRANSLUCENTMAPPING","TRANSLUCENTPALSHIFT","TRANSLUCENTPLAYER","TRANSLUCENTSINGLEHUE","TRANSLUCENTTILE"]},{"type":"uint8","name":"param2","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawString","description":"Returns width, in pixels, that text would have if it was drawn in specified size (or animation) and style. If style allows multi-line text and text is multi-line, width of the longest line is returned.\n","full":"void jjDrawString(float xPixel, float yPixel, const string &in text, const jjANIMATION &in animation, const jjTEXTAPPEARANCE &in appearance, uint8 param1 = 0, SPRITE::Mode spriteMode = SPRITE::PALSHIFT, uint8 param2 = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"jjANIMATION","name":"animation","attributes":["const","&in"],"items":[]},{"type":"jjTEXTAPPEARANCE","name":"appearance","attributes":["const","&in"],"items":[]},{"type":"uint8","name":"param1","defaultValue":"0","attributes":[],"items":[]},{"type":"SPRITE::Mode","name":"spriteMode","defaultValue":"SPRITE::PALSHIFT","attributes":[],"items":["ALPHAMAP","BLEND_NORMAL","BLEND_DISSOLVE","BLEND_DARKEN","BLEND_MULTIPLY","BLEND_BURN","BLEND_LIGHTEN","BLEND_SCREEN","BLEND_DODGE","BLEND_OVERLAY","BLEND_SOFTLIGHT","BLEND_HARDLIGHT","BLEND_DIFFERENCE","BLEND_EXCLUSION","BLEND_COLOR","BLEND_HUE","BLEND_SATURATION","BLEND_LUMINANCE","BRIGHTNESS","CHROMAKEY","FROZEN","GEM","INVISIBLE","MAPPING","MENUPLAYER","NEONGLOW","NORMAL","PALSHIFT","PLAYER","RESIZED","SHADOW","SINGLECOLOR","SINGLEHUE","TINTED","TRANSLUCENT","TRANSLUCENTCOLOR","TRANSLUCENTMAPPING","TRANSLUCENTPALSHIFT","TRANSLUCENTPLAYER","TRANSLUCENTSINGLEHUE","TRANSLUCENTTILE"]},{"type":"uint8","name":"param2","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawSwingingVineSpriteFromCurFrame","description":"Returns true if text is interpreted by the game as a cheat code.\n","full":"void jjDrawSwingingVineSpriteFromCurFrame(float xPixel, float yPixel, uint sprite, int length, int curvature, SPRITE::Mode mode = SPRITE::NORMAL, int param = 0, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"uint","name":"sprite","attributes":[],"items":[]},{"type":"int","name":"length","attributes":[],"items":[]},{"type":"int","name":"curvature","attributes":[],"items":[]},{"type":"SPRITE::Mode","name":"mode","defaultValue":"SPRITE::NORMAL","attributes":[],"items":["ALPHAMAP","BLEND_NORMAL","BLEND_DISSOLVE","BLEND_DARKEN","BLEND_MULTIPLY","BLEND_BURN","BLEND_LIGHTEN","BLEND_SCREEN","BLEND_DODGE","BLEND_OVERLAY","BLEND_SOFTLIGHT","BLEND_HARDLIGHT","BLEND_DIFFERENCE","BLEND_EXCLUSION","BLEND_COLOR","BLEND_HUE","BLEND_SATURATION","BLEND_LUMINANCE","BRIGHTNESS","CHROMAKEY","FROZEN","GEM","INVISIBLE","MAPPING","MENUPLAYER","NEONGLOW","NORMAL","PALSHIFT","PLAYER","RESIZED","SHADOW","SINGLECOLOR","SINGLEHUE","TINTED","TRANSLUCENT","TRANSLUCENTCOLOR","TRANSLUCENTMAPPING","TRANSLUCENTPALSHIFT","TRANSLUCENTPLAYER","TRANSLUCENTSINGLEHUE","TRANSLUCENTTILE"]},{"type":"int","name":"param","defaultValue":"0","attributes":[],"items":[]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjDrawTile","description":"Permanently deletes an object, but first calls its native STATE::KILL code (if any). Probably functionally identical to jjDeleteObject in most cases, but might work a little better sometimes.\n","full":"void jjDrawTile(float xPixel, float yPixel, uint16 tile, TILE::Quadrant tileQuadrant = TILE::ALLQUADRANTS, int8 layerZ = 4, uint8 layerXY = 4, int8 playerID = -1)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"uint16","name":"tile","attributes":[],"items":[]},{"type":"TILE::Quadrant","name":"tileQuadrant","defaultValue":"TILE::ALLQUADRANTS","attributes":[],"items":["TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","ALLQUADRANTS"]},{"type":"int8","name":"layerZ","defaultValue":"4","attributes":[],"items":[]},{"type":"uint8","name":"layerXY","defaultValue":"4","attributes":[],"items":[]},{"type":"int8","name":"playerID","defaultValue":"-1","attributes":[],"items":[]}]},{"name":"jjEnableEachASFunction","description":"Returns true if any pixel from xPixel,yPixel to xPixel+lineLength,yPixel is masked.\n","full":"void jjEnableEachASFunction()","type":"function","arguments":[]},{"name":"jjEventGet","description":"Returns true if pixel xPixel,yPixel is masked.\n","full":"int jjEventGet(uint16 xTile, uint16 yTile)","type":"function","arguments":[{"type":"uint16","name":"xTile","attributes":[],"items":[]},{"type":"uint16","name":"yTile","attributes":[],"items":[]}]},{"name":"jjEventSet","description":"Returns true if any pixel from xPixel,yPixel to xPixel,yPixel+lineLength is masked.\n","full":"void jjEventSet(uint16 xTile, uint16 yTile, uint8 newEventID)","type":"function","arguments":[{"type":"uint16","name":"xTile","attributes":[],"items":[]},{"type":"uint16","name":"yTile","attributes":[],"items":[]},{"type":"uint8","name":"newEventID","attributes":[],"items":[]}]},{"name":"jjEventSet","description":"Shortcut global functions for the same-named jjLAYER methods on the same-indexed jjLayers objects.\n","full":"void jjEventSet(uint16 xTile, uint16 yTile, OBJECT::Object newEventID)","type":"function","arguments":[{"type":"uint16","name":"xTile","attributes":[],"items":[]},{"type":"uint16","name":"yTile","attributes":[],"items":[]},{"type":"OBJECT::Object","name":"newEventID","attributes":[],"items":["BLASTERBULLET","BOUNCERBULLET","ICEBULLET","SEEKERBULLET","RFBULLET","TOASTERBULLET","FIREBALLBULLET","ELECTROBULLET","BLASTERBULLETPU","BOUNCERBULLETPU","ICEBULLETPU","SEEKERBULLETPU","RFBULLETPU","TOASTERBULLETPU","FIREBALLBULLETPU","ELECTROBULLETPU","FIRESHIELDBULLET","WATERSHIELDBULLET","BUBBLESHIELDBULLET","LIGHTNINGSHIELDBULLET","PLASMASHIELDBULLET","BULLET","SMOKERING","SHARD","EXPLOSION","BOUNCEONCE","FLICKERGEM","LASER","UTERUSSPIKEBALL","BIRD","BUBBLE","ICEAMMO3","BOUNCERAMMO3","SEEKERAMMO3","RFAMMO3","TOASTERAMMO3","TNTAMMO3","GUN8AMMO3","GUN9AMMO3","TURTLESHELL","SWINGINGVINE","BOMB","SILVERCOIN","GOLDCOIN","GUNCRATE","CARROTCRATE","ONEUPCRATE","GEMBARREL","CARROTBARREL","ONEUPBARREL","BOMBCRATE","ICEAMMO15","BOUNCERAMMO15","SEEKERAMMO15","RFAMMO15","TOASTERAMMO15","TNT","AIRBOARDGENERATOR","FROZENSPRING","FASTFIRE","SPRINGCRATE","REDGEM","GREENGEM","BLUEGEM","PURPLEGEM","SUPERGEM","BIRDCAGE","GUNBARREL","GEMCRATE","MORPH","CARROT","FULLENERGY","FIRESHIELD","WATERSHIELD","BUBBLESHIELD","LIGHTNINGSHIELD","PLASMASHIELD","FASTFEET","ONEUP","EXTRALIFE","EXTRALIVE","EOLPOST","SAVEPOST","CHECKPOINT","BONUSPOST","REDSPRING","GREENSPRING","BLUESPRING","INVINCIBILITY","EXTRATIME","FREEZER","FREEZEENEMIES","HORREDSPRING","HORGREENSPRING","HORBLUESPRING","BIRDMORPH","TRIGGERCRATE","FLYCARROT","RECTREDGEM","RECTGREENGEM","RECTBLUEGEM","TUFTURT","TUFBOSS","LABRAT","DRAGON","LIZARD","BEE","BUMBEE","RAPIER","SPARK","BAT","SUCKER","CATERPILLAR","CHESHIRE1","CHESHIRE2","HATTER","BILSY","SKELETON","DOGGYDOGG","NORMTURTLE","HELMUT","DEMON","DRAGONFLY","MONKEY","FATCHICK","FENCER","FISH","MOTH","STEAM","ROTATINGROCK","BLASTERPOWERUP","BOUNCERPOWERUP","ICEPOWERUP","SEEKERPOWERUP","RFPOWERUP","TOASTERPOWERUP","LEFTPADDLE","RIGHTPADDLE","FIVEHUNDREDBUMP","CARROTBUMP","APPLE","BANANA","CHERRY","ORANGE","PEAR","PRETZEL","STRAWBERRY","STEADYLIGHT","PULZELIGHT","PULSELIGHT","FLICKERLIGHT","QUEEN","FLOATSUCKER","BRIDGE","LEMON","LIME","THING","WATERMELON","PEACH","GRAPES","LETTUCE","EGGPLANT","CUCUMB","CUCUMBER","COKE","SOFTDRINK","PEPSI","SODAPOP","MILK","PIE","CAKE","DONUT","CUPCAKE","CHIPS","CANDY","CHOCBAR","CHOCOLATEBAR","ICECREAM","BURGER","PIZZA","FRIES","CHICKENLEG","SANDWICH","TACO","WEENIE","HAM","CHEESE","FLOATLIZARD","STANDMONKEY","DESTRUCTSCENERY","DESTRUCTSCENERYBOMB","TNTDESTRUCTSCENERY","COLLAPSESCENERY","STOMPSCENERY","GEMSTOMP","RAVEN","TUBETURTLE","GEMRING","SMALLTREE","AMBIENTSOUND","UTERUS","CRAB","WITCH","ROCKETTURTLE","BUBBA","DEVILDEVAN","DEVANROBOT","ROBOT","CARROTUSPOLE","PSYCHPOLE","DIAMONDUSPOLE","FRUITPLATFORM","BOLLPLATFORM","GRASSPLATFORM","PINKPLATFORM","SONICPLATFORM","SPIKEPLATFORM","SPIKEBOLL","GENERATOR","EVA","BUBBLER","TNTPOWERUP","GUN8POWERUP","GUN9POWERUP","SPIKEBOLL3D","SPRINGCORD","BEES","COPTER","LASERSHIELD","STOPWATCH","JUNGLEPOLE","WARP","BIGROCK","BIGBOX","TRIGGERSCENERY","BOLLY","BUTTERFLY","BEEBOY","SNOW","TWEEDLEBOSS","AIRBOARD","CTFBASE","XMASNORMTURTLE","XMASLIZARD","XMASFLOATLIZARD","XMASBILSY","CAT","PACMANGHOST"]}]},{"name":"jjEventSet","description":"Shortcut global functions for the same-named jjLAYER methods on the same-indexed jjLayers objects.\n","full":"void jjEventSet(uint16 xTile, uint16 yTile, AREA::Area newEventID)","type":"function","arguments":[{"type":"uint16","name":"xTile","attributes":[],"items":[]},{"type":"uint16","name":"yTile","attributes":[],"items":[]},{"type":"AREA::Area","name":"newEventID","attributes":[],"items":["ONEWAY","HURT","VINE","HOOK","SLIDE","HPOLE","VPOLE","FLYOFF","RICOCHET","BELTRIGHT","BELTLEFT","ACCBELTRIGHT","ACCBELTLEFT","STOPENEMY","WINDLEFT","WINDRIGHT","EOL","WARPEOL","REVERTMORPH","FLOATUP","TRIGGERROCK","DIMLIGHT","SETLIGHT","LIMITXSCROLL","RESETLIGHT","WARPSECRET","ECHO","ACTIVATEBOSS","JAZZLEVELSTART","JAZZSTART","SPAZLEVELSTART","SPAZSTART","MPLEVELSTART","MPSTART","LORILEVELSTART","LORISTART","WARP","WARPTARGET","PATH","AREAID","NOFIREZONE","TRIGGERZONE","SUCKERTUBE","TEXT","WATERLEVEL","MORPHFROG","WATERBLOCK"]}]},{"name":"jjGenerateSettableTileArea","description":"(Re)starts the current music track.\n","full":"void jjGenerateSettableTileArea(uint8 layer, int xTile, int yTile, int width, int height)","type":"function","arguments":[{"type":"uint8","name":"layer","attributes":[],"items":[]},{"type":"int","name":"xTile","attributes":[],"items":[]},{"type":"int","name":"yTile","attributes":[],"items":[]},{"type":"int","name":"width","attributes":[],"items":[]},{"type":"int","name":"height","attributes":[],"items":[]}]},{"name":"jjGetFadeColors","description":"Stops the current music track.\n","full":"jjPALCOLOR jjGetFadeColors()","type":"function","arguments":[]},{"name":"jjGetModOrder","description":"Ends the level and skips to the next one, or to filename if specified and of length>0. Only works in Single Player and Cooperative.\n","full":"int jjGetModOrder()","type":"function","arguments":[]},{"name":"jjGetModRow","description":"offset is calculated by adding the absolute values of every parameter on the tile prior to the one you want. The first (bottommost) parameter will always have offset 0. To get the parameter \"Blue\" in Gem Crate, offset should be 8 (4+4). To get the Y-Speed of a Rotating Rock, offset should be 12 (8+abs(-4)). And so on.\nSet length to 2 and offset to -4 to get the difficulty of an event (normal, easy, hard, multiplayer-only).\n","full":"int jjGetModRow()","type":"function","arguments":[]},{"name":"jjGetModSpeed","description":"Note that this is not quite as powerful as it may seem, since some objects read and process their parameters into memory when they are first created, rather than continually reading them again and again as the game continues. The function will however work fine for zones that affect the player, such as Warp or Sucker Tube or Wind, and it will also successfully set parameters for any such new objects created after the function is called.\nCaution: this is a permanent change and will subsist even after death in offline play.\n","full":"int jjGetModSpeed()","type":"function","arguments":[]},{"name":"jjGetModTempo","description":"Writes text to the chatlogger window but does not display it ingame. If timestamp is true, adds a timestamp before the text.\n","full":"int jjGetModTempo()","type":"function","arguments":[]},{"name":"jjGetPublicInterface","description":"Returns true if expression is a valid regular expression and false otherwise. This is the only regex function that doesn't cause debug errors when the input is an invalid expression and as such it should be always used before calling other regex functions when expression comes from an untrusted source (such as from user input rather than from a constant string in the script). Expressions will be parsed according to modified ECMAScript regular expression grammar.\n","full":"jjPUBLICINTERFACE@ jjGetPublicInterface(const string &in moduleName)","type":"function","arguments":[{"type":"string","name":"moduleName","attributes":["const","&in"],"items":[]}]},{"name":"jjGetStaticTile","description":"Returns true if expression is a valid regular expression that matches text entirely and false if no match is found. Where the second overload is used, results will contain match results in a standard order. If ignoreCase is true, the matching will be case insensitive. If expression is not a valid regular expression, a debug message will be printed to the chatlogger and the return value will be undefined. In future versions of JJ2+ this might have further consequences including complete script shutdown. For this reason, jjRegexIsValid should always be used to validate untrusted input. Note that this function only returns true if expression matches the entire string, whereas jjRegexSearch accepts substring matches.\n","full":"uint16 jjGetStaticTile(uint16 tileID)","type":"function","arguments":[{"type":"uint16","name":"tileID","attributes":[],"items":[]}]},{"name":"jjGetStringWidth","description":"Plays a sound from anims.j2a at pixel xPixel, yPixel. Possible values for sample are listed in the appendix at the bottom of this file.\nvolume ranges from 1-63, and 0 will default to 63. Higher values of frequency result in higher frequencies, or leaving it at 0 will use the sample's unique default frequency.\n","full":"int jjGetStringWidth(const string &in text, STRING::Size size, const jjTEXTAPPEARANCE &in style)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"STRING::Size","name":"size","attributes":[],"items":["SMALL","MEDIUM","LARGE"]},{"type":"jjTEXTAPPEARANCE","name":"style","attributes":["const","&in"],"items":[]}]},{"name":"jjGetStringWidth","description":"volume ranges from 1-63, and 0 will default to 63. Higher values of frequency result in higher frequencies, or leaving it at 0 will use the sample's unique default frequency.\n","full":"int jjGetStringWidth(const string &in text, const jjANIMATION &in animation, const jjTEXTAPPEARANCE &in style)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"jjANIMATION","name":"animation","attributes":["const","&in"],"items":[]},{"type":"jjTEXTAPPEARANCE","name":"style","attributes":["const","&in"],"items":[]}]},{"name":"jjIsValidCheat","description":"Attempts to load sample from a .wav or .ogg file filename and returns true on success or false otherwise. If there is already a loaded sample corresponding to this SOUND::Sample constant, it will be overwritten. JJ2 assumes samples are mono and will not correctly play stereo samples, so for the best results, only use mono files.\n","full":"bool jjIsValidCheat(const string &in text)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]}]},{"name":"jjKillObject","description":"Plays a sound from anims.j2a, no matter what any local players' positions are. This is the function used to play the sugar rush jingle. Possible values for sample are listed in the appendix at the bottom of this file.\n","full":"void jjKillObject(int objectID)","type":"function","arguments":[{"type":"int","name":"objectID","attributes":[],"items":[]}]},{"name":"jjLayerOrderGet","description":"If there are multiple distinct script modules running (two or more mutators, or one mutator and a level's primary script), the packet will only be received by the module whose jjScriptModuleID global value matches the toScriptModuleID parameter. By leaving this parameter as the default value, you can ensure that a packet sent from foo.j2mut will always be read by (the onReceive hook defined in) foo.j2mut, rather than another, simultaneously running module that wouldn't know what to do with the data. Passing 0 instead will send the packet to the level's primary script (if any), and is rarely a good idea. Other values are even more rarely a good idea.\n","full":"array<jjLAYER@>@ jjLayerOrderGet()","type":"function","arguments":[]},{"name":"jjLayerOrderSet","description":"Sets the color of darkness used with ambient lighting.\n","full":"bool jjLayerOrderSet(const array<jjLAYER@>& in order)","type":"function","arguments":[{"type":"array<jjLAYER@>&","name":"in","attributes":["const"],"items":[]}]},{"name":"jjLayersFromLevel","description":"Calling this function with an invalid order or row number, or while BASS is not playing a module file, will have no effect.\n","full":"array<jjLAYER@>@ jjLayersFromLevel(const string &in filename, const array<uint> &in layerIDs, int tileIDAdjustmentFactor = 0)","type":"function","arguments":[{"type":"string","name":"filename","attributes":["const","&in"],"items":[]},{"type":"array<uint>","name":"layerIDs","attributes":["const","&in"],"items":[]},{"type":"int","name":"tileIDAdjustmentFactor","defaultValue":"0","attributes":[],"items":[]}]},{"name":"jjMaskedHLine","description":"Changes the colors used by water in 16-bit color. If no parameters are included, the gradient will be generated from palette entries 176 and 207 instead, the most typical textured background colors (and most of the colors used by 8-bit water).\n","full":"bool jjMaskedHLine(int xPixel, int lineLength, int yPixel)","type":"function","arguments":[{"type":"int","name":"xPixel","attributes":[],"items":[]},{"type":"int","name":"lineLength","attributes":[],"items":[]},{"type":"int","name":"yPixel","attributes":[],"items":[]}]},{"name":"jjMaskedPixel","description":"Returns the sine of angle with a range of 0.0-1.0 and a domain of 0-1023. Numbers outside the domain will be seemlessly moduloed. This is the sine function used by JJ2 for spinning platforms and the like, though you may prefer AngelScript's native sin function.\n","full":"bool jjMaskedPixel(int xPixel, int yPixel)","type":"function","arguments":[{"type":"int","name":"xPixel","attributes":[],"items":[]},{"type":"int","name":"yPixel","attributes":[],"items":[]}]},{"name":"jjMaskedTopVLine","description":"Returns the minimum index from the range 0�255 such that jjSpriteModeIsMappingUsed(index) is false, or -1 if none exist.\n","full":"int jjMaskedTopVLine(int xPixel, int yPixel, int lineLength)","type":"function","arguments":[{"type":"int","name":"xPixel","attributes":[],"items":[]},{"type":"int","name":"yPixel","attributes":[],"items":[]},{"type":"int","name":"lineLength","attributes":[],"items":[]}]},{"name":"jjMaskedVLine","description":"Returns a copy of the mapping provided as the indexMapping argument during the most recent call to jjSpriteModeSetMapping with the same value of index. The returned handle is never null and the array it holds is always of size 256. If the mapping corresponding to index is unused, all elements of the array will be 0.\n","full":"bool jjMaskedVLine(int xPixel, int yPixel, int lineLength)","type":"function","arguments":[{"type":"int","name":"xPixel","attributes":[],"items":[]},{"type":"int","name":"yPixel","attributes":[],"items":[]},{"type":"int","name":"lineLength","attributes":[],"items":[]}]},{"name":"jjMaskedHLine","description":"Sets a mapping with the given index (as used by SPRITE::MAPPING and SPRITE::TRANSLUCENTMAPPING) to the provided values. indexMapping will be used in 8-bit color mode. If it is shorter than 256 elements, it will be padded with values corresponding to their indices (i.e., if an empty array is provided, the corresponding SPRITE::MAPPING will act exactly like SPRITE::NORMAL in 8-bit color mode). rgbMapping, if provided, will be used in 16-bit color mode, ignoring the level's palette�otherwise indexMapping will be used, to the same effect as in 8-bit color mode.\n","full":"bool jjMaskedHLine(int xPixel, int lineLength, int yPixel, uint8 layer)","type":"function","arguments":[{"type":"int","name":"xPixel","attributes":[],"items":[]},{"type":"int","name":"lineLength","attributes":[],"items":[]},{"type":"int","name":"yPixel","attributes":[],"items":[]},{"type":"uint8","name":"layer","attributes":[],"items":[]}]},{"name":"jjMaskedPixel","description":"Sets a mapping with the given index (as used by SPRITE::MAPPING and SPRITE::TRANSLUCENTMAPPING) to the provided values. indexMapping will be used in 8-bit color mode. If it is shorter than 256 elements, it will be padded with values corresponding to their indices (i.e., if an empty array is provided, the corresponding SPRITE::MAPPING will act exactly like SPRITE::NORMAL in 8-bit color mode). rgbMapping, if provided, will be used in 16-bit color mode, ignoring the level's palette�otherwise indexMapping will be used, to the same effect as in 8-bit color mode.\n","full":"bool jjMaskedPixel(int xPixel, int yPixel, uint8 layer)","type":"function","arguments":[{"type":"int","name":"xPixel","attributes":[],"items":[]},{"type":"int","name":"yPixel","attributes":[],"items":[]},{"type":"uint8","name":"layer","attributes":[],"items":[]}]},{"name":"jjMaskedTopVLine","description":"Prints text to the game's built-in spy window activated by running it with the -spy command line parameter, and also writes it to your jazz2.log file.\n","full":"int jjMaskedTopVLine(int xPixel, int yPixel, int lineLength, uint8 layer)","type":"function","arguments":[{"type":"int","name":"xPixel","attributes":[],"items":[]},{"type":"int","name":"yPixel","attributes":[],"items":[]},{"type":"int","name":"lineLength","attributes":[],"items":[]},{"type":"uint8","name":"layer","attributes":[],"items":[]}]},{"name":"jjMaskedVLine","description":"Toggles jjTriggers[id] from true to false, or vice versa, like the \"switch\" parameter on the Trigger Zone and Trigger Crate events.\n","full":"bool jjMaskedVLine(int xPixel, int yPixel, int lineLength, uint8 layer)","type":"function","arguments":[{"type":"int","name":"xPixel","attributes":[],"items":[]},{"type":"int","name":"yPixel","attributes":[],"items":[]},{"type":"int","name":"lineLength","attributes":[],"items":[]},{"type":"uint8","name":"layer","attributes":[],"items":[]}]},{"name":"jjMusicLoad","description":"Note that this feature has restrictions on how often it can be used effectively. Calling it more often than once a second won't do anything and will cause the function to return false, as an indicator that the call to take a screenshot was dismissed. There is also a one second delay for using this function successfully after the user presses F12. This is due to the possibility of this feature being able to fill up available diskspace on the calling machine rapidly (and making the game too sluggish to play anyway).\nNote that this feature may only be used to save screenshots into the folder running JJ2 itself. Also, to avoid conflict with system reserved filenames, etc. all custom filenames receive an enforced prefix in their filename as Jazz2_as-, which also helps to differentiate custom screenshot filenames from the default ones (Jazz2-).\nNote that only legal characters for filenames may be used in the custom screenshot filenames to ensure their integrity. Using any illegal characters in the filename will result in the screenshot saving to fail and making this function return false.\n","full":"bool jjMusicLoad(string filename, bool forceReload = false, bool temporary = false)","type":"function","arguments":[{"type":"string","name":"filename","attributes":[],"items":[]},{"type":"bool","name":"forceReload","defaultValue":"false","attributes":[],"items":[]},{"type":"bool","name":"temporary","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjMusicPause","description":"Shortcut global functions for the same-named jjLAYER methods on the same-indexed jjLayers objects.\n","full":"void jjMusicPause()","type":"function","arguments":[]},{"name":"jjMusicPlay","description":"jjTilesFromTileset is primarily intended to be combined with jjLayersFromLevel and jjLayerOrderSet, and the three should ideally be called in that order, so that jjLayersFromLevel has the right tiles to use in its new layers. Here is a sample script that imports the background pillars from Dungeon Dilemma (into any level using any tileset) and recolors them to use colors from the textured background:\n\t\t\tvoid onLevelLoad() {\n\tconst int oldTileCount = jjTileCount; //the number of tiles in the level's tileset before jjTilesFromTileset increases the number\n\tarray<uint8> pillarColorMapping(256);\n\tfor (int i = 0; i < 16; ++i)\n\t\tpillarColorMapping[i + 128] = i + 192; //map pillars' colors (stored in palette indices 128 through 143) to the (second row of) textured background colors\n\tjjTilesFromTileset( //appends tiles to the end of the internal copy of the tileset used by the current level\n\t\t\"Castle1.j2t\", //filename to take tiles from\n\t\t420, //first tile ID in tileset to take\n\t\t60, //number of tiles to take\n\t\tpillarColorMapping //an array<uint8>(256) that maps colors in the source tileset to colors in the destination tileset, here only working on a single 16-color gradient because that's all that is used in those particular two layers\n\t);\n\tarray<jjLAYER@> castleLayers = jjLayersFromLevel( //builds new jjLAYER instances from the layers defined in this level\n\t\t\"Castle1.j2l\", //filename to take layers from\n\t\tarray<uint> = {5,6}, //which layers to grab\n\t\toldTileCount - 420 //a number to offset the non-zero tileIDs by: the pillars started at tile 420 in castle1.j2t, but here start at the end of the old tileset, aka oldTileCount\n\t);\n\tjjLayerOrderSet(array<jjLAYER@> = {jjLayers[1], jjLayers[2], jjLayers[3], jjLayers[4], castleLayers[0], castleLayers[1], jjLayers[5], jjLayers[6], jjLayers[7], jjLayers[8]}); //insert the two layers from castle1.j2l between Layer 4 and Layer 5\n}\n","full":"void jjMusicPlay()","type":"function","arguments":[]},{"name":"jjMusicResume","description":"Returns unix time in milliseconds, i.e. the number of milliseconds that have elapsed since 00:00:00 UTC, Thursday, 1 January 1970, not counting leap seconds.\n","full":"void jjMusicResume()","type":"function","arguments":[]},{"name":"jjMusicStop","description":"Forces JJ2+ to reconstruct the textured background from its relevant properties. This should be handled automatically now.\n","full":"void jjMusicStop()","type":"function","arguments":[]},{"name":"jjNxt","description":"Attempts to uncompresses data in input using the zlib library. The decompression result is placed into output. For successful decompression, size must be at least the same value as the amount of bytes of the predicted output. Returns whether successful. The function can fail if input is not a valid compressed stream or size is too small to accomodate the output or too large to allocate memory required for performing the operation, as well as, rarely, for other reasons.\n","full":"void jjNxt(bool warp = false, bool fast = false)","type":"function","arguments":[{"type":"bool","name":"warp","defaultValue":"false","attributes":[],"items":[]},{"type":"bool","name":"fast","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjNxt","description":"","full":"void jjNxt(const string& filename = \"\", bool warp = false, bool fast = false)","type":"function","arguments":[{"type":"string&","name":"filename","attributes":["const"],"items":[]},{"type":"bool","name":"warp","defaultValue":"false","attributes":[],"items":[]},{"type":"bool","name":"fast","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjParameterGet","description":"","full":"int jjParameterGet(uint16 xTile, uint16 yTile, int8 offset, int8 length)","type":"function","arguments":[{"type":"uint16","name":"xTile","attributes":[],"items":[]},{"type":"uint16","name":"yTile","attributes":[],"items":[]},{"type":"int8","name":"offset","attributes":[],"items":[]},{"type":"int8","name":"length","attributes":[],"items":[]}]},{"name":"jjParameterSet","description":"","full":"void jjParameterSet(uint16 xTile, uint16 yTile, int8 offset, int8 length, int newValue)","type":"function","arguments":[{"type":"uint16","name":"xTile","attributes":[],"items":[]},{"type":"uint16","name":"yTile","attributes":[],"items":[]},{"type":"int8","name":"offset","attributes":[],"items":[]},{"type":"int8","name":"length","attributes":[],"items":[]},{"type":"int","name":"newValue","attributes":[],"items":[]}]},{"name":"jjPlayersWithClientID","description":"","full":"array<jjPLAYER@>@ jjPlayersWithClientID(int clientID)","type":"function","arguments":[{"type":"int","name":"clientID","attributes":[],"items":[]}]},{"name":"jjPrint","description":"","full":"void jjPrint(const string &in text, bool timestamp = false)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"bool","name":"timestamp","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjRandom","description":"","full":"uint jjRandom()","type":"function","arguments":[]},{"name":"jjRegexIsValid","description":"","full":"bool jjRegexIsValid(const string &in expression)","type":"function","arguments":[{"type":"string","name":"expression","attributes":["const","&in"],"items":[]}]},{"name":"jjRegexMatch","description":"","full":"bool jjRegexMatch(const string &in text, const string &in expression, bool ignoreCase = false)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"string","name":"expression","attributes":["const","&in"],"items":[]},{"type":"bool","name":"ignoreCase","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjRegexMatch","description":"","full":"bool jjRegexMatch(const string &in text, const string &in expression, array<string> &out results, bool ignoreCase = false)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"string","name":"expression","attributes":["const","&in"],"items":[]},{"type":"array<string>","name":"&out","attributes":[],"items":[]},{"type":"bool","name":"ignoreCase","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjRegexReplace","description":"","full":"string jjRegexReplace(const string &in text, const string &in expression, const string &in replacement, bool ignoreCase = false)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"string","name":"expression","attributes":["const","&in"],"items":[]},{"type":"string","name":"replacement","attributes":["const","&in"],"items":[]},{"type":"bool","name":"ignoreCase","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjRegexSearch","description":"","full":"bool jjRegexSearch(const string &in text, const string &in expression, bool ignoreCase = false)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"string","name":"expression","attributes":["const","&in"],"items":[]},{"type":"bool","name":"ignoreCase","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjRegexSearch","description":"","full":"bool jjRegexSearch(const string &in text, const string &in expression, array<string> &out results, bool ignoreCase = false)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]},{"type":"string","name":"expression","attributes":["const","&in"],"items":[]},{"type":"array<string>","name":"&out","attributes":[],"items":[]},{"type":"bool","name":"ignoreCase","defaultValue":"false","attributes":[],"items":[]}]},{"name":"jjResetWaterGradient","description":"","full":"void jjResetWaterGradient()","type":"function","arguments":[]},{"name":"jjSample","description":"","full":"void jjSample(float xPixel, float yPixel, SOUND::Sample sample, int volume = 63, int frequency = 0)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"SOUND::Sample","name":"sample","attributes":[],"items":["AMMO_BLUB1","AMMO_BLUB2","AMMO_BMP1","AMMO_BMP2","AMMO_BMP3","AMMO_BMP4","AMMO_BMP5","AMMO_BMP6","AMMO_BOEM1","AMMO_BUL1","AMMO_BULFL1","AMMO_BULFL2","AMMO_BULFL3","AMMO_FIREGUN1A","AMMO_FIREGUN2A","AMMO_FUMP","AMMO_GUN1","AMMO_GUN2","AMMO_GUN3PLOP","AMMO_GUNFLP","AMMO_GUNFLP1","AMMO_GUNFLP2","AMMO_GUNFLP3","AMMO_GUNFLP4","AMMO_GUNFLPL","AMMO_GUNJAZZ","AMMO_GUNVELOCITY","AMMO_ICEGUN","AMMO_ICEGUN2","AMMO_ICEGUNPU","AMMO_ICEPU1","AMMO_ICEPU2","AMMO_ICEPU3","AMMO_ICEPU4","AMMO_LASER","AMMO_LASER2","AMMO_LASER3","AMMO_LAZRAYS","AMMO_MISSILE","AMMO_SPZBL1","AMMO_SPZBL2","AMMO_SPZBL3","BAT_BATFLY1","BILSBOSS_BILLAPPEAR","BILSBOSS_FINGERSNAP","BILSBOSS_FIRE","BILSBOSS_FIRESTART","BILSBOSS_SCARY3","BILSBOSS_THUNDER","BILSBOSS_ZIP","BONUS_BONUS1","BONUS_BONUSBLUB","BUBBA_BUBBABOUNCE1","BUBBA_BUBBABOUNCE2","BUBBA_BUBBAEXPLO","BUBBA_FROG2","BUBBA_FROG3","BUBBA_FROG4","BUBBA_FROG5","BUBBA_SNEEZE2","BUBBA_TORNADOATTACK2","BUMBEE_BEELOOP","CATERPIL_RIDOE","COMMON_AIRBOARD","COMMON_AIRBTURN","COMMON_AIRBTURN2","COMMON_BASE1","COMMON_BELL_FIRE","COMMON_BELL_FIRE2","COMMON_BENZIN1","COMMON_BIRDFLY","COMMON_BIRDFLY2","COMMON_BLOKPLOP","COMMON_BLUB1","COMMON_BUBBLGN1","COMMON_BURN","COMMON_BURNIN","COMMON_CANSPS","COMMON_CLOCK","COMMON_COIN","COMMON_COLLAPS","COMMON_CUP","COMMON_DAMPED1","COMMON_DOWN","COMMON_DOWNFL2","COMMON_DRINKSPAZZ1","COMMON_DRINKSPAZZ2","COMMON_DRINKSPAZZ3","COMMON_DRINKSPAZZ4","COMMON_EAT1","COMMON_EAT2","COMMON_EAT3","COMMON_EAT4","COMMON_ELECTRIC1","COMMON_ELECTRIC2","COMMON_ELECTRICHIT","COMMON_EXPL_TNT","COMMON_EXPSM1","COMMON_FLAMER","COMMON_FLAP","COMMON_FOEW1","COMMON_FOEW2","COMMON_FOEW3","COMMON_FOEW4","COMMON_FOEW5","COMMON_GEMSMSH1","COMMON_GLASS2","COMMON_GUNSM1","COMMON_HARP1","COMMON_HEAD","COMMON_HELI1","COMMON_HIBELL","COMMON_HOLYFLUT","COMMON_HORN1","COMMON_ICECRUSH","COMMON_IMPACT1","COMMON_IMPACT2","COMMON_IMPACT3","COMMON_IMPACT4","COMMON_IMPACT5","COMMON_IMPACT6","COMMON_IMPACT7","COMMON_IMPACT8","COMMON_IMPACT9","COMMON_ITEMTRE","COMMON_JUMP","COMMON_JUMP2","COMMON_LAND","COMMON_LAND1","COMMON_LAND2","COMMON_LANDCAN1","COMMON_LANDCAN2","COMMON_LANDPOP","COMMON_LOADJAZZ","COMMON_LOADSPAZ","COMMON_METALHIT","COMMON_MONITOR","COMMON_NOCOIN","COMMON_PICKUP1","COMMON_PICKUPW1","COMMON_PISTOL1","COMMON_PLOOP1","COMMON_PLOP1","COMMON_PLOP2","COMMON_PLOP3","COMMON_PLOP4","COMMON_PLOPKORK","COMMON_PREEXPL1","COMMON_PREHELI","COMMON_REVUP","COMMON_RINGGUN","COMMON_RINGGUN2","COMMON_SHIELD1","COMMON_SHIELD4","COMMON_SHIELD_ELEC","COMMON_SHLDOF3","COMMON_SLIP","COMMON_SMASH","COMMON_SPLAT1","COMMON_SPLAT2","COMMON_SPLAT3","COMMON_SPLAT4","COMMON_SPLUT","COMMON_SPRING1","COMMON_STEAM","COMMON_STEP","COMMON_STRETCH","COMMON_SWISH1","COMMON_SWISH2","COMMON_SWISH3","COMMON_SWISH4","COMMON_SWISH5","COMMON_SWISH6","COMMON_SWISH7","COMMON_SWISH8","COMMON_TELPORT1","COMMON_TELPORT2","COMMON_UP","COMMON_WATER","COMMON_WOOD1","DEMON_RUN","DEVILDEVAN_DRAGONFIRE","DEVILDEVAN_FLAP","DEVILDEVAN_FROG4","DEVILDEVAN_JUMPUP","DEVILDEVAN_LAUGH","DEVILDEVAN_PHASER2","DEVILDEVAN_STRECh3","DEVILDEVAN_STRECHTAIL","DEVILDEVAN_STRETCH1","DEVILDEVAN_STRETCH3","DEVILDEVAN_VANISH1","DEVILDEVAN_WHISTLEDESCENDING2","DEVILDEVAN_WINGSOUT","DOG_AGRESSIV","DOG_SNIF1","DOG_WAF1","DOG_WAF2","DOG_WAF3","DRAGFLY_BEELOOP","ENDING_OHTHANK","ENDTUNEJAZZ_TUNE","ENDTUNELORI_CAKE","ENDTUNESPAZ_TUNE","EPICLOGO_EPIC1","EPICLOGO_EPIC2","EVA_KISS1","EVA_KISS2","EVA_KISS3","EVA_KISS4","FAN_FAN","FATCHK_HIT1","FATCHK_HIT2","FATCHK_HIT3","FENCER_FENCE1","FROG_FROG","FROG_FROG1","FROG_FROG2","FROG_FROG3","FROG_FROG4","FROG_FROG5","FROG_JAZZ2FROG","FROG_TONG","GLOVE_HIT","HATTER_CUP","HATTER_HAT","HATTER_PTOEI","HATTER_SPLIN","HATTER_SPLOUT","INTRO_BLOW","INTRO_BOEM1","INTRO_BOEM2","INTRO_BRAKE","INTRO_END","INTRO_GRAB","INTRO_GREN1","INTRO_GREN2","INTRO_GREN3","INTRO_GUNM0","INTRO_GUNM1","INTRO_GUNM2","INTRO_HELI","INTRO_HITSPAZ","INTRO_HITTURT","INTRO_IFEEL","INTRO_INHALE","INTRO_INSECT","INTRO_KATROL","INTRO_LAND","INTRO_MONSTER","INTRO_MONSTER2","INTRO_ROCK","INTRO_ROPE1","INTRO_ROPE2","INTRO_RUN","INTRO_SHOT1","INTRO_SHOTGRN","INTRO_SKI","INTRO_STRING","INTRO_SWISH1","INTRO_SWISH2","INTRO_SWISH3","INTRO_SWISH4","INTRO_UHTURT","INTRO_UP1","INTRO_UP2","INTRO_WIND_01","JAZZSOUNDS_BALANCE","JAZZSOUNDS_HEY1","JAZZSOUNDS_HEY2","JAZZSOUNDS_HEY3","JAZZSOUNDS_HEY4","JAZZSOUNDS_IDLE","JAZZSOUNDS_JAZZV1","JAZZSOUNDS_JAZZV2","JAZZSOUNDS_JAZZV3","JAZZSOUNDS_JAZZV4","JAZZSOUNDS_JUMMY","JAZZSOUNDS_PFOE","LABRAT_BITE","LABRAT_EYE2","LABRAT_EYE3","LABRAT_MOUSE1","LABRAT_MOUSE2","LABRAT_MOUSE3","LIZARD_LIZ1","LIZARD_LIZ2","LIZARD_LIZ4","LIZARD_LIZ6","LORISOUNDS_DIE1","LORISOUNDS_HURT0","LORISOUNDS_HURT1","LORISOUNDS_HURT2","LORISOUNDS_HURT3","LORISOUNDS_HURT4","LORISOUNDS_HURT5","LORISOUNDS_HURT6","LORISOUNDS_HURT7","LORISOUNDS_LORI1","LORISOUNDS_LORI2","LORISOUNDS_LORIBOOM","LORISOUNDS_LORIFALL","LORISOUNDS_LORIJUMP","LORISOUNDS_LORIJUMP2","LORISOUNDS_LORIJUMP3","LORISOUNDS_LORIJUMP4","LORISOUNDS_TOUCH","LORISOUNDS_WEHOO","MENUSOUNDS_SELECT0","MENUSOUNDS_SELECT1","MENUSOUNDS_SELECT2","MENUSOUNDS_SELECT3","MENUSOUNDS_SELECT4","MENUSOUNDS_SELECT5","MENUSOUNDS_SELECT6","MENUSOUNDS_TYPE","MENUSOUNDS_TYPEENTER","MONKEY_SPLUT","MONKEY_THROW","MOTH_FLAPMOTH","ORANGE_BOEML","ORANGE_BOEMR","ORANGE_BUBBELSL","ORANGE_BUBBELSR","ORANGE_GLAS1L","ORANGE_GLAS1R","ORANGE_GLAS2L","ORANGE_GLAS2R","ORANGE_MERGE","ORANGE_SWEEP0L","ORANGE_SWEEP0R","ORANGE_SWEEP1L","ORANGE_SWEEP1R","ORANGE_SWEEP2L","ORANGE_SWEEP2R","P2_CRUNCH","P2_FART","P2_FOEW1","P2_FOEW4","P2_FOEW5","P2_FROG1","P2_FROG2","P2_FROG3","P2_FROG4","P2_FROG5","P2_KISS4","P2_OPEN","P2_PINCH1","P2_PINCH2","P2_PLOPSEQ1","P2_PLOPSEQ2","P2_PLOPSEQ3","P2_PLOPSEQ4","P2_POEP","P2_PTOEI","P2_SPLOUT","P2_SPLUT","P2_THROW","P2_TONG","PICKUPS_BOING_CHECK","PICKUPS_HELI2","PICKUPS_STRETCH1A","PINBALL_BELL","PINBALL_FLIP1","PINBALL_FLIP2","PINBALL_FLIP3","PINBALL_FLIP4","QUEEN_LADYUP","QUEEN_SCREAM","RAPIER_GOSTDIE","RAPIER_GOSTLOOP","RAPIER_GOSTOOOH","RAPIER_GOSTRIP","RAPIER_HITCHAR","ROBOT_BIG1","ROBOT_BIG2","ROBOT_CAN1","ROBOT_CAN2","ROBOT_HYDRO","ROBOT_HYDRO2","ROBOT_HYDROFIL","ROBOT_HYDROPUF","ROBOT_IDLE1","ROBOT_IDLE2","ROBOT_JMPCAN1","ROBOT_JMPCAN10","ROBOT_JMPCAN2","ROBOT_JMPCAN3","ROBOT_JMPCAN4","ROBOT_JMPCAN5","ROBOT_JMPCAN6","ROBOT_JMPCAN7","ROBOT_JMPCAN8","ROBOT_JMPCAN9","ROBOT_METAL1","ROBOT_METAL2","ROBOT_METAL3","ROBOT_METAL4","ROBOT_METAL5","ROBOT_OPEN","ROBOT_OUT","ROBOT_POEP","ROBOT_POLE","ROBOT_SHOOT","ROBOT_STEP1","ROBOT_STEP2","ROBOT_STEP3","ROCK_ROCK1","RUSH_RUSH","SCIENCE_PLOPKAOS","SKELETON_BONE1","SKELETON_BONE2","SKELETON_BONE3","SKELETON_BONE5","SKELETON_BONE6","SKELETON_BONE7","SMALTREE_FALL","SMALTREE_GROUND","SMALTREE_HEAD","SONCSHIP_METAL1","SONCSHIP_MISSILE2","SONCSHIP_SCRAPE","SONCSHIP_SHIPLOOP","SONCSHIP_TARGETLOCK","SPAZSOUNDS_AUTSCH1","SPAZSOUNDS_AUTSCH2","SPAZSOUNDS_BIRDSIT","SPAZSOUNDS_BURP","SPAZSOUNDS_CHIRP","SPAZSOUNDS_EATBIRD","SPAZSOUNDS_HAHAHA","SPAZSOUNDS_HAHAHA2","SPAZSOUNDS_HAPPY","SPAZSOUNDS_HIHI","SPAZSOUNDS_HOHOHO1","SPAZSOUNDS_HOOO","SPAZSOUNDS_KARATE7","SPAZSOUNDS_KARATE8","SPAZSOUNDS_OHOH","SPAZSOUNDS_OOOH","SPAZSOUNDS_WOOHOO","SPAZSOUNDS_YAHOO","SPAZSOUNDS_YAHOO2","SPRING_BOING_DOWN","SPRING_SPRING1","STEAM_STEAM","STONED_STONED","SUCKER_FART","SUCKER_PINCH1","SUCKER_PINCH2","SUCKER_PINCH3","SUCKER_PLOPSEQ1","SUCKER_PLOPSEQ2","SUCKER_PLOPSEQ3","SUCKER_PLOPSEQ4","SUCKER_UP","TUFBOSS_CATCH","TUFBOSS_RELEASE","TUFBOSS_SWING","TURTLE_BITE3","TURTLE_HIDE","TURTLE_HITSHELL","TURTLE_IDLE1","TURTLE_IDLE2","TURTLE_NECK","TURTLE_SPK1TURT","TURTLE_SPK2TURT","TURTLE_SPK3TURT","TURTLE_SPK4TURT","TURTLE_TURN","UTERUS_CRABCLOSE","UTERUS_CRABOPEN2","UTERUS_SCISSORS1","UTERUS_SCISSORS2","UTERUS_SCISSORS3","UTERUS_SCISSORS4","UTERUS_SCISSORS5","UTERUS_SCISSORS6","UTERUS_SCISSORS7","UTERUS_SCISSORS8","UTERUS_SCREAM1","UTERUS_STEP1","UTERUS_STEP2","WIND_WIND2A","WITCH_LAUGH","WITCH_MAGIC","XBILSY_BILLAPPEAR","XBILSY_FINGERSNAP","XBILSY_FIRE","XBILSY_FIRESTART","XBILSY_SCARY3","XBILSY_THUNDER","XBILSY_ZIP","XLIZARD_LIZ1","XLIZARD_LIZ2","XLIZARD_LIZ4","XLIZARD_LIZ6","XTURTLE_BITE3","XTURTLE_HIDE","XTURTLE_HITSHELL","XTURTLE_IDLE1","XTURTLE_IDLE2","XTURTLE_NECK","XTURTLE_SPK1TURT","XTURTLE_SPK2TURT","XTURTLE_SPK3TURT","XTURTLE_SPK4TURT","XTURTLE_TURN","ZDOG_AGRESSIV","ZDOG_SNIF1","ZDOG_WAF1","ZDOG_WAF2","ZDOG_WAF3"]},{"type":"int","name":"volume","defaultValue":"63","attributes":[],"items":[]},{"type":"int","name":"frequency","defaultValue":"0","attributes":[],"items":[]}]},{"name":"jjSampleIsLoaded","description":"","full":"bool jjSampleIsLoaded(SOUND::Sample sample)","type":"function","arguments":[{"type":"SOUND::Sample","name":"sample","attributes":[],"items":["AMMO_BLUB1","AMMO_BLUB2","AMMO_BMP1","AMMO_BMP2","AMMO_BMP3","AMMO_BMP4","AMMO_BMP5","AMMO_BMP6","AMMO_BOEM1","AMMO_BUL1","AMMO_BULFL1","AMMO_BULFL2","AMMO_BULFL3","AMMO_FIREGUN1A","AMMO_FIREGUN2A","AMMO_FUMP","AMMO_GUN1","AMMO_GUN2","AMMO_GUN3PLOP","AMMO_GUNFLP","AMMO_GUNFLP1","AMMO_GUNFLP2","AMMO_GUNFLP3","AMMO_GUNFLP4","AMMO_GUNFLPL","AMMO_GUNJAZZ","AMMO_GUNVELOCITY","AMMO_ICEGUN","AMMO_ICEGUN2","AMMO_ICEGUNPU","AMMO_ICEPU1","AMMO_ICEPU2","AMMO_ICEPU3","AMMO_ICEPU4","AMMO_LASER","AMMO_LASER2","AMMO_LASER3","AMMO_LAZRAYS","AMMO_MISSILE","AMMO_SPZBL1","AMMO_SPZBL2","AMMO_SPZBL3","BAT_BATFLY1","BILSBOSS_BILLAPPEAR","BILSBOSS_FINGERSNAP","BILSBOSS_FIRE","BILSBOSS_FIRESTART","BILSBOSS_SCARY3","BILSBOSS_THUNDER","BILSBOSS_ZIP","BONUS_BONUS1","BONUS_BONUSBLUB","BUBBA_BUBBABOUNCE1","BUBBA_BUBBABOUNCE2","BUBBA_BUBBAEXPLO","BUBBA_FROG2","BUBBA_FROG3","BUBBA_FROG4","BUBBA_FROG5","BUBBA_SNEEZE2","BUBBA_TORNADOATTACK2","BUMBEE_BEELOOP","CATERPIL_RIDOE","COMMON_AIRBOARD","COMMON_AIRBTURN","COMMON_AIRBTURN2","COMMON_BASE1","COMMON_BELL_FIRE","COMMON_BELL_FIRE2","COMMON_BENZIN1","COMMON_BIRDFLY","COMMON_BIRDFLY2","COMMON_BLOKPLOP","COMMON_BLUB1","COMMON_BUBBLGN1","COMMON_BURN","COMMON_BURNIN","COMMON_CANSPS","COMMON_CLOCK","COMMON_COIN","COMMON_COLLAPS","COMMON_CUP","COMMON_DAMPED1","COMMON_DOWN","COMMON_DOWNFL2","COMMON_DRINKSPAZZ1","COMMON_DRINKSPAZZ2","COMMON_DRINKSPAZZ3","COMMON_DRINKSPAZZ4","COMMON_EAT1","COMMON_EAT2","COMMON_EAT3","COMMON_EAT4","COMMON_ELECTRIC1","COMMON_ELECTRIC2","COMMON_ELECTRICHIT","COMMON_EXPL_TNT","COMMON_EXPSM1","COMMON_FLAMER","COMMON_FLAP","COMMON_FOEW1","COMMON_FOEW2","COMMON_FOEW3","COMMON_FOEW4","COMMON_FOEW5","COMMON_GEMSMSH1","COMMON_GLASS2","COMMON_GUNSM1","COMMON_HARP1","COMMON_HEAD","COMMON_HELI1","COMMON_HIBELL","COMMON_HOLYFLUT","COMMON_HORN1","COMMON_ICECRUSH","COMMON_IMPACT1","COMMON_IMPACT2","COMMON_IMPACT3","COMMON_IMPACT4","COMMON_IMPACT5","COMMON_IMPACT6","COMMON_IMPACT7","COMMON_IMPACT8","COMMON_IMPACT9","COMMON_ITEMTRE","COMMON_JUMP","COMMON_JUMP2","COMMON_LAND","COMMON_LAND1","COMMON_LAND2","COMMON_LANDCAN1","COMMON_LANDCAN2","COMMON_LANDPOP","COMMON_LOADJAZZ","COMMON_LOADSPAZ","COMMON_METALHIT","COMMON_MONITOR","COMMON_NOCOIN","COMMON_PICKUP1","COMMON_PICKUPW1","COMMON_PISTOL1","COMMON_PLOOP1","COMMON_PLOP1","COMMON_PLOP2","COMMON_PLOP3","COMMON_PLOP4","COMMON_PLOPKORK","COMMON_PREEXPL1","COMMON_PREHELI","COMMON_REVUP","COMMON_RINGGUN","COMMON_RINGGUN2","COMMON_SHIELD1","COMMON_SHIELD4","COMMON_SHIELD_ELEC","COMMON_SHLDOF3","COMMON_SLIP","COMMON_SMASH","COMMON_SPLAT1","COMMON_SPLAT2","COMMON_SPLAT3","COMMON_SPLAT4","COMMON_SPLUT","COMMON_SPRING1","COMMON_STEAM","COMMON_STEP","COMMON_STRETCH","COMMON_SWISH1","COMMON_SWISH2","COMMON_SWISH3","COMMON_SWISH4","COMMON_SWISH5","COMMON_SWISH6","COMMON_SWISH7","COMMON_SWISH8","COMMON_TELPORT1","COMMON_TELPORT2","COMMON_UP","COMMON_WATER","COMMON_WOOD1","DEMON_RUN","DEVILDEVAN_DRAGONFIRE","DEVILDEVAN_FLAP","DEVILDEVAN_FROG4","DEVILDEVAN_JUMPUP","DEVILDEVAN_LAUGH","DEVILDEVAN_PHASER2","DEVILDEVAN_STRECh3","DEVILDEVAN_STRECHTAIL","DEVILDEVAN_STRETCH1","DEVILDEVAN_STRETCH3","DEVILDEVAN_VANISH1","DEVILDEVAN_WHISTLEDESCENDING2","DEVILDEVAN_WINGSOUT","DOG_AGRESSIV","DOG_SNIF1","DOG_WAF1","DOG_WAF2","DOG_WAF3","DRAGFLY_BEELOOP","ENDING_OHTHANK","ENDTUNEJAZZ_TUNE","ENDTUNELORI_CAKE","ENDTUNESPAZ_TUNE","EPICLOGO_EPIC1","EPICLOGO_EPIC2","EVA_KISS1","EVA_KISS2","EVA_KISS3","EVA_KISS4","FAN_FAN","FATCHK_HIT1","FATCHK_HIT2","FATCHK_HIT3","FENCER_FENCE1","FROG_FROG","FROG_FROG1","FROG_FROG2","FROG_FROG3","FROG_FROG4","FROG_FROG5","FROG_JAZZ2FROG","FROG_TONG","GLOVE_HIT","HATTER_CUP","HATTER_HAT","HATTER_PTOEI","HATTER_SPLIN","HATTER_SPLOUT","INTRO_BLOW","INTRO_BOEM1","INTRO_BOEM2","INTRO_BRAKE","INTRO_END","INTRO_GRAB","INTRO_GREN1","INTRO_GREN2","INTRO_GREN3","INTRO_GUNM0","INTRO_GUNM1","INTRO_GUNM2","INTRO_HELI","INTRO_HITSPAZ","INTRO_HITTURT","INTRO_IFEEL","INTRO_INHALE","INTRO_INSECT","INTRO_KATROL","INTRO_LAND","INTRO_MONSTER","INTRO_MONSTER2","INTRO_ROCK","INTRO_ROPE1","INTRO_ROPE2","INTRO_RUN","INTRO_SHOT1","INTRO_SHOTGRN","INTRO_SKI","INTRO_STRING","INTRO_SWISH1","INTRO_SWISH2","INTRO_SWISH3","INTRO_SWISH4","INTRO_UHTURT","INTRO_UP1","INTRO_UP2","INTRO_WIND_01","JAZZSOUNDS_BALANCE","JAZZSOUNDS_HEY1","JAZZSOUNDS_HEY2","JAZZSOUNDS_HEY3","JAZZSOUNDS_HEY4","JAZZSOUNDS_IDLE","JAZZSOUNDS_JAZZV1","JAZZSOUNDS_JAZZV2","JAZZSOUNDS_JAZZV3","JAZZSOUNDS_JAZZV4","JAZZSOUNDS_JUMMY","JAZZSOUNDS_PFOE","LABRAT_BITE","LABRAT_EYE2","LABRAT_EYE3","LABRAT_MOUSE1","LABRAT_MOUSE2","LABRAT_MOUSE3","LIZARD_LIZ1","LIZARD_LIZ2","LIZARD_LIZ4","LIZARD_LIZ6","LORISOUNDS_DIE1","LORISOUNDS_HURT0","LORISOUNDS_HURT1","LORISOUNDS_HURT2","LORISOUNDS_HURT3","LORISOUNDS_HURT4","LORISOUNDS_HURT5","LORISOUNDS_HURT6","LORISOUNDS_HURT7","LORISOUNDS_LORI1","LORISOUNDS_LORI2","LORISOUNDS_LORIBOOM","LORISOUNDS_LORIFALL","LORISOUNDS_LORIJUMP","LORISOUNDS_LORIJUMP2","LORISOUNDS_LORIJUMP3","LORISOUNDS_LORIJUMP4","LORISOUNDS_TOUCH","LORISOUNDS_WEHOO","MENUSOUNDS_SELECT0","MENUSOUNDS_SELECT1","MENUSOUNDS_SELECT2","MENUSOUNDS_SELECT3","MENUSOUNDS_SELECT4","MENUSOUNDS_SELECT5","MENUSOUNDS_SELECT6","MENUSOUNDS_TYPE","MENUSOUNDS_TYPEENTER","MONKEY_SPLUT","MONKEY_THROW","MOTH_FLAPMOTH","ORANGE_BOEML","ORANGE_BOEMR","ORANGE_BUBBELSL","ORANGE_BUBBELSR","ORANGE_GLAS1L","ORANGE_GLAS1R","ORANGE_GLAS2L","ORANGE_GLAS2R","ORANGE_MERGE","ORANGE_SWEEP0L","ORANGE_SWEEP0R","ORANGE_SWEEP1L","ORANGE_SWEEP1R","ORANGE_SWEEP2L","ORANGE_SWEEP2R","P2_CRUNCH","P2_FART","P2_FOEW1","P2_FOEW4","P2_FOEW5","P2_FROG1","P2_FROG2","P2_FROG3","P2_FROG4","P2_FROG5","P2_KISS4","P2_OPEN","P2_PINCH1","P2_PINCH2","P2_PLOPSEQ1","P2_PLOPSEQ2","P2_PLOPSEQ3","P2_PLOPSEQ4","P2_POEP","P2_PTOEI","P2_SPLOUT","P2_SPLUT","P2_THROW","P2_TONG","PICKUPS_BOING_CHECK","PICKUPS_HELI2","PICKUPS_STRETCH1A","PINBALL_BELL","PINBALL_FLIP1","PINBALL_FLIP2","PINBALL_FLIP3","PINBALL_FLIP4","QUEEN_LADYUP","QUEEN_SCREAM","RAPIER_GOSTDIE","RAPIER_GOSTLOOP","RAPIER_GOSTOOOH","RAPIER_GOSTRIP","RAPIER_HITCHAR","ROBOT_BIG1","ROBOT_BIG2","ROBOT_CAN1","ROBOT_CAN2","ROBOT_HYDRO","ROBOT_HYDRO2","ROBOT_HYDROFIL","ROBOT_HYDROPUF","ROBOT_IDLE1","ROBOT_IDLE2","ROBOT_JMPCAN1","ROBOT_JMPCAN10","ROBOT_JMPCAN2","ROBOT_JMPCAN3","ROBOT_JMPCAN4","ROBOT_JMPCAN5","ROBOT_JMPCAN6","ROBOT_JMPCAN7","ROBOT_JMPCAN8","ROBOT_JMPCAN9","ROBOT_METAL1","ROBOT_METAL2","ROBOT_METAL3","ROBOT_METAL4","ROBOT_METAL5","ROBOT_OPEN","ROBOT_OUT","ROBOT_POEP","ROBOT_POLE","ROBOT_SHOOT","ROBOT_STEP1","ROBOT_STEP2","ROBOT_STEP3","ROCK_ROCK1","RUSH_RUSH","SCIENCE_PLOPKAOS","SKELETON_BONE1","SKELETON_BONE2","SKELETON_BONE3","SKELETON_BONE5","SKELETON_BONE6","SKELETON_BONE7","SMALTREE_FALL","SMALTREE_GROUND","SMALTREE_HEAD","SONCSHIP_METAL1","SONCSHIP_MISSILE2","SONCSHIP_SCRAPE","SONCSHIP_SHIPLOOP","SONCSHIP_TARGETLOCK","SPAZSOUNDS_AUTSCH1","SPAZSOUNDS_AUTSCH2","SPAZSOUNDS_BIRDSIT","SPAZSOUNDS_BURP","SPAZSOUNDS_CHIRP","SPAZSOUNDS_EATBIRD","SPAZSOUNDS_HAHAHA","SPAZSOUNDS_HAHAHA2","SPAZSOUNDS_HAPPY","SPAZSOUNDS_HIHI","SPAZSOUNDS_HOHOHO1","SPAZSOUNDS_HOOO","SPAZSOUNDS_KARATE7","SPAZSOUNDS_KARATE8","SPAZSOUNDS_OHOH","SPAZSOUNDS_OOOH","SPAZSOUNDS_WOOHOO","SPAZSOUNDS_YAHOO","SPAZSOUNDS_YAHOO2","SPRING_BOING_DOWN","SPRING_SPRING1","STEAM_STEAM","STONED_STONED","SUCKER_FART","SUCKER_PINCH1","SUCKER_PINCH2","SUCKER_PINCH3","SUCKER_PLOPSEQ1","SUCKER_PLOPSEQ2","SUCKER_PLOPSEQ3","SUCKER_PLOPSEQ4","SUCKER_UP","TUFBOSS_CATCH","TUFBOSS_RELEASE","TUFBOSS_SWING","TURTLE_BITE3","TURTLE_HIDE","TURTLE_HITSHELL","TURTLE_IDLE1","TURTLE_IDLE2","TURTLE_NECK","TURTLE_SPK1TURT","TURTLE_SPK2TURT","TURTLE_SPK3TURT","TURTLE_SPK4TURT","TURTLE_TURN","UTERUS_CRABCLOSE","UTERUS_CRABOPEN2","UTERUS_SCISSORS1","UTERUS_SCISSORS2","UTERUS_SCISSORS3","UTERUS_SCISSORS4","UTERUS_SCISSORS5","UTERUS_SCISSORS6","UTERUS_SCISSORS7","UTERUS_SCISSORS8","UTERUS_SCREAM1","UTERUS_STEP1","UTERUS_STEP2","WIND_WIND2A","WITCH_LAUGH","WITCH_MAGIC","XBILSY_BILLAPPEAR","XBILSY_FINGERSNAP","XBILSY_FIRE","XBILSY_FIRESTART","XBILSY_SCARY3","XBILSY_THUNDER","XBILSY_ZIP","XLIZARD_LIZ1","XLIZARD_LIZ2","XLIZARD_LIZ4","XLIZARD_LIZ6","XTURTLE_BITE3","XTURTLE_HIDE","XTURTLE_HITSHELL","XTURTLE_IDLE1","XTURTLE_IDLE2","XTURTLE_NECK","XTURTLE_SPK1TURT","XTURTLE_SPK2TURT","XTURTLE_SPK3TURT","XTURTLE_SPK4TURT","XTURTLE_TURN","ZDOG_AGRESSIV","ZDOG_SNIF1","ZDOG_WAF1","ZDOG_WAF2","ZDOG_WAF3"]}]},{"name":"jjSampleLoad","description":"","full":"bool jjSampleLoad(SOUND::Sample sample, string &in filename)","type":"function","arguments":[{"type":"SOUND::Sample","name":"sample","attributes":[],"items":["AMMO_BLUB1","AMMO_BLUB2","AMMO_BMP1","AMMO_BMP2","AMMO_BMP3","AMMO_BMP4","AMMO_BMP5","AMMO_BMP6","AMMO_BOEM1","AMMO_BUL1","AMMO_BULFL1","AMMO_BULFL2","AMMO_BULFL3","AMMO_FIREGUN1A","AMMO_FIREGUN2A","AMMO_FUMP","AMMO_GUN1","AMMO_GUN2","AMMO_GUN3PLOP","AMMO_GUNFLP","AMMO_GUNFLP1","AMMO_GUNFLP2","AMMO_GUNFLP3","AMMO_GUNFLP4","AMMO_GUNFLPL","AMMO_GUNJAZZ","AMMO_GUNVELOCITY","AMMO_ICEGUN","AMMO_ICEGUN2","AMMO_ICEGUNPU","AMMO_ICEPU1","AMMO_ICEPU2","AMMO_ICEPU3","AMMO_ICEPU4","AMMO_LASER","AMMO_LASER2","AMMO_LASER3","AMMO_LAZRAYS","AMMO_MISSILE","AMMO_SPZBL1","AMMO_SPZBL2","AMMO_SPZBL3","BAT_BATFLY1","BILSBOSS_BILLAPPEAR","BILSBOSS_FINGERSNAP","BILSBOSS_FIRE","BILSBOSS_FIRESTART","BILSBOSS_SCARY3","BILSBOSS_THUNDER","BILSBOSS_ZIP","BONUS_BONUS1","BONUS_BONUSBLUB","BUBBA_BUBBABOUNCE1","BUBBA_BUBBABOUNCE2","BUBBA_BUBBAEXPLO","BUBBA_FROG2","BUBBA_FROG3","BUBBA_FROG4","BUBBA_FROG5","BUBBA_SNEEZE2","BUBBA_TORNADOATTACK2","BUMBEE_BEELOOP","CATERPIL_RIDOE","COMMON_AIRBOARD","COMMON_AIRBTURN","COMMON_AIRBTURN2","COMMON_BASE1","COMMON_BELL_FIRE","COMMON_BELL_FIRE2","COMMON_BENZIN1","COMMON_BIRDFLY","COMMON_BIRDFLY2","COMMON_BLOKPLOP","COMMON_BLUB1","COMMON_BUBBLGN1","COMMON_BURN","COMMON_BURNIN","COMMON_CANSPS","COMMON_CLOCK","COMMON_COIN","COMMON_COLLAPS","COMMON_CUP","COMMON_DAMPED1","COMMON_DOWN","COMMON_DOWNFL2","COMMON_DRINKSPAZZ1","COMMON_DRINKSPAZZ2","COMMON_DRINKSPAZZ3","COMMON_DRINKSPAZZ4","COMMON_EAT1","COMMON_EAT2","COMMON_EAT3","COMMON_EAT4","COMMON_ELECTRIC1","COMMON_ELECTRIC2","COMMON_ELECTRICHIT","COMMON_EXPL_TNT","COMMON_EXPSM1","COMMON_FLAMER","COMMON_FLAP","COMMON_FOEW1","COMMON_FOEW2","COMMON_FOEW3","COMMON_FOEW4","COMMON_FOEW5","COMMON_GEMSMSH1","COMMON_GLASS2","COMMON_GUNSM1","COMMON_HARP1","COMMON_HEAD","COMMON_HELI1","COMMON_HIBELL","COMMON_HOLYFLUT","COMMON_HORN1","COMMON_ICECRUSH","COMMON_IMPACT1","COMMON_IMPACT2","COMMON_IMPACT3","COMMON_IMPACT4","COMMON_IMPACT5","COMMON_IMPACT6","COMMON_IMPACT7","COMMON_IMPACT8","COMMON_IMPACT9","COMMON_ITEMTRE","COMMON_JUMP","COMMON_JUMP2","COMMON_LAND","COMMON_LAND1","COMMON_LAND2","COMMON_LANDCAN1","COMMON_LANDCAN2","COMMON_LANDPOP","COMMON_LOADJAZZ","COMMON_LOADSPAZ","COMMON_METALHIT","COMMON_MONITOR","COMMON_NOCOIN","COMMON_PICKUP1","COMMON_PICKUPW1","COMMON_PISTOL1","COMMON_PLOOP1","COMMON_PLOP1","COMMON_PLOP2","COMMON_PLOP3","COMMON_PLOP4","COMMON_PLOPKORK","COMMON_PREEXPL1","COMMON_PREHELI","COMMON_REVUP","COMMON_RINGGUN","COMMON_RINGGUN2","COMMON_SHIELD1","COMMON_SHIELD4","COMMON_SHIELD_ELEC","COMMON_SHLDOF3","COMMON_SLIP","COMMON_SMASH","COMMON_SPLAT1","COMMON_SPLAT2","COMMON_SPLAT3","COMMON_SPLAT4","COMMON_SPLUT","COMMON_SPRING1","COMMON_STEAM","COMMON_STEP","COMMON_STRETCH","COMMON_SWISH1","COMMON_SWISH2","COMMON_SWISH3","COMMON_SWISH4","COMMON_SWISH5","COMMON_SWISH6","COMMON_SWISH7","COMMON_SWISH8","COMMON_TELPORT1","COMMON_TELPORT2","COMMON_UP","COMMON_WATER","COMMON_WOOD1","DEMON_RUN","DEVILDEVAN_DRAGONFIRE","DEVILDEVAN_FLAP","DEVILDEVAN_FROG4","DEVILDEVAN_JUMPUP","DEVILDEVAN_LAUGH","DEVILDEVAN_PHASER2","DEVILDEVAN_STRECh3","DEVILDEVAN_STRECHTAIL","DEVILDEVAN_STRETCH1","DEVILDEVAN_STRETCH3","DEVILDEVAN_VANISH1","DEVILDEVAN_WHISTLEDESCENDING2","DEVILDEVAN_WINGSOUT","DOG_AGRESSIV","DOG_SNIF1","DOG_WAF1","DOG_WAF2","DOG_WAF3","DRAGFLY_BEELOOP","ENDING_OHTHANK","ENDTUNEJAZZ_TUNE","ENDTUNELORI_CAKE","ENDTUNESPAZ_TUNE","EPICLOGO_EPIC1","EPICLOGO_EPIC2","EVA_KISS1","EVA_KISS2","EVA_KISS3","EVA_KISS4","FAN_FAN","FATCHK_HIT1","FATCHK_HIT2","FATCHK_HIT3","FENCER_FENCE1","FROG_FROG","FROG_FROG1","FROG_FROG2","FROG_FROG3","FROG_FROG4","FROG_FROG5","FROG_JAZZ2FROG","FROG_TONG","GLOVE_HIT","HATTER_CUP","HATTER_HAT","HATTER_PTOEI","HATTER_SPLIN","HATTER_SPLOUT","INTRO_BLOW","INTRO_BOEM1","INTRO_BOEM2","INTRO_BRAKE","INTRO_END","INTRO_GRAB","INTRO_GREN1","INTRO_GREN2","INTRO_GREN3","INTRO_GUNM0","INTRO_GUNM1","INTRO_GUNM2","INTRO_HELI","INTRO_HITSPAZ","INTRO_HITTURT","INTRO_IFEEL","INTRO_INHALE","INTRO_INSECT","INTRO_KATROL","INTRO_LAND","INTRO_MONSTER","INTRO_MONSTER2","INTRO_ROCK","INTRO_ROPE1","INTRO_ROPE2","INTRO_RUN","INTRO_SHOT1","INTRO_SHOTGRN","INTRO_SKI","INTRO_STRING","INTRO_SWISH1","INTRO_SWISH2","INTRO_SWISH3","INTRO_SWISH4","INTRO_UHTURT","INTRO_UP1","INTRO_UP2","INTRO_WIND_01","JAZZSOUNDS_BALANCE","JAZZSOUNDS_HEY1","JAZZSOUNDS_HEY2","JAZZSOUNDS_HEY3","JAZZSOUNDS_HEY4","JAZZSOUNDS_IDLE","JAZZSOUNDS_JAZZV1","JAZZSOUNDS_JAZZV2","JAZZSOUNDS_JAZZV3","JAZZSOUNDS_JAZZV4","JAZZSOUNDS_JUMMY","JAZZSOUNDS_PFOE","LABRAT_BITE","LABRAT_EYE2","LABRAT_EYE3","LABRAT_MOUSE1","LABRAT_MOUSE2","LABRAT_MOUSE3","LIZARD_LIZ1","LIZARD_LIZ2","LIZARD_LIZ4","LIZARD_LIZ6","LORISOUNDS_DIE1","LORISOUNDS_HURT0","LORISOUNDS_HURT1","LORISOUNDS_HURT2","LORISOUNDS_HURT3","LORISOUNDS_HURT4","LORISOUNDS_HURT5","LORISOUNDS_HURT6","LORISOUNDS_HURT7","LORISOUNDS_LORI1","LORISOUNDS_LORI2","LORISOUNDS_LORIBOOM","LORISOUNDS_LORIFALL","LORISOUNDS_LORIJUMP","LORISOUNDS_LORIJUMP2","LORISOUNDS_LORIJUMP3","LORISOUNDS_LORIJUMP4","LORISOUNDS_TOUCH","LORISOUNDS_WEHOO","MENUSOUNDS_SELECT0","MENUSOUNDS_SELECT1","MENUSOUNDS_SELECT2","MENUSOUNDS_SELECT3","MENUSOUNDS_SELECT4","MENUSOUNDS_SELECT5","MENUSOUNDS_SELECT6","MENUSOUNDS_TYPE","MENUSOUNDS_TYPEENTER","MONKEY_SPLUT","MONKEY_THROW","MOTH_FLAPMOTH","ORANGE_BOEML","ORANGE_BOEMR","ORANGE_BUBBELSL","ORANGE_BUBBELSR","ORANGE_GLAS1L","ORANGE_GLAS1R","ORANGE_GLAS2L","ORANGE_GLAS2R","ORANGE_MERGE","ORANGE_SWEEP0L","ORANGE_SWEEP0R","ORANGE_SWEEP1L","ORANGE_SWEEP1R","ORANGE_SWEEP2L","ORANGE_SWEEP2R","P2_CRUNCH","P2_FART","P2_FOEW1","P2_FOEW4","P2_FOEW5","P2_FROG1","P2_FROG2","P2_FROG3","P2_FROG4","P2_FROG5","P2_KISS4","P2_OPEN","P2_PINCH1","P2_PINCH2","P2_PLOPSEQ1","P2_PLOPSEQ2","P2_PLOPSEQ3","P2_PLOPSEQ4","P2_POEP","P2_PTOEI","P2_SPLOUT","P2_SPLUT","P2_THROW","P2_TONG","PICKUPS_BOING_CHECK","PICKUPS_HELI2","PICKUPS_STRETCH1A","PINBALL_BELL","PINBALL_FLIP1","PINBALL_FLIP2","PINBALL_FLIP3","PINBALL_FLIP4","QUEEN_LADYUP","QUEEN_SCREAM","RAPIER_GOSTDIE","RAPIER_GOSTLOOP","RAPIER_GOSTOOOH","RAPIER_GOSTRIP","RAPIER_HITCHAR","ROBOT_BIG1","ROBOT_BIG2","ROBOT_CAN1","ROBOT_CAN2","ROBOT_HYDRO","ROBOT_HYDRO2","ROBOT_HYDROFIL","ROBOT_HYDROPUF","ROBOT_IDLE1","ROBOT_IDLE2","ROBOT_JMPCAN1","ROBOT_JMPCAN10","ROBOT_JMPCAN2","ROBOT_JMPCAN3","ROBOT_JMPCAN4","ROBOT_JMPCAN5","ROBOT_JMPCAN6","ROBOT_JMPCAN7","ROBOT_JMPCAN8","ROBOT_JMPCAN9","ROBOT_METAL1","ROBOT_METAL2","ROBOT_METAL3","ROBOT_METAL4","ROBOT_METAL5","ROBOT_OPEN","ROBOT_OUT","ROBOT_POEP","ROBOT_POLE","ROBOT_SHOOT","ROBOT_STEP1","ROBOT_STEP2","ROBOT_STEP3","ROCK_ROCK1","RUSH_RUSH","SCIENCE_PLOPKAOS","SKELETON_BONE1","SKELETON_BONE2","SKELETON_BONE3","SKELETON_BONE5","SKELETON_BONE6","SKELETON_BONE7","SMALTREE_FALL","SMALTREE_GROUND","SMALTREE_HEAD","SONCSHIP_METAL1","SONCSHIP_MISSILE2","SONCSHIP_SCRAPE","SONCSHIP_SHIPLOOP","SONCSHIP_TARGETLOCK","SPAZSOUNDS_AUTSCH1","SPAZSOUNDS_AUTSCH2","SPAZSOUNDS_BIRDSIT","SPAZSOUNDS_BURP","SPAZSOUNDS_CHIRP","SPAZSOUNDS_EATBIRD","SPAZSOUNDS_HAHAHA","SPAZSOUNDS_HAHAHA2","SPAZSOUNDS_HAPPY","SPAZSOUNDS_HIHI","SPAZSOUNDS_HOHOHO1","SPAZSOUNDS_HOOO","SPAZSOUNDS_KARATE7","SPAZSOUNDS_KARATE8","SPAZSOUNDS_OHOH","SPAZSOUNDS_OOOH","SPAZSOUNDS_WOOHOO","SPAZSOUNDS_YAHOO","SPAZSOUNDS_YAHOO2","SPRING_BOING_DOWN","SPRING_SPRING1","STEAM_STEAM","STONED_STONED","SUCKER_FART","SUCKER_PINCH1","SUCKER_PINCH2","SUCKER_PINCH3","SUCKER_PLOPSEQ1","SUCKER_PLOPSEQ2","SUCKER_PLOPSEQ3","SUCKER_PLOPSEQ4","SUCKER_UP","TUFBOSS_CATCH","TUFBOSS_RELEASE","TUFBOSS_SWING","TURTLE_BITE3","TURTLE_HIDE","TURTLE_HITSHELL","TURTLE_IDLE1","TURTLE_IDLE2","TURTLE_NECK","TURTLE_SPK1TURT","TURTLE_SPK2TURT","TURTLE_SPK3TURT","TURTLE_SPK4TURT","TURTLE_TURN","UTERUS_CRABCLOSE","UTERUS_CRABOPEN2","UTERUS_SCISSORS1","UTERUS_SCISSORS2","UTERUS_SCISSORS3","UTERUS_SCISSORS4","UTERUS_SCISSORS5","UTERUS_SCISSORS6","UTERUS_SCISSORS7","UTERUS_SCISSORS8","UTERUS_SCREAM1","UTERUS_STEP1","UTERUS_STEP2","WIND_WIND2A","WITCH_LAUGH","WITCH_MAGIC","XBILSY_BILLAPPEAR","XBILSY_FINGERSNAP","XBILSY_FIRE","XBILSY_FIRESTART","XBILSY_SCARY3","XBILSY_THUNDER","XBILSY_ZIP","XLIZARD_LIZ1","XLIZARD_LIZ2","XLIZARD_LIZ4","XLIZARD_LIZ6","XTURTLE_BITE3","XTURTLE_HIDE","XTURTLE_HITSHELL","XTURTLE_IDLE1","XTURTLE_IDLE2","XTURTLE_NECK","XTURTLE_SPK1TURT","XTURTLE_SPK2TURT","XTURTLE_SPK3TURT","XTURTLE_SPK4TURT","XTURTLE_TURN","ZDOG_AGRESSIV","ZDOG_SNIF1","ZDOG_WAF1","ZDOG_WAF2","ZDOG_WAF3"]},{"type":"string","name":"&in","attributes":[],"items":[]}]},{"name":"jjSampleLooped","description":"","full":"int jjSampleLooped(float xPixel, float yPixel, SOUND::Sample sample, int channel, int volume = 63, int frequency = 0)","type":"function","arguments":[{"type":"float","name":"xPixel","attributes":[],"items":[]},{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"SOUND::Sample","name":"sample","attributes":[],"items":["AMMO_BLUB1","AMMO_BLUB2","AMMO_BMP1","AMMO_BMP2","AMMO_BMP3","AMMO_BMP4","AMMO_BMP5","AMMO_BMP6","AMMO_BOEM1","AMMO_BUL1","AMMO_BULFL1","AMMO_BULFL2","AMMO_BULFL3","AMMO_FIREGUN1A","AMMO_FIREGUN2A","AMMO_FUMP","AMMO_GUN1","AMMO_GUN2","AMMO_GUN3PLOP","AMMO_GUNFLP","AMMO_GUNFLP1","AMMO_GUNFLP2","AMMO_GUNFLP3","AMMO_GUNFLP4","AMMO_GUNFLPL","AMMO_GUNJAZZ","AMMO_GUNVELOCITY","AMMO_ICEGUN","AMMO_ICEGUN2","AMMO_ICEGUNPU","AMMO_ICEPU1","AMMO_ICEPU2","AMMO_ICEPU3","AMMO_ICEPU4","AMMO_LASER","AMMO_LASER2","AMMO_LASER3","AMMO_LAZRAYS","AMMO_MISSILE","AMMO_SPZBL1","AMMO_SPZBL2","AMMO_SPZBL3","BAT_BATFLY1","BILSBOSS_BILLAPPEAR","BILSBOSS_FINGERSNAP","BILSBOSS_FIRE","BILSBOSS_FIRESTART","BILSBOSS_SCARY3","BILSBOSS_THUNDER","BILSBOSS_ZIP","BONUS_BONUS1","BONUS_BONUSBLUB","BUBBA_BUBBABOUNCE1","BUBBA_BUBBABOUNCE2","BUBBA_BUBBAEXPLO","BUBBA_FROG2","BUBBA_FROG3","BUBBA_FROG4","BUBBA_FROG5","BUBBA_SNEEZE2","BUBBA_TORNADOATTACK2","BUMBEE_BEELOOP","CATERPIL_RIDOE","COMMON_AIRBOARD","COMMON_AIRBTURN","COMMON_AIRBTURN2","COMMON_BASE1","COMMON_BELL_FIRE","COMMON_BELL_FIRE2","COMMON_BENZIN1","COMMON_BIRDFLY","COMMON_BIRDFLY2","COMMON_BLOKPLOP","COMMON_BLUB1","COMMON_BUBBLGN1","COMMON_BURN","COMMON_BURNIN","COMMON_CANSPS","COMMON_CLOCK","COMMON_COIN","COMMON_COLLAPS","COMMON_CUP","COMMON_DAMPED1","COMMON_DOWN","COMMON_DOWNFL2","COMMON_DRINKSPAZZ1","COMMON_DRINKSPAZZ2","COMMON_DRINKSPAZZ3","COMMON_DRINKSPAZZ4","COMMON_EAT1","COMMON_EAT2","COMMON_EAT3","COMMON_EAT4","COMMON_ELECTRIC1","COMMON_ELECTRIC2","COMMON_ELECTRICHIT","COMMON_EXPL_TNT","COMMON_EXPSM1","COMMON_FLAMER","COMMON_FLAP","COMMON_FOEW1","COMMON_FOEW2","COMMON_FOEW3","COMMON_FOEW4","COMMON_FOEW5","COMMON_GEMSMSH1","COMMON_GLASS2","COMMON_GUNSM1","COMMON_HARP1","COMMON_HEAD","COMMON_HELI1","COMMON_HIBELL","COMMON_HOLYFLUT","COMMON_HORN1","COMMON_ICECRUSH","COMMON_IMPACT1","COMMON_IMPACT2","COMMON_IMPACT3","COMMON_IMPACT4","COMMON_IMPACT5","COMMON_IMPACT6","COMMON_IMPACT7","COMMON_IMPACT8","COMMON_IMPACT9","COMMON_ITEMTRE","COMMON_JUMP","COMMON_JUMP2","COMMON_LAND","COMMON_LAND1","COMMON_LAND2","COMMON_LANDCAN1","COMMON_LANDCAN2","COMMON_LANDPOP","COMMON_LOADJAZZ","COMMON_LOADSPAZ","COMMON_METALHIT","COMMON_MONITOR","COMMON_NOCOIN","COMMON_PICKUP1","COMMON_PICKUPW1","COMMON_PISTOL1","COMMON_PLOOP1","COMMON_PLOP1","COMMON_PLOP2","COMMON_PLOP3","COMMON_PLOP4","COMMON_PLOPKORK","COMMON_PREEXPL1","COMMON_PREHELI","COMMON_REVUP","COMMON_RINGGUN","COMMON_RINGGUN2","COMMON_SHIELD1","COMMON_SHIELD4","COMMON_SHIELD_ELEC","COMMON_SHLDOF3","COMMON_SLIP","COMMON_SMASH","COMMON_SPLAT1","COMMON_SPLAT2","COMMON_SPLAT3","COMMON_SPLAT4","COMMON_SPLUT","COMMON_SPRING1","COMMON_STEAM","COMMON_STEP","COMMON_STRETCH","COMMON_SWISH1","COMMON_SWISH2","COMMON_SWISH3","COMMON_SWISH4","COMMON_SWISH5","COMMON_SWISH6","COMMON_SWISH7","COMMON_SWISH8","COMMON_TELPORT1","COMMON_TELPORT2","COMMON_UP","COMMON_WATER","COMMON_WOOD1","DEMON_RUN","DEVILDEVAN_DRAGONFIRE","DEVILDEVAN_FLAP","DEVILDEVAN_FROG4","DEVILDEVAN_JUMPUP","DEVILDEVAN_LAUGH","DEVILDEVAN_PHASER2","DEVILDEVAN_STRECh3","DEVILDEVAN_STRECHTAIL","DEVILDEVAN_STRETCH1","DEVILDEVAN_STRETCH3","DEVILDEVAN_VANISH1","DEVILDEVAN_WHISTLEDESCENDING2","DEVILDEVAN_WINGSOUT","DOG_AGRESSIV","DOG_SNIF1","DOG_WAF1","DOG_WAF2","DOG_WAF3","DRAGFLY_BEELOOP","ENDING_OHTHANK","ENDTUNEJAZZ_TUNE","ENDTUNELORI_CAKE","ENDTUNESPAZ_TUNE","EPICLOGO_EPIC1","EPICLOGO_EPIC2","EVA_KISS1","EVA_KISS2","EVA_KISS3","EVA_KISS4","FAN_FAN","FATCHK_HIT1","FATCHK_HIT2","FATCHK_HIT3","FENCER_FENCE1","FROG_FROG","FROG_FROG1","FROG_FROG2","FROG_FROG3","FROG_FROG4","FROG_FROG5","FROG_JAZZ2FROG","FROG_TONG","GLOVE_HIT","HATTER_CUP","HATTER_HAT","HATTER_PTOEI","HATTER_SPLIN","HATTER_SPLOUT","INTRO_BLOW","INTRO_BOEM1","INTRO_BOEM2","INTRO_BRAKE","INTRO_END","INTRO_GRAB","INTRO_GREN1","INTRO_GREN2","INTRO_GREN3","INTRO_GUNM0","INTRO_GUNM1","INTRO_GUNM2","INTRO_HELI","INTRO_HITSPAZ","INTRO_HITTURT","INTRO_IFEEL","INTRO_INHALE","INTRO_INSECT","INTRO_KATROL","INTRO_LAND","INTRO_MONSTER","INTRO_MONSTER2","INTRO_ROCK","INTRO_ROPE1","INTRO_ROPE2","INTRO_RUN","INTRO_SHOT1","INTRO_SHOTGRN","INTRO_SKI","INTRO_STRING","INTRO_SWISH1","INTRO_SWISH2","INTRO_SWISH3","INTRO_SWISH4","INTRO_UHTURT","INTRO_UP1","INTRO_UP2","INTRO_WIND_01","JAZZSOUNDS_BALANCE","JAZZSOUNDS_HEY1","JAZZSOUNDS_HEY2","JAZZSOUNDS_HEY3","JAZZSOUNDS_HEY4","JAZZSOUNDS_IDLE","JAZZSOUNDS_JAZZV1","JAZZSOUNDS_JAZZV2","JAZZSOUNDS_JAZZV3","JAZZSOUNDS_JAZZV4","JAZZSOUNDS_JUMMY","JAZZSOUNDS_PFOE","LABRAT_BITE","LABRAT_EYE2","LABRAT_EYE3","LABRAT_MOUSE1","LABRAT_MOUSE2","LABRAT_MOUSE3","LIZARD_LIZ1","LIZARD_LIZ2","LIZARD_LIZ4","LIZARD_LIZ6","LORISOUNDS_DIE1","LORISOUNDS_HURT0","LORISOUNDS_HURT1","LORISOUNDS_HURT2","LORISOUNDS_HURT3","LORISOUNDS_HURT4","LORISOUNDS_HURT5","LORISOUNDS_HURT6","LORISOUNDS_HURT7","LORISOUNDS_LORI1","LORISOUNDS_LORI2","LORISOUNDS_LORIBOOM","LORISOUNDS_LORIFALL","LORISOUNDS_LORIJUMP","LORISOUNDS_LORIJUMP2","LORISOUNDS_LORIJUMP3","LORISOUNDS_LORIJUMP4","LORISOUNDS_TOUCH","LORISOUNDS_WEHOO","MENUSOUNDS_SELECT0","MENUSOUNDS_SELECT1","MENUSOUNDS_SELECT2","MENUSOUNDS_SELECT3","MENUSOUNDS_SELECT4","MENUSOUNDS_SELECT5","MENUSOUNDS_SELECT6","MENUSOUNDS_TYPE","MENUSOUNDS_TYPEENTER","MONKEY_SPLUT","MONKEY_THROW","MOTH_FLAPMOTH","ORANGE_BOEML","ORANGE_BOEMR","ORANGE_BUBBELSL","ORANGE_BUBBELSR","ORANGE_GLAS1L","ORANGE_GLAS1R","ORANGE_GLAS2L","ORANGE_GLAS2R","ORANGE_MERGE","ORANGE_SWEEP0L","ORANGE_SWEEP0R","ORANGE_SWEEP1L","ORANGE_SWEEP1R","ORANGE_SWEEP2L","ORANGE_SWEEP2R","P2_CRUNCH","P2_FART","P2_FOEW1","P2_FOEW4","P2_FOEW5","P2_FROG1","P2_FROG2","P2_FROG3","P2_FROG4","P2_FROG5","P2_KISS4","P2_OPEN","P2_PINCH1","P2_PINCH2","P2_PLOPSEQ1","P2_PLOPSEQ2","P2_PLOPSEQ3","P2_PLOPSEQ4","P2_POEP","P2_PTOEI","P2_SPLOUT","P2_SPLUT","P2_THROW","P2_TONG","PICKUPS_BOING_CHECK","PICKUPS_HELI2","PICKUPS_STRETCH1A","PINBALL_BELL","PINBALL_FLIP1","PINBALL_FLIP2","PINBALL_FLIP3","PINBALL_FLIP4","QUEEN_LADYUP","QUEEN_SCREAM","RAPIER_GOSTDIE","RAPIER_GOSTLOOP","RAPIER_GOSTOOOH","RAPIER_GOSTRIP","RAPIER_HITCHAR","ROBOT_BIG1","ROBOT_BIG2","ROBOT_CAN1","ROBOT_CAN2","ROBOT_HYDRO","ROBOT_HYDRO2","ROBOT_HYDROFIL","ROBOT_HYDROPUF","ROBOT_IDLE1","ROBOT_IDLE2","ROBOT_JMPCAN1","ROBOT_JMPCAN10","ROBOT_JMPCAN2","ROBOT_JMPCAN3","ROBOT_JMPCAN4","ROBOT_JMPCAN5","ROBOT_JMPCAN6","ROBOT_JMPCAN7","ROBOT_JMPCAN8","ROBOT_JMPCAN9","ROBOT_METAL1","ROBOT_METAL2","ROBOT_METAL3","ROBOT_METAL4","ROBOT_METAL5","ROBOT_OPEN","ROBOT_OUT","ROBOT_POEP","ROBOT_POLE","ROBOT_SHOOT","ROBOT_STEP1","ROBOT_STEP2","ROBOT_STEP3","ROCK_ROCK1","RUSH_RUSH","SCIENCE_PLOPKAOS","SKELETON_BONE1","SKELETON_BONE2","SKELETON_BONE3","SKELETON_BONE5","SKELETON_BONE6","SKELETON_BONE7","SMALTREE_FALL","SMALTREE_GROUND","SMALTREE_HEAD","SONCSHIP_METAL1","SONCSHIP_MISSILE2","SONCSHIP_SCRAPE","SONCSHIP_SHIPLOOP","SONCSHIP_TARGETLOCK","SPAZSOUNDS_AUTSCH1","SPAZSOUNDS_AUTSCH2","SPAZSOUNDS_BIRDSIT","SPAZSOUNDS_BURP","SPAZSOUNDS_CHIRP","SPAZSOUNDS_EATBIRD","SPAZSOUNDS_HAHAHA","SPAZSOUNDS_HAHAHA2","SPAZSOUNDS_HAPPY","SPAZSOUNDS_HIHI","SPAZSOUNDS_HOHOHO1","SPAZSOUNDS_HOOO","SPAZSOUNDS_KARATE7","SPAZSOUNDS_KARATE8","SPAZSOUNDS_OHOH","SPAZSOUNDS_OOOH","SPAZSOUNDS_WOOHOO","SPAZSOUNDS_YAHOO","SPAZSOUNDS_YAHOO2","SPRING_BOING_DOWN","SPRING_SPRING1","STEAM_STEAM","STONED_STONED","SUCKER_FART","SUCKER_PINCH1","SUCKER_PINCH2","SUCKER_PINCH3","SUCKER_PLOPSEQ1","SUCKER_PLOPSEQ2","SUCKER_PLOPSEQ3","SUCKER_PLOPSEQ4","SUCKER_UP","TUFBOSS_CATCH","TUFBOSS_RELEASE","TUFBOSS_SWING","TURTLE_BITE3","TURTLE_HIDE","TURTLE_HITSHELL","TURTLE_IDLE1","TURTLE_IDLE2","TURTLE_NECK","TURTLE_SPK1TURT","TURTLE_SPK2TURT","TURTLE_SPK3TURT","TURTLE_SPK4TURT","TURTLE_TURN","UTERUS_CRABCLOSE","UTERUS_CRABOPEN2","UTERUS_SCISSORS1","UTERUS_SCISSORS2","UTERUS_SCISSORS3","UTERUS_SCISSORS4","UTERUS_SCISSORS5","UTERUS_SCISSORS6","UTERUS_SCISSORS7","UTERUS_SCISSORS8","UTERUS_SCREAM1","UTERUS_STEP1","UTERUS_STEP2","WIND_WIND2A","WITCH_LAUGH","WITCH_MAGIC","XBILSY_BILLAPPEAR","XBILSY_FINGERSNAP","XBILSY_FIRE","XBILSY_FIRESTART","XBILSY_SCARY3","XBILSY_THUNDER","XBILSY_ZIP","XLIZARD_LIZ1","XLIZARD_LIZ2","XLIZARD_LIZ4","XLIZARD_LIZ6","XTURTLE_BITE3","XTURTLE_HIDE","XTURTLE_HITSHELL","XTURTLE_IDLE1","XTURTLE_IDLE2","XTURTLE_NECK","XTURTLE_SPK1TURT","XTURTLE_SPK2TURT","XTURTLE_SPK3TURT","XTURTLE_SPK4TURT","XTURTLE_TURN","ZDOG_AGRESSIV","ZDOG_SNIF1","ZDOG_WAF1","ZDOG_WAF2","ZDOG_WAF3"]},{"type":"int","name":"channel","attributes":[],"items":[]},{"type":"int","name":"volume","defaultValue":"63","attributes":[],"items":[]},{"type":"int","name":"frequency","defaultValue":"0","attributes":[],"items":[]}]},{"name":"jjSamplePriority","description":"","full":"void jjSamplePriority(SOUND::Sample sample)","type":"function","arguments":[{"type":"SOUND::Sample","name":"sample","attributes":[],"items":["AMMO_BLUB1","AMMO_BLUB2","AMMO_BMP1","AMMO_BMP2","AMMO_BMP3","AMMO_BMP4","AMMO_BMP5","AMMO_BMP6","AMMO_BOEM1","AMMO_BUL1","AMMO_BULFL1","AMMO_BULFL2","AMMO_BULFL3","AMMO_FIREGUN1A","AMMO_FIREGUN2A","AMMO_FUMP","AMMO_GUN1","AMMO_GUN2","AMMO_GUN3PLOP","AMMO_GUNFLP","AMMO_GUNFLP1","AMMO_GUNFLP2","AMMO_GUNFLP3","AMMO_GUNFLP4","AMMO_GUNFLPL","AMMO_GUNJAZZ","AMMO_GUNVELOCITY","AMMO_ICEGUN","AMMO_ICEGUN2","AMMO_ICEGUNPU","AMMO_ICEPU1","AMMO_ICEPU2","AMMO_ICEPU3","AMMO_ICEPU4","AMMO_LASER","AMMO_LASER2","AMMO_LASER3","AMMO_LAZRAYS","AMMO_MISSILE","AMMO_SPZBL1","AMMO_SPZBL2","AMMO_SPZBL3","BAT_BATFLY1","BILSBOSS_BILLAPPEAR","BILSBOSS_FINGERSNAP","BILSBOSS_FIRE","BILSBOSS_FIRESTART","BILSBOSS_SCARY3","BILSBOSS_THUNDER","BILSBOSS_ZIP","BONUS_BONUS1","BONUS_BONUSBLUB","BUBBA_BUBBABOUNCE1","BUBBA_BUBBABOUNCE2","BUBBA_BUBBAEXPLO","BUBBA_FROG2","BUBBA_FROG3","BUBBA_FROG4","BUBBA_FROG5","BUBBA_SNEEZE2","BUBBA_TORNADOATTACK2","BUMBEE_BEELOOP","CATERPIL_RIDOE","COMMON_AIRBOARD","COMMON_AIRBTURN","COMMON_AIRBTURN2","COMMON_BASE1","COMMON_BELL_FIRE","COMMON_BELL_FIRE2","COMMON_BENZIN1","COMMON_BIRDFLY","COMMON_BIRDFLY2","COMMON_BLOKPLOP","COMMON_BLUB1","COMMON_BUBBLGN1","COMMON_BURN","COMMON_BURNIN","COMMON_CANSPS","COMMON_CLOCK","COMMON_COIN","COMMON_COLLAPS","COMMON_CUP","COMMON_DAMPED1","COMMON_DOWN","COMMON_DOWNFL2","COMMON_DRINKSPAZZ1","COMMON_DRINKSPAZZ2","COMMON_DRINKSPAZZ3","COMMON_DRINKSPAZZ4","COMMON_EAT1","COMMON_EAT2","COMMON_EAT3","COMMON_EAT4","COMMON_ELECTRIC1","COMMON_ELECTRIC2","COMMON_ELECTRICHIT","COMMON_EXPL_TNT","COMMON_EXPSM1","COMMON_FLAMER","COMMON_FLAP","COMMON_FOEW1","COMMON_FOEW2","COMMON_FOEW3","COMMON_FOEW4","COMMON_FOEW5","COMMON_GEMSMSH1","COMMON_GLASS2","COMMON_GUNSM1","COMMON_HARP1","COMMON_HEAD","COMMON_HELI1","COMMON_HIBELL","COMMON_HOLYFLUT","COMMON_HORN1","COMMON_ICECRUSH","COMMON_IMPACT1","COMMON_IMPACT2","COMMON_IMPACT3","COMMON_IMPACT4","COMMON_IMPACT5","COMMON_IMPACT6","COMMON_IMPACT7","COMMON_IMPACT8","COMMON_IMPACT9","COMMON_ITEMTRE","COMMON_JUMP","COMMON_JUMP2","COMMON_LAND","COMMON_LAND1","COMMON_LAND2","COMMON_LANDCAN1","COMMON_LANDCAN2","COMMON_LANDPOP","COMMON_LOADJAZZ","COMMON_LOADSPAZ","COMMON_METALHIT","COMMON_MONITOR","COMMON_NOCOIN","COMMON_PICKUP1","COMMON_PICKUPW1","COMMON_PISTOL1","COMMON_PLOOP1","COMMON_PLOP1","COMMON_PLOP2","COMMON_PLOP3","COMMON_PLOP4","COMMON_PLOPKORK","COMMON_PREEXPL1","COMMON_PREHELI","COMMON_REVUP","COMMON_RINGGUN","COMMON_RINGGUN2","COMMON_SHIELD1","COMMON_SHIELD4","COMMON_SHIELD_ELEC","COMMON_SHLDOF3","COMMON_SLIP","COMMON_SMASH","COMMON_SPLAT1","COMMON_SPLAT2","COMMON_SPLAT3","COMMON_SPLAT4","COMMON_SPLUT","COMMON_SPRING1","COMMON_STEAM","COMMON_STEP","COMMON_STRETCH","COMMON_SWISH1","COMMON_SWISH2","COMMON_SWISH3","COMMON_SWISH4","COMMON_SWISH5","COMMON_SWISH6","COMMON_SWISH7","COMMON_SWISH8","COMMON_TELPORT1","COMMON_TELPORT2","COMMON_UP","COMMON_WATER","COMMON_WOOD1","DEMON_RUN","DEVILDEVAN_DRAGONFIRE","DEVILDEVAN_FLAP","DEVILDEVAN_FROG4","DEVILDEVAN_JUMPUP","DEVILDEVAN_LAUGH","DEVILDEVAN_PHASER2","DEVILDEVAN_STRECh3","DEVILDEVAN_STRECHTAIL","DEVILDEVAN_STRETCH1","DEVILDEVAN_STRETCH3","DEVILDEVAN_VANISH1","DEVILDEVAN_WHISTLEDESCENDING2","DEVILDEVAN_WINGSOUT","DOG_AGRESSIV","DOG_SNIF1","DOG_WAF1","DOG_WAF2","DOG_WAF3","DRAGFLY_BEELOOP","ENDING_OHTHANK","ENDTUNEJAZZ_TUNE","ENDTUNELORI_CAKE","ENDTUNESPAZ_TUNE","EPICLOGO_EPIC1","EPICLOGO_EPIC2","EVA_KISS1","EVA_KISS2","EVA_KISS3","EVA_KISS4","FAN_FAN","FATCHK_HIT1","FATCHK_HIT2","FATCHK_HIT3","FENCER_FENCE1","FROG_FROG","FROG_FROG1","FROG_FROG2","FROG_FROG3","FROG_FROG4","FROG_FROG5","FROG_JAZZ2FROG","FROG_TONG","GLOVE_HIT","HATTER_CUP","HATTER_HAT","HATTER_PTOEI","HATTER_SPLIN","HATTER_SPLOUT","INTRO_BLOW","INTRO_BOEM1","INTRO_BOEM2","INTRO_BRAKE","INTRO_END","INTRO_GRAB","INTRO_GREN1","INTRO_GREN2","INTRO_GREN3","INTRO_GUNM0","INTRO_GUNM1","INTRO_GUNM2","INTRO_HELI","INTRO_HITSPAZ","INTRO_HITTURT","INTRO_IFEEL","INTRO_INHALE","INTRO_INSECT","INTRO_KATROL","INTRO_LAND","INTRO_MONSTER","INTRO_MONSTER2","INTRO_ROCK","INTRO_ROPE1","INTRO_ROPE2","INTRO_RUN","INTRO_SHOT1","INTRO_SHOTGRN","INTRO_SKI","INTRO_STRING","INTRO_SWISH1","INTRO_SWISH2","INTRO_SWISH3","INTRO_SWISH4","INTRO_UHTURT","INTRO_UP1","INTRO_UP2","INTRO_WIND_01","JAZZSOUNDS_BALANCE","JAZZSOUNDS_HEY1","JAZZSOUNDS_HEY2","JAZZSOUNDS_HEY3","JAZZSOUNDS_HEY4","JAZZSOUNDS_IDLE","JAZZSOUNDS_JAZZV1","JAZZSOUNDS_JAZZV2","JAZZSOUNDS_JAZZV3","JAZZSOUNDS_JAZZV4","JAZZSOUNDS_JUMMY","JAZZSOUNDS_PFOE","LABRAT_BITE","LABRAT_EYE2","LABRAT_EYE3","LABRAT_MOUSE1","LABRAT_MOUSE2","LABRAT_MOUSE3","LIZARD_LIZ1","LIZARD_LIZ2","LIZARD_LIZ4","LIZARD_LIZ6","LORISOUNDS_DIE1","LORISOUNDS_HURT0","LORISOUNDS_HURT1","LORISOUNDS_HURT2","LORISOUNDS_HURT3","LORISOUNDS_HURT4","LORISOUNDS_HURT5","LORISOUNDS_HURT6","LORISOUNDS_HURT7","LORISOUNDS_LORI1","LORISOUNDS_LORI2","LORISOUNDS_LORIBOOM","LORISOUNDS_LORIFALL","LORISOUNDS_LORIJUMP","LORISOUNDS_LORIJUMP2","LORISOUNDS_LORIJUMP3","LORISOUNDS_LORIJUMP4","LORISOUNDS_TOUCH","LORISOUNDS_WEHOO","MENUSOUNDS_SELECT0","MENUSOUNDS_SELECT1","MENUSOUNDS_SELECT2","MENUSOUNDS_SELECT3","MENUSOUNDS_SELECT4","MENUSOUNDS_SELECT5","MENUSOUNDS_SELECT6","MENUSOUNDS_TYPE","MENUSOUNDS_TYPEENTER","MONKEY_SPLUT","MONKEY_THROW","MOTH_FLAPMOTH","ORANGE_BOEML","ORANGE_BOEMR","ORANGE_BUBBELSL","ORANGE_BUBBELSR","ORANGE_GLAS1L","ORANGE_GLAS1R","ORANGE_GLAS2L","ORANGE_GLAS2R","ORANGE_MERGE","ORANGE_SWEEP0L","ORANGE_SWEEP0R","ORANGE_SWEEP1L","ORANGE_SWEEP1R","ORANGE_SWEEP2L","ORANGE_SWEEP2R","P2_CRUNCH","P2_FART","P2_FOEW1","P2_FOEW4","P2_FOEW5","P2_FROG1","P2_FROG2","P2_FROG3","P2_FROG4","P2_FROG5","P2_KISS4","P2_OPEN","P2_PINCH1","P2_PINCH2","P2_PLOPSEQ1","P2_PLOPSEQ2","P2_PLOPSEQ3","P2_PLOPSEQ4","P2_POEP","P2_PTOEI","P2_SPLOUT","P2_SPLUT","P2_THROW","P2_TONG","PICKUPS_BOING_CHECK","PICKUPS_HELI2","PICKUPS_STRETCH1A","PINBALL_BELL","PINBALL_FLIP1","PINBALL_FLIP2","PINBALL_FLIP3","PINBALL_FLIP4","QUEEN_LADYUP","QUEEN_SCREAM","RAPIER_GOSTDIE","RAPIER_GOSTLOOP","RAPIER_GOSTOOOH","RAPIER_GOSTRIP","RAPIER_HITCHAR","ROBOT_BIG1","ROBOT_BIG2","ROBOT_CAN1","ROBOT_CAN2","ROBOT_HYDRO","ROBOT_HYDRO2","ROBOT_HYDROFIL","ROBOT_HYDROPUF","ROBOT_IDLE1","ROBOT_IDLE2","ROBOT_JMPCAN1","ROBOT_JMPCAN10","ROBOT_JMPCAN2","ROBOT_JMPCAN3","ROBOT_JMPCAN4","ROBOT_JMPCAN5","ROBOT_JMPCAN6","ROBOT_JMPCAN7","ROBOT_JMPCAN8","ROBOT_JMPCAN9","ROBOT_METAL1","ROBOT_METAL2","ROBOT_METAL3","ROBOT_METAL4","ROBOT_METAL5","ROBOT_OPEN","ROBOT_OUT","ROBOT_POEP","ROBOT_POLE","ROBOT_SHOOT","ROBOT_STEP1","ROBOT_STEP2","ROBOT_STEP3","ROCK_ROCK1","RUSH_RUSH","SCIENCE_PLOPKAOS","SKELETON_BONE1","SKELETON_BONE2","SKELETON_BONE3","SKELETON_BONE5","SKELETON_BONE6","SKELETON_BONE7","SMALTREE_FALL","SMALTREE_GROUND","SMALTREE_HEAD","SONCSHIP_METAL1","SONCSHIP_MISSILE2","SONCSHIP_SCRAPE","SONCSHIP_SHIPLOOP","SONCSHIP_TARGETLOCK","SPAZSOUNDS_AUTSCH1","SPAZSOUNDS_AUTSCH2","SPAZSOUNDS_BIRDSIT","SPAZSOUNDS_BURP","SPAZSOUNDS_CHIRP","SPAZSOUNDS_EATBIRD","SPAZSOUNDS_HAHAHA","SPAZSOUNDS_HAHAHA2","SPAZSOUNDS_HAPPY","SPAZSOUNDS_HIHI","SPAZSOUNDS_HOHOHO1","SPAZSOUNDS_HOOO","SPAZSOUNDS_KARATE7","SPAZSOUNDS_KARATE8","SPAZSOUNDS_OHOH","SPAZSOUNDS_OOOH","SPAZSOUNDS_WOOHOO","SPAZSOUNDS_YAHOO","SPAZSOUNDS_YAHOO2","SPRING_BOING_DOWN","SPRING_SPRING1","STEAM_STEAM","STONED_STONED","SUCKER_FART","SUCKER_PINCH1","SUCKER_PINCH2","SUCKER_PINCH3","SUCKER_PLOPSEQ1","SUCKER_PLOPSEQ2","SUCKER_PLOPSEQ3","SUCKER_PLOPSEQ4","SUCKER_UP","TUFBOSS_CATCH","TUFBOSS_RELEASE","TUFBOSS_SWING","TURTLE_BITE3","TURTLE_HIDE","TURTLE_HITSHELL","TURTLE_IDLE1","TURTLE_IDLE2","TURTLE_NECK","TURTLE_SPK1TURT","TURTLE_SPK2TURT","TURTLE_SPK3TURT","TURTLE_SPK4TURT","TURTLE_TURN","UTERUS_CRABCLOSE","UTERUS_CRABOPEN2","UTERUS_SCISSORS1","UTERUS_SCISSORS2","UTERUS_SCISSORS3","UTERUS_SCISSORS4","UTERUS_SCISSORS5","UTERUS_SCISSORS6","UTERUS_SCISSORS7","UTERUS_SCISSORS8","UTERUS_SCREAM1","UTERUS_STEP1","UTERUS_STEP2","WIND_WIND2A","WITCH_LAUGH","WITCH_MAGIC","XBILSY_BILLAPPEAR","XBILSY_FINGERSNAP","XBILSY_FIRE","XBILSY_FIRESTART","XBILSY_SCARY3","XBILSY_THUNDER","XBILSY_ZIP","XLIZARD_LIZ1","XLIZARD_LIZ2","XLIZARD_LIZ4","XLIZARD_LIZ6","XTURTLE_BITE3","XTURTLE_HIDE","XTURTLE_HITSHELL","XTURTLE_IDLE1","XTURTLE_IDLE2","XTURTLE_NECK","XTURTLE_SPK1TURT","XTURTLE_SPK2TURT","XTURTLE_SPK3TURT","XTURTLE_SPK4TURT","XTURTLE_TURN","ZDOG_AGRESSIV","ZDOG_SNIF1","ZDOG_WAF1","ZDOG_WAF2","ZDOG_WAF3"]}]},{"name":"jjSendPacket","description":"","full":"bool jjSendPacket(jjSTREAM &in packet, int toClientID = 0, uint toScriptModuleID = jjScriptModuleID)","type":"function","arguments":[{"type":"jjSTREAM","name":"&in","attributes":[],"items":[]},{"type":"int","name":"toClientID","defaultValue":"0","attributes":[],"items":[]},{"type":"uint","name":"toScriptModuleID","defaultValue":"jjScriptModuleID","attributes":[],"items":[]}]},{"name":"jjSetDarknessColor","description":"","full":"void jjSetDarknessColor(jjPALCOLOR color = jjPALCOLOR(0, 0, 0))","type":"function","arguments":[{"type":"jjPALCOLOR","name":"color","defaultValue":"jjPALCOLOR","attributes":[],"items":[]}]},{"name":"jjSetFadeColors","description":"","full":"void jjSetFadeColors(uint8 red, uint8 green, uint8 blue)","type":"function","arguments":[{"type":"uint8","name":"red","attributes":[],"items":[]},{"type":"uint8","name":"green","attributes":[],"items":[]},{"type":"uint8","name":"blue","attributes":[],"items":[]}]},{"name":"jjSetFadeColors","description":"","full":"void jjSetFadeColors(jjPALCOLOR color)","type":"function","arguments":[{"type":"jjPALCOLOR","name":"color","attributes":[],"items":[]}]},{"name":"jjSetFadeColors","description":"","full":"void jjSetFadeColors(uint8 paletteColorID = 207)","type":"function","arguments":[{"type":"uint8","name":"paletteColorID","defaultValue":"207","attributes":[],"items":[]}]},{"name":"jjSetLayerXSpeed","description":"","full":"void jjSetLayerXSpeed(uint8 layerID, float newspeed, bool newSpeedIsAnAutoSpeed)","type":"function","arguments":[{"type":"uint8","name":"layerID","attributes":[],"items":[]},{"type":"float","name":"newspeed","attributes":[],"items":[]},{"type":"bool","name":"newSpeedIsAnAutoSpeed","attributes":[],"items":[]}]},{"name":"jjSetLayerYSpeed","description":"","full":"void jjSetLayerYSpeed(uint8 layerID, float newspeed, bool newSpeedIsAnAutoSpeed)","type":"function","arguments":[{"type":"uint8","name":"layerID","attributes":[],"items":[]},{"type":"float","name":"newspeed","attributes":[],"items":[]},{"type":"bool","name":"newSpeedIsAnAutoSpeed","attributes":[],"items":[]}]},{"name":"jjSetModPosition","description":"","full":"void jjSetModPosition(int order, int row, bool reset)","type":"function","arguments":[{"type":"int","name":"order","attributes":[],"items":[]},{"type":"int","name":"row","attributes":[],"items":[]},{"type":"bool","name":"reset","attributes":[],"items":[]}]},{"name":"jjSetModSpeed","description":"","full":"void jjSetModSpeed(uint8 speed)","type":"function","arguments":[{"type":"uint8","name":"speed","attributes":[],"items":[]}]},{"name":"jjSetModTempo","description":"","full":"void jjSetModTempo(uint8 tempo)","type":"function","arguments":[{"type":"uint8","name":"tempo","attributes":[],"items":[]}]},{"name":"jjSetWaterGradient","description":"","full":"void jjSetWaterGradient(uint8 red1, uint8 green1, uint8 blue1, uint8 red2, uint8 green2, uint8 blue2)","type":"function","arguments":[{"type":"uint8","name":"red1","attributes":[],"items":[]},{"type":"uint8","name":"green1","attributes":[],"items":[]},{"type":"uint8","name":"blue1","attributes":[],"items":[]},{"type":"uint8","name":"red2","attributes":[],"items":[]},{"type":"uint8","name":"green2","attributes":[],"items":[]},{"type":"uint8","name":"blue2","attributes":[],"items":[]}]},{"name":"jjSetWaterGradient","description":"","full":"void jjSetWaterGradient(jjPALCOLOR color1, jjPALCOLOR color2)","type":"function","arguments":[{"type":"jjPALCOLOR","name":"color1","attributes":[],"items":[]},{"type":"jjPALCOLOR","name":"color2","attributes":[],"items":[]}]},{"name":"jjSetWaterGradient","description":"","full":"void jjSetWaterGradient()","type":"function","arguments":[]},{"name":"jjSetWaterLevel","description":"","full":"void jjSetWaterLevel(float yPixel, bool instant)","type":"function","arguments":[{"type":"float","name":"yPixel","attributes":[],"items":[]},{"type":"bool","name":"instant","attributes":[],"items":[]}]},{"name":"jjSin","description":"","full":"float jjSin(uint angle)","type":"function","arguments":[{"type":"uint","name":"angle","attributes":[],"items":[]}]},{"name":"jjSlideModChannelVolume","description":"","full":"void jjSlideModChannelVolume(int channel, float volume, int milliseconds)","type":"function","arguments":[{"type":"int","name":"channel","attributes":[],"items":[]},{"type":"float","name":"volume","attributes":[],"items":[]},{"type":"int","name":"milliseconds","attributes":[],"items":[]}]},{"name":"jjSpriteModeFirstFreeMapping","description":"","full":"int jjSpriteModeFirstFreeMapping()","type":"function","arguments":[]},{"name":"jjSpriteModeGetColorMapping","description":"","full":"jjPAL@ jjSpriteModeGetColorMapping(uint8 index)","type":"function","arguments":[{"type":"uint8","name":"index","attributes":[],"items":[]}]},{"name":"jjSpriteModeGetIndexMapping","description":"","full":"array<uint8>@ jjSpriteModeGetIndexMapping(uint8 index)","type":"function","arguments":[{"type":"uint8","name":"index","attributes":[],"items":[]}]},{"name":"jjSpriteModeIsMappingUsed","description":"","full":"bool jjSpriteModeIsMappingUsed(uint8 index)","type":"function","arguments":[{"type":"uint8","name":"index","attributes":[],"items":[]}]},{"name":"jjSpriteModeSetMapping","description":"","full":"void jjSpriteModeSetMapping(uint8 index, const array<uint8> &in indexMapping, const jjPAL &in rgbMapping)","type":"function","arguments":[{"type":"uint8","name":"index","attributes":[],"items":[]},{"type":"array<uint8>","name":"indexMapping","attributes":["const","&in"],"items":[]},{"type":"jjPAL","name":"rgbMapping","attributes":["const","&in"],"items":[]}]},{"name":"jjSpriteModeSetMapping","description":"","full":"void jjSpriteModeSetMapping(uint8 index, const array<uint8> &in indexMapping)","type":"function","arguments":[{"type":"uint8","name":"index","attributes":[],"items":[]},{"type":"array<uint8>","name":"indexMapping","attributes":["const","&in"],"items":[]}]},{"name":"jjSpy","description":"","full":"void jjSpy(const string &in text)","type":"function","arguments":[{"type":"string","name":"text","attributes":["const","&in"],"items":[]}]},{"name":"jjSwitchTrigger","description":"","full":"bool jjSwitchTrigger(uint8 id)","type":"function","arguments":[{"type":"uint8","name":"id","attributes":[],"items":[]}]},{"name":"jjTakeScreenshot","description":"","full":"bool jjTakeScreenshot(const string &in filename = \"\")","type":"function","arguments":[{"type":"string","name":"filename","attributes":["const","&in"],"items":[]}]},{"name":"jjTileGet","description":"","full":"uint16 jjTileGet(uint8 layer, int xTile, int yTile)","type":"function","arguments":[{"type":"uint8","name":"layer","attributes":[],"items":[]},{"type":"int","name":"xTile","attributes":[],"items":[]},{"type":"int","name":"yTile","attributes":[],"items":[]}]},{"name":"jjTileSet","description":"","full":"uint16 jjTileSet(uint8 layer, int xTile, int yTile, uint16 newTile)","type":"function","arguments":[{"type":"uint8","name":"layer","attributes":[],"items":[]},{"type":"int","name":"xTile","attributes":[],"items":[]},{"type":"int","name":"yTile","attributes":[],"items":[]},{"type":"uint16","name":"newTile","attributes":[],"items":[]}]},{"name":"jjTilesFromTileset","description":"","full":"bool jjTilesFromTileset(const string &in filename, uint firstTileID, uint tileCount, const array<uint8>@ paletteColorMapping = null)","type":"function","arguments":[{"type":"string","name":"filename","attributes":["const","&in"],"items":[]},{"type":"uint","name":"firstTileID","attributes":[],"items":[]},{"type":"uint","name":"tileCount","attributes":[],"items":[]},{"type":"array<uint8>@","name":"paletteColorMapping","attributes":["const"],"items":[]}]},{"name":"jjTriggerRock","description":"","full":"void jjTriggerRock(uint8 id)","type":"function","arguments":[{"type":"uint8","name":"id","attributes":[],"items":[]}]},{"name":"jjUnixTimeMs","description":"","full":"uint64 jjUnixTimeMs()","type":"function","arguments":[]},{"name":"jjUnixTimeSec","description":"","full":"uint64 jjUnixTimeSec()","type":"function","arguments":[]},{"name":"jjUpdateTexturedBG","description":"","full":"void jjUpdateTexturedBG()","type":"function","arguments":[]},{"name":"jjZlibCompress","description":"","full":"bool jjZlibCompress(const jjSTREAM &in input, jjSTREAM &out output)","type":"function","arguments":[{"type":"jjSTREAM","name":"input","attributes":["const","&in"],"items":[]},{"type":"jjSTREAM","name":"&out","attributes":[],"items":[]}]},{"name":"jjZlibUncompress","description":"","full":"bool jjZlibUncompress(const jjSTREAM &in input, jjSTREAM &out output, uint size)","type":"function","arguments":[{"type":"jjSTREAM","name":"input","attributes":["const","&in"],"items":[]},{"type":"jjSTREAM","name":"&out","attributes":[],"items":[]},{"type":"uint","name":"size","attributes":[],"items":[]}]}]