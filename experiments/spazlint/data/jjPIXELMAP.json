[{"name":"height","description":"Dimensions of the map in pixels, set by the map's constructor. These properties are read-only but may be modified using the addBorders, crop, resize, or trim methods, or swapped using the rotate method.\n","full":"const uint heightconst uint height","type":"property","arguments":[]},{"name":"width","description":"For each of the four edges of the current image, this method either extends the image outwards by a number of pixels (positive number, filling in the new empty space with borderColor) or crops the image inwards (negative number). Returns a reference to self. If the resulting image would be size 0 on either axis, or if you try to crop out more of the original image than exists (e.g. width equals 9 and both left and right equal -5), no change wil occur.\n\t\t\t\n","full":"const uint widthconst uint width","type":"property","arguments":[]},{"name":"addBorders","description":"Flips the pixel map's image across one or both axes and returns a reference to self. Useful argument values are SPRITE::FLIPH, SPRITE::FLIPV and SPRITE::FLIPHV.\n","full":"jjPIXELMAP& addBorders(int left, int top, int right, int bottom, uint8 borderColor = 0)","type":"function","arguments":[{"type":"int","name":"left","attributes":[],"items":[]},{"type":"int","name":"top","attributes":[],"items":[]},{"type":"int","name":"right","attributes":[],"items":[]},{"type":"int","name":"bottom","attributes":[],"items":[]},{"type":"uint8","name":"borderColor","defaultValue":"0","attributes":[],"items":[]}]},{"name":"crop","description":"If colorMapping is length 256 or greater, replaces each index in the pixel map with the value in colorMapping at that index, e.g. pixels of color 10 will be changed to paletteColorMapping[10] instead. Returns a reference to self.\n","full":"jjPIXELMAP& crop(uint left, uint top, uint width, uint height)","type":"function","arguments":[{"type":"uint","name":"left","attributes":[],"items":[]},{"type":"uint","name":"top","attributes":[],"items":[]},{"type":"uint","name":"width","attributes":[],"items":[]},{"type":"uint","name":"height","attributes":[],"items":[]}]},{"name":"flip","description":"Rotates the pixel map's image ninety degrees clockwise and returns a reference to self.\n","full":"jjPIXELMAP& flip(SPRITE::Direction directions)","type":"function","arguments":[{"type":"SPRITE::Direction","name":"directions","attributes":[]}]},{"name":"makeTexture","description":"If (tileID & TILE::VFLIPPED) != 0, the pixel map image will be vertically flipped while saving the tile. TILE::HFLIPPED is somewhat more complicated, because JJ2 stores horizontally flipped tiles separately from their non-flipped versions. By default, and to avoid unnecessary memory usage, jjPIXELMAP::save will only save to either the regular version of the tile or the horizontally flipped version, depending on whether (tileID & TILE::HFLIPPED) != 0. By setting hFlip to true, though, you can ensure that both the regular and the horizontally flipped version of the tile will be overwritten.\nThe results of saving when (tileID & TILE::ANIMATED) != 0 || (tileID & TILE::RAWRANGE) == 0 are undefined.\n","full":"bool makeTexture(jjLAYER@ layer = null)","type":"function","arguments":[{"type":"jjLAYER@","name":"layer","defaultValue":"null","attributes":[],"items":[]}]},{"name":"recolor","description":"Saves the contents of the pixel map to an 8-bit PNG image file on the local computer and returns whether successful. The image will be saved with whatever palette is passed to this method, by default the game's current palette.\nThere are several limits to this method. The file cannot be saved in any directory other than the default one, which is the directory containing the executable (for local games and servers) or cache (for clients). File extension has to be \".png\" and if any other or no extension is provided in the string, it will be replaced. Additionally, scripts downloaded from a server can only save up to 16 files on the computer of a client; they are, however, allowed to overwrite files they saved previously. (The limit of 16 files is shared with jjANIMATION::save and jjSTREAM::save).\n","full":"jjPIXELMAP& recolor(const array<uint8> &in colorMapping)","type":"function","arguments":[{"type":"array<uint8>","name":"colorMapping","attributes":["const","&in"],"items":[]}]},{"name":"resize","description":"Trims away all totally empty rows and columns�i.e. lines containing no colors other than trimColor, which defaults to 0, or transparent�from the four sides of the current image and returns a reference to self. If there are no colors other than trimColor anywhere in the image, as a special case, the resulting image will be cropped to 1�1 instead of 0�0.\nThe method overload with four uint &out arguments lets you know how many rows/columns were trimmed from each of the four sides. If no cropping occurs, they will all equal 0, and if the image was fully trimColor, left and right will equal width (prior to the method being called) and top and bottom will equal height.\n","full":"jjPIXELMAP& resize(uint width, uint height)","type":"function","arguments":[{"type":"uint","name":"width","attributes":[],"items":[]},{"type":"uint","name":"height","attributes":[],"items":[]}]},{"name":"rotate","description":"","full":"jjPIXELMAP& rotate()","type":"function","arguments":[]},{"name":"save","description":"","full":"bool save(uint16 tileID, bool hFlip = false) const","type":"function","arguments":[{"type":"uint16","name":"tileID","attributes":[],"items":[]},{"type":"bool","name":"hFlip","defaultValue":"false","attributes":[],"items":[]}]},{"name":"save","description":"","full":"bool save(jjANIMFRAME@ frame) const","type":"function","arguments":[{"type":"jjANIMFRAME@","name":"frame","attributes":[],"items":[]}]},{"name":"save","description":"","full":"bool save(const string &in filename, const jjPAL &in palette = jjPalette) const","type":"function","arguments":[{"type":"string","name":"filename","attributes":["const","&in"],"items":[]},{"type":"jjPAL","name":"palette","attributes":["const","&in"],"items":[]}]},{"name":"trim","description":"","full":"jjPIXELMAP& trim(uint8 trimColor = 0)","type":"function","arguments":[{"type":"uint8","name":"trimColor","defaultValue":"0","attributes":[],"items":[]}]},{"name":"trim","description":"","full":"jjPIXELMAP& trim(uint left &out, uint top &out, uint right &out, uint bottom &out, uint8 trimColor = 0)","type":"function","arguments":[{"type":"uint","name":"left","attributes":[],"items":[]},{"type":"uint","name":"top","attributes":[],"items":[]},{"type":"uint","name":"right","attributes":[],"items":[]},{"type":"uint","name":"bottom","attributes":[],"items":[]},{"type":"uint8","name":"trimColor","defaultValue":"0","attributes":[],"items":[]}]}]