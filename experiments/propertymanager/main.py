import json
import re

from typing import List

def strbool(b: bool):
    if b == True:
        return "true"
    else:
        return "false"

def parseArgs(args: List[str]):
    global rom_memory
    global ram_memory

    result = ""
    rom_pattern = r'\${(\d+)}'  # Matches "${ANYNUMBER}"
    ram_pattern = r'\*\{(\d+)}'  # Matches "*{ANYNUMBER}"

    def replace(match):
        vType = "string"

        if match.group(2) is not None:
            vType = "int"

        number = int(match.group(1 if vType == "string" else 2))
        if match.group().startswith('*'):  # *{} pattern for ram_memory
            return ram_memory[number - 1] if 0 <= number - 1 < len(ram_memory) else match.group(0)
        else:  # ${} pattern for rom_memory
            return rom_memory[number - 1] if 0 <= number - 1 < len(rom_memory) else match.group(0)

    for arg in args:
        new_string = re.sub(rom_pattern + '|' + ram_pattern, replace, arg)
        result += new_string

    return result

def paddingToSpaces(padding: int) -> str:
    paddingStr = ""

    for x in range(padding):
        paddingStr += " "
    
    return paddingStr

def parseCommands(section):
    global output, rom_memory, ram_memory
    padding = 4
    paddingStr = paddingToSpaces(padding)

    for (index, value) in enumerate(section):
        for (index_2, command) in enumerate(value):
            command = command
            args = value[command]

            if command not in ["endif", "set", "nl"]:
                output += paddingStr
            
            if command == "log":
                output += "jjConsole(\"" + parseArgs(args) + "\");\n"
            elif command == "if":
                output += "if(" + parseArgs(args) + ") {\n"
                padding += 4
                paddingStr = paddingToSpaces(padding)
            elif command == "endif":
                padding -= 4
                paddingStr = paddingToSpaces(padding)
                output += paddingStr + "}\n\n"
            elif command == "eval":
                output += parseArgs(args)
            elif command == "set":
                ram_memory[args[0]] = args[1]
            elif command == "nl":
                output += "\n"

output = """// Generated by propertymanager

"""

filename = "test.json"
data = json.load(open(filename))

output += "void onLevelBegin() {\n"

output += "    // Weapon initalization\n\n"

output += "    jjWEAPONS[WEAPON::BLASTER].infinite = " + strbool(data["weapons"]["blaster"]["infinite"]) + ";\n"
output += "    jjWEAPONS[WEAPON::BLASTER].style    = SPREAD::" + data["weapons"]["blaster"]["spread"] + ";\n"
output += "    jjWEAPONS[WEAPON::BLASTER].spread   = WEAPON::" + data["weapons"]["blaster"]["style"] + ";\n"

output += "\n"

rom_memory = []
ram_memory = []

for x in range(data["memory"]):
    ram_memory.append(0)

if data["scripting"].get("onstart"):
    parseCommands(data["scripting"]["onstart"])

output += "}\n\n"
output += "bool onLocalChat(string &in stringReceived, CHAT::Type chatType) {\n"

if data["scripting"].get("onchat"):
    rom_memory = ["\" + stringReceived + \""]

    parseCommands(data["scripting"]["onchat"])

output += "}\n\n"
rom_memory = []

with open("out.j2as", "w") as f:
    f.write(output)
    f.close()
