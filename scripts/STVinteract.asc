#pragma require "STVutil.asc"

#include "STVutil.asc"

int defaultInteractionTile = 118;
Vector2@ defaultOffset = Vector2(0, -64);

Key @defaultInteractKey = KEYS[30];
Key @defaultCancelKey = KEYS[31];

class Interaction
{
    jjVOIDFUNC @callback;
    jjVOIDFUNC @cancelCallback;

    bool canCancel       = false;

    int textID;
    int interactionTile;

    Vector2 @offset;

    bool overlapping;

    int x, y = -1;

    Key @interactKey;
    Key @cancelKey;

    bool hoverOffsetAscend = false;

    int hoverOffset;
    int maxHoverOffset = 16;

    Interaction(
        int textID, jjVOIDFUNC @callback,
        Vector2 @offset = defaultOffset, int interactionTile = defaultInteractionTile,
        Key @interactKey = defaultInteractKey,
        // @ignore-semicolons
        bool canCancel = false, Key @cancelKey = defaultCancelKey, jjVOIDFUNC @cancelCallback = null
    ) {
        // jjPLAYER

        this.textID = textID;
        this.hoverOffset = this.maxHoverOffset;
        this.interactionTile = interactionTile;
        @ this.offset = offset;
        @ this.interactKey = interactKey;
        @ this.callback = callback;
        this.canCancel = canCancel;
        @ this.cancelKey = cancelKey;
        @ this.cancelCallback = cancelCallback;

        for (int x = 1; x < 255; x++)
        {
            for (int y = 1; y < 64; y++)
            {
                if (jjEventGet(x, y) == AREA::TEXT)
                {
                    if (jjParameterGet(x, y, 0, 8) == textID)
                    {
                        this.x = x * 32;
                        this.y = y * 32;
                    }
                }
            }
        }

        if (x == -1 || y == -1)
        {
            jjConsole("[STVinteract] Warning: Can't find a TEXT object with a " + formatInt(textID) + " text ID.");
        }
    }

    void update(jjPLAYER @player)
    {
        if (
            (int(player.xPos / 32) == this.x / 32) &&
            (int(player.yPos / 32) == this.y / 32))
        {
            this.overlapping = true;
        }
        else
        {
            if (this.overlapping)
            {
                this.overlapping = false;
            }
        }

        // i care about FPS :)
        if (this.overlapping)
        {
            if ((jjGameTicks % 2) == 0)
            {
                if (this.hoverOffsetAscend)
                {
                    this.hoverOffset -= 1;
                }
                else
                {
                    this.hoverOffset += 1;
                }
            }

            this.hoverOffsetAscend = (this.hoverOffset >= this.maxHoverOffset) ? true : (this.hoverOffset <= -this.maxHoverOffset) ? false : this.hoverOffsetAscend;
        }
    }

    void draw(jjCANVAS @canvas)
    {
        if (overlapping)
        {
            canvas.drawTile(
                this.x + this.offset.x,
                this.y + this.offset.y + this.hoverOffset,
                this.interactionTile);
        }
    }
};

array<Interaction @> interactions;

void interactionsKeyPressCallback(Interaction@ interaction, bool cancelKey) {
    if(cancelKey) {
        if(interaction.canCancel) {
            if(@interaction.cancelCallback != @null) {
                interaction.cancelCallback();
            }
        }
    } else {
        if(@interaction.callback != @null) {
            interaction.callback();
        }
    }
}

void registerInteraction(Interaction @interaction)
{
    if(interactions.length() == 0) {
        keyPressCallbacks.insertLast(function(key) {
            for (uint i = 0; i < interactions.length; i++)
            {
                Interaction @interaction = interactions[i];
                if(!interaction.overlapping) continue;

                if(interaction.cancelKey.code == key) {
                    interactionsKeyPressCallback(interaction, true);
                } else if(interaction.interactKey.code == key) {
                    interactionsKeyPressCallback(interaction, false);
                }
            }
        });
    }

    interactions.insertLast(interaction);
}

void updateInteractions(jjPLAYER @player)
{
    for (uint i = 0; i < interactions.length; i++)
    {
        Interaction @interaction = interactions[i];
        interaction.update(player);
    }

    updateKeys();
}

void drawInteractions(jjCANVAS @canvas)
{
    for (uint i = 0; i < interactions.length; i++)
    {
        Interaction @interaction = interactions[i];
        interaction.draw(canvas);
    }
}
