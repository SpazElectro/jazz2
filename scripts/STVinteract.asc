#pragma require "STVutil.asc"

#include "STVutil.asc"

int defaultInteractionTile = 118;

class Interaction
{
    int textID;
    int interactionTile;

    Vector2@ offset;

    bool overlapping;

    int x, y;

    bool hoverOffsetAscend = false;

    int hoverOffset;
    int maxHoverOffset = 16;

    Interaction(
        int textID, Vector2@ offset = Vector2(0, -64),
        int interactionTile = defaultInteractionTile
    ) {
        this.textID = textID;
        this.interactionTile = interactionTile;
        @this.offset = offset;
        this.hoverOffset = this.maxHoverOffset;

        for (int x = 1; x < 255; x++) {
            for(int y = 1; y < 64; y++) {
                if (jjEventGet(x, y) == AREA::TEXT) { 
                    if(jjParameterGet(x, y, 0, 8) == textID) {                        
                        this.x = x * 32;
                        this.y = y * 32;
                    }
                }
            }
        }
    }

    void update(jjPLAYER@ player) {
        if(
            (int(player.xPos / 32) == this.x / 32) &&
            (int(player.yPos / 32) == this.y / 32)
        ) {
            this.overlapping = true;
        } else {
            if(this.overlapping) {
                this.overlapping = false;
            }
        }

        // i care about FPS :)
        if(this.overlapping) {
            if ((jjGameTicks % 2) == 0) {
                if(this.hoverOffsetAscend) {
                    this.hoverOffset -= 1;
                } else {
                    this.hoverOffset += 1;
                }
            }
            
            if(this.hoverOffset >= this.maxHoverOffset) {
                this.hoverOffsetAscend = true;
            }

            if(this.hoverOffset <= -this.maxHoverOffset) {
                this.hoverOffsetAscend = false;
            }
        }
    }

    void draw(jjCANVAS@ canvas) {
        if(overlapping) {
            canvas.drawTile(
                this.x + this.offset.x,
                this.y + this.offset.y + this.hoverOffset,
                this.interactionTile);
        }
    }
};

array<Interaction@> interactions;

void registerInteraction(Interaction@ interaction) {
    interactions.insertLast(interaction);
}

void updateInteractions(jjPLAYER@ player) {
    for (uint i = 0; i < interactions.length; i++)
    {
        Interaction@ interaction = interactions[i];
        interaction.update(player);
    }
}

void drawInteractions(jjCANVAS@ canvas) {
    for (uint i = 0; i < interactions.length; i++)
    {
        Interaction@ interaction = interactions[i];
        interaction.draw(canvas);
    }
}