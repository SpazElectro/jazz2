enum WinAlignment {
    STRETCH = 0
};

dictionary WinTheme = {
    {"TEXT", WinRGB(254, 254, 254)},
    {"BUTTON", WinRGB(45, 45, 45)},
    {"BUTTON_HOVER", WinRGB(50, 50, 50)},
    {"BUTTON_OFF", WinRGB(42, 42, 42)},
    {"BUTTON_OFF_TEXT", WinRGB(120, 120, 120)},
    {"BACKGROUND", WinRGB(32, 32, 32)},
    {"NULL", WinRGB(255, 0, 0)}
};

jjPAL WinThemePAL;

class WinRGB {
    // TODO: find the correct type for 0-255 to save memory
    int r, g, b;
    int paletteLocation;

    WinRGB(int r, int g, int b) {
        this.r = r;
        this.g = g;
        this.b = b;
    }

    int getPaletteLocation() { return this.paletteLocation; }
}

class WinVector2 {
    int x, y = 0;

    WinVector2(int x, int y) {
        this.x = x;
        this.y = y;
    }
};

class WinControls_Item
{
    WinVector2@ position;
    array<WinControls_Item@> children;

    WinControls_Item(WinVector2@ position) {
        @this.position = position;
    }
};

class WinControls_TextItem: WinControls_Item
{
    string text;
    WinAlignment alignment;

    WinControls_TextItem(WinVector2@ position, WinAlignment alignment = WinAlignment::STRETCH) {
        super(position);

        this.alignment = alignment;
    }
};

class WinControls_StackPanel: WinControls_Item
{
    WinVector2@ size;

    WinControls_StackPanel(WinVector2@ position, WinVector2@ size) {
        super(position);
        
        @this.size = size;
    }

    void draw(jjCANVAS@ canvas) {
        canvas.drawRectangle(this.position.x, this.position.y, this.size.x, this.size.y, 6, SPRITE::MAPPING);
    }
};

void WinUI_Init() {
    WinThemePAL.load("WinUI_BMP.png");

    for (uint dictionaryIndex = 0; dictionaryIndex < WinTheme.getSize(); dictionaryIndex++)
    {
        int slot = jjSpriteModeFirstFreeMapping();
        string key = WinTheme.getKeys()[dictionaryIndex];

        WinRGB@ value;
        WinTheme.get(key, @value);

        value.paletteLocation = slot;
        jjSpriteModeSetMapping(value.paletteLocation, array<uint8>(), WinThemePAL);
    }
}
