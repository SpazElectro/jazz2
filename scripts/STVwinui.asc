enum WinAlignment {
    STRETCH = 0
};

dictionary WinTheme = {
    {"TEXT", WinRGB(254, 254, 254)},
    {"BUTTON", WinRGB(45, 45, 45)},
    {"BUTTON_HOVER", WinRGB(50, 50, 50)},
    {"BUTTON_OFF", WinRGB(42, 42, 42)},
    {"BUTTON_OFF_TEXT", WinRGB(120, 120, 120)},
    {"BACKGROUND", WinRGB(32, 32, 32)},
    {"STACKPANEL_BACKGROUND", WinRGB(39, 39, 39)}
};

dictionary WinColors = {
    {"BLACK", WinRGB(0, 0, 0)},    
    {"GRAY", WinRGB(64, 64, 64)},
    {"RED", WinRGB(255, 0, 0)},
    {"ORANGE", WinRGB(255, 106, 0)},
    {"YELLOW", WinRGB(255, 216, 0)},
    {"LIME", WinRGB(182, 255, 0)},
    {"GREEN", WinRGB(76, 255, 0)},
    {"GREENER", WinRGB(0, 255, 33)},
    {"AQUA", WinRGB(0, 255, 144)},
    {"CYAN", WinRGB(0, 255, 255)},
    {"LIGHTBLUE", WinRGB(0, 148, 255)},
    {"BLUE", WinRGB(0, 38, 255)},
    {"PURPLE", WinRGB(72, 0, 255)},
    {"LIGHTPURPLE", WinRGB(178, 0, 255)},
    {"PINK", WinRGB(255, 0, 220)},
    {"LIGHTPINK", WinRGB(255, 0, 110)}, // first row end
    {"WHITE", WinRGB(255, 255, 255)},
    {"GRAYER", WinRGB(128, 128, 128)},
    // TODO - finish this :)
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)},
    {"", WinRGB(0, 0, 0)}
};

jjPAL WinThemePAL;
jjPAL WinColorsPAL;

class WinRGB
{
    // TODO: find the correct type for 0-255 to save memory
    int r, g, b;
    int paletteLocation = -1;

    WinRGB(int r, int g, int b) {
        this.r = r;
        this.g = g;
        this.b = b;
    }
}

class WinVector2
{
    int x, y = 0;

    WinVector2(int x, int y) {
        this.x = x;
        this.y = y;
    }
};

class WinControls_Item
{
    WinVector2@ position;

    WinControls_Item(WinVector2@ position) {
        @this.position = position;
    }
};

class WinControls_TextItem: WinControls_Item
{
    string text;
    WinAlignment alignment;

    WinControls_TextItem(WinVector2@ position, WinAlignment alignment = WinAlignment::STRETCH) {
        super(position);

        this.alignment = alignment;
    }
};

class WinControls_BasePanel: WinControls_StackPanel
{
    WinControls_BasePanel(WinVector2@ position, WinVector2@ size) {
        super(position, size);
    }

    void draw(jjCANVAS@ canvas) {
        canvas.drawRectangle(this.position.x, this.position.y, this.size.x, this.size.y, WinTheme_getColorById("BACKGROUND"), SPRITE::MAPPING);
    }
}

class WinControls_StackPanel: WinControls_Item
{
    WinVector2@ size;

    WinControls_StackPanel(WinVector2@ position, WinVector2@ size) {
        super(position);
        
        @this.size = size;
    }

    void draw(jjCANVAS@ canvas) {
        // TODO: corners
        canvas.drawRectangle(this.position.x, this.position.y, this.size.x, this.size.y, WinTheme_getColorById("STACKPANEL_BACKGROUND"), SPRITE::MAPPING);
    }
};

void WinUI_Init() {
    WinThemePAL.load("WinUI_GenericPAL.png");
    WinColorsPAL.load("WinUI_ColorsPAL.png");

    for (uint dictionaryIndex = 0; dictionaryIndex < WinTheme.getSize(); dictionaryIndex++)
    {
        int slot = jjSpriteModeFirstFreeMapping();
        string key = WinTheme.getKeys()[dictionaryIndex];

        WinRGB@ value;
        WinTheme.get(key, @value);

        value.paletteLocation = slot;
        jjSpriteModeSetMapping(value.paletteLocation, array<uint8>(), WinThemePAL);
    }

    for (uint dictionaryIndex = 0; dictionaryIndex < WinColors.getSize(); dictionaryIndex++)
    {
        int slot = jjSpriteModeFirstFreeMapping();
        string key = WinColors.getKeys()[dictionaryIndex];

        WinRGB@ value;
        WinColors.get(key, @value);

        value.paletteLocation = slot;
        jjSpriteModeSetMapping(value.paletteLocation, array<uint8>(), WinColorsPAL);
    }
}

int WinTheme_getColorById(string name) {
    int result = 1;

    for (uint dictionaryIndex = 0; dictionaryIndex < WinTheme.getSize(); dictionaryIndex++)
    {
        string key = WinTheme.getKeys()[dictionaryIndex];

        WinRGB@ value;
        WinTheme.get(key, @value);

        if(key == name) {
            if(value.paletteLocation == -1) {
                jjConsole("[WARN] WinUI_Init did not get called, therefore WinTheme_getColorById cannot be called properly!");
                break;
            } else {
                result = value.paletteLocation;
                break;
            }
        }
    }
    
    return result;
}

int WinColors_getColorById(string name) {
    int result = 1;

    for (uint dictionaryIndex = 0; dictionaryIndex < WinColors.getSize(); dictionaryIndex++)
    {
        string key = WinColors.getKeys()[dictionaryIndex];

        WinRGB@ value;
        WinColors.get(key, @value);

        if(key == name) {
            if(value.paletteLocation == -1) {
                jjConsole("[WARN] WinUI_Init did not get called, therefore WinColors_getColorById cannot be called properly!");
                break;
            } else {
                result = value.paletteLocation;
                break;
            }
        }
    }
    
    return result;
}