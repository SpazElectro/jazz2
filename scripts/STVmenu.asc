#pragma require "STVutil.asc"
#include "STVutil.asc"

// for intellisense
#include "../../scripts/STVutil.asc"

class CustomMenu
{
    Vector2@ position;
    Vector2@ size;

    bool enabled;

    bool fillScreen;
    Vector2@ fillScreenPadding;
    bool fillScreenFromCenter;

    string header, footer;

    CustomMenu(
        Vector2@ position = Vector2(0, 0), bool fillScreen = true,
        Vector2@ fillScreenPadding = Vector2(300, 200), bool fillScreenFromCenter = true,
        Vector2@ size = Vector2(0, 0)
    ) {
        @this.position = position;
        @this.size = size;
        this.fillScreen = fillScreen;
        @this.fillScreenPadding = fillScreenPadding;
        this.fillScreenFromCenter = true;
        this.enabled = false;
        this.header = "";
        this.footer = "";
    }

    void enable() {
        this.enabled = true;
    }

    void disable() {
        this.enabled = false;
    }

    void toggle() {
        this.enabled = !this.enabled;
    }

    void draw(jjCANVAS@ canvas)
    {
        if(this.enabled) {
            int BACKGROUND_COLOR = 255;

            if (jjColorDepth == 8)
            {
                BACKGROUND_COLOR = 15;
            }

            canvas.drawRectangle(this.position.x, this.position.y, this.size.x, this.size.y, BACKGROUND_COLOR, SPRITE::BLEND_NORMAL, 128);

            // header && footer
            canvas.drawString(
                jjResolutionWidth / 2 - 300 + 10,
                jjResolutionHeight / 2 - 200 + 10,
                this.header, STRING::MEDIUM, STRING::NORMAL, 0);
            
            canvas.drawString(
                jjResolutionWidth / 2 - 300 + 10,
                jjResolutionHeight / 2 - 200 + 390,
                this.footer,
                STRING::SMALL, STRING::NORMAL, 0);
            if(jjColorDepth == 8) {
                canvas.drawString(
                    jjResolutionWidth / 2 - 300 + 10,
                    jjResolutionHeight / 2 - 200 + 410,
                    "better used with 16-bit color");
            }
        }
    }

    void finishDrawing(jjCANVAS@ canvas)
    {
        if(this.enabled) {
            // cursor
            canvas.drawRectangle(jjMouseX - 10, jjMouseY - 10, 10, 10, 18, SPRITE::NORMAL, 0);
        }
    }

    void update()
    {
        if(this.fillScreen) {
            @this.position = Vector2(
                jjResolutionWidth / (this.fillScreenFromCenter ? 2 : 1) - fillScreenPadding.x,
                jjResolutionHeight / (this.fillScreenFromCenter ? 2 : 1) - fillScreenPadding.y
            );
            
            // this doesnt work with other resolutions, only 800x600, FIXME
            @this.size = Vector2(
                jjResolutionWidth - fillScreenPadding.x + 100,
                jjResolutionHeight - fillScreenPadding.y + 20
            );
        }
    }
};

int getCheckedColor(bool whiteOrBlack)
{
    if (jjColorDepth == 16)
    {
        if (whiteOrBlack)
        {
            return 255;
        }
        else
        {
            return 0;
        }
    }
    else
    {
        if (whiteOrBlack)
        {
            return 255;
        }
        else
        {
            return 0;
        }
    }
}

funcdef void ButtonCallback(Button @);
class Button
{
    MenuButton @mainButton;
    int horizontalId = 0;
    int xOffset = 0;
    int yOffset = 0;
    string hoverText;
    bool debounce = false;
    bool value = false;
    bool visible = true;
    ButtonCallback @callback;
    bool hoverTextCentered = false;

    Button(int horizontalId, ButtonCallback @callback, string hoverText = "", bool hoverTextCentered = false)
    {
        this.horizontalId = horizontalId;
        @ this.callback = @callback;
        this.hoverText = hoverText;
        this.hoverTextCentered = hoverTextCentered;
    }

    void setValue(bool value)
    {
        this.value = value;
    }

    bool checkCollision(
        int sourceX, int sourceY, int sourceWidth, int sourceHeight,
        int targetX, int targetY, int targetWidth, int targetHeight)
    {
        return sourceX + sourceWidth > targetX && sourceX < targetX + targetWidth && sourceY + sourceHeight > targetY && sourceY < targetY + targetHeight;
    }

    void input(jjPLAYER @player)
    {
        if (jjKey[0x1] && this.debounce == false)
        {
            if (checkCollision(
                    jjResolutionWidth / 2 + 100 + (horizontalId * 50) + xOffset,
                    jjResolutionHeight / 2 - 165 + ((this.mainButton.id + 1) * 50) + yOffset,
                    50, 50,
                    jjMouseX, jjMouseY,
                    1, 1))
            {
                this.debounce = true;
                dictionary dict = {{"main", @ this}};

                this.callback(this);

                TimerV(
                    10, function(this) {
                        Button @t;
                        this.get("main", @t);
                        t.debounce = false;
                    },
                    dict);
            }
        }
    }

    void draw(jjCANVAS @canvas)
    {
        if (this.visible)
        {
            /*
                jjResolutionWidth / (this.fillScreenFromCenter ? 2 : 1) - fillScreenPadding.x,
                jjResolutionHeight / (this.fillScreenFromCenter ? 2 : 1) - fillScreenPadding.y
            */

           // TODO: make this dynamic, aka work for any position and size and etc
           
            canvas.drawRectangle(
                jjResolutionWidth / 2 + 100 + (horizontalId * 50) + xOffset,
                jjResolutionHeight / 2 - 165 + ((this.mainButton.id + 1) * 50) + yOffset,
                25, 25, 0, SPRITE::NORMAL, 0);
            
            canvas.drawRectangle(
                jjResolutionWidth / 2 + 6 + 100 + (horizontalId * 50) + xOffset,
                jjResolutionHeight / 2 - 159 + ((this.mainButton.id + 1) * 50) + yOffset,
                12, 12, getCheckedColor(this.value), SPRITE::NORMAL, 0);

            if ((checkCollision(
                    jjResolutionWidth / 2 + 100 + (horizontalId * 50) + xOffset,
                    jjResolutionHeight / 2 - 165 + ((this.mainButton.id + 1) * 50) + yOffset,
                    50, 50,
                    jjMouseX, jjMouseY,
                    1, 1) || this.hoverTextCentered) &&
                this.hoverText != "")
            {
                if(hoverTextCentered) {
                    canvas.drawString(
                        jjResolutionWidth / 2 + 100 + (horizontalId * 50) + xOffset + (getStringLength(this.hoverText) * 5),
                        jjResolutionHeight / 2 - 165 + ((this.mainButton.id + 1) * 50) + yOffset + 15,
                        this.hoverText, STRING::SMALL, STRING::NORMAL, 0);
                } else {
                    canvas.drawString(
                        jjResolutionWidth / 2 + 100 + (horizontalId * 50) + xOffset,
                        jjResolutionHeight / 2 - 165 + ((this.mainButton.id + 1) * 50) + yOffset,
                        this.hoverText, STRING::SMALL, STRING::NORMAL, 0);
                }
            }
        }
    }
}

class MenuButton
{
    string text;
    int x;
    int y;
    int width;
    int height;
    int id;
    int xOffset;
    int yOffset;
    bool debounce;
    bool visible = true;
    CustomMenu@ parent;
    bool showText = true;
    string size = "medium";
    array<Button @> buttons;

    MenuButton(string text, int id, array<Button @> buttons, CustomMenu@ parent)
    {
        this.text = text;
        this.id = id;
        this.buttons = buttons;
        @this.parent = parent;

        for (uint i = 0; i < this.buttons.length(); i++)
        {
            @ this.buttons[i].mainButton = @ this;
        }
    }

    MenuButton(string text, int id, Button @button)
    {
        this.text = text;
        this.id = id;
        this.buttons = buttons;
        @this.parent = parent;
        this.buttons.insertLast(button);
        @ this.buttons[0].mainButton = @ this;
    }

    void draw(jjCANVAS @canvas)
    {
        if (this.visible and this.parent.enabled)
        {
            for (uint i = 0; i < this.buttons.length(); i++)
            {
                this.buttons[i].draw(canvas);
            }

            if (this.showText)
                canvas.drawString(
                    this.parent.position.x + 25 + this.xOffset,
                    this.parent.position.y + 50 + ((this.id + 1) * 50) + this.yOffset,
                    this.text, parseSize(this.size), STRING::NORMAL, 0);
        }
    }

    void input(jjPLAYER @player)
    {
        if (this.visible and this.parent.enabled)
        {
            for (uint i = 0; i < this.buttons.length(); i++)
            {
                this.buttons[i].input(player);
            }
        }
    }
}