funcdef void TimerVDictionaryFunction(dictionary@);
class TimerV : jjBEHAVIORINTERFACE {
  TimerV(int time, jjVOIDFUNC@ callback) {
    @_callback = @callback;
    _start(time);
  }
  TimerV(int time, TimerVDictionaryFunction@ callback, dictionary@ arguments) {
    @_callbackWithArguments = @callback;
    @_arguments = @arguments;
    _start(time);
  }
  bool get_Active() const {
    return cast<jjBEHAVIORINTERFACE@>(_object.behavior) is this;
  }
  int get_Elapsed() const {
    if (Active) return _object.age;
    return -1;
  }
  int get_Total() const {
    if (Active) return _object.counter;
    return -1;
  }
  int get_Remaining() const {
    if (Active) return _object.counter - _object.age;
    return -1;
  }
  bool Stop() {
    if (Active && _object.age < _object.counter) {
      _object.delete();
      return true;
    }
    return false;
  }
  bool Paused = false;
 
 
 
 
 
  private jjVOIDFUNC@ _callback = null;
  private TimerVDictionaryFunction@ _callbackWithArguments;
  private dictionary@ _arguments;
  private jjOBJ@ _object;
  private int _startTime;
  private void _start(int time) {
    if (time > 0) {
      @_object = jjObjects[jjAddObject(OBJECT::BEES, -1000, -1000, 0, CREATOR::OBJECT, BEHAVIOR::BEES)];
      _object.behavior = this;
      _object.counter = time;
      _object.age = 0;
      _object.playerHandling = HANDLING::PARTICLE;
      _object.deactivates = false;
      _startTime = jjGameTicks;
    } else {
      @_object = jjObjects[0]; //avoid null pointer access
      _pickCallback();
    }
  }
  private void onBehave(jjOBJ@ obj) {
    if (!Paused && jjGameTicks > _startTime && obj is _object && ++_object.age >= _object.counter) {
      _pickCallback();
      _object.delete();
    }
  }
  private void _pickCallback() {
    if (_callback !is null)
      _callback();
    else
      _callbackWithArguments(_arguments);
  }
}

class Key
{
    string id;
    uint code;

    Key(string id, uint code)
    {
        this.id = id;
        this.code = code;
    }
}

class AnimatedSprite
{
    int id;
    float frame;
    int frame_count;
    int x;
    int y;
    float anim_speed;
    bool can_reverse;
    bool reverse = false;
    bool visible = true;
    ANIM::Set animSet = ANIM::AMMO;
    SPRITE::Mode spriteMode = SPRITE::NORMAL;
    int spriteModeParam = 123;
    SPRITE::Direction direction = SPRITE::FLIPNONE;

    AnimatedSprite(int id, int frame, int frame_count, int x, int y, float anim_speed, bool can_reverse)
    {
        this.id = id;
        this.frame = frame;
        this.frame_count = frame_count;
        this.x = x;
        this.y = y;
        this.anim_speed = anim_speed;
        this.can_reverse = can_reverse;
    }

    void setVisible(bool visible)
    {
        this.visible = visible;
    }

    void setAnimSet(ANIM::Set animSet)
    {
        this.animSet = animSet;
    }

    void setId(uint id)
    {
        this.id = id;
    }

    void setFrameCount(uint frame_count)
    {
        this.frame_count = frame_count;
    }

    void update()
    {
        if(this.reverse == false) {
            this.frame += this.anim_speed;
        } else {
            this.frame -= this.anim_speed;
        }

        if (this.frame > this.frame_count)
        {
            if(this.can_reverse == true) {
                this.reverse = not this.reverse;
            } else {
                this.frame = 0;
            }
        }

        if(this.frame <= 0)
        {
            if(this.can_reverse == true) {
                this.reverse = not this.reverse;
            } else {
                this.frame = 0;
            }
        }
    }

    void draw(jjCANVAS@ canvas)
    {
        if(this.visible) {
            canvas.drawSprite(this.x, this.y, this.animSet, this.id, int(this.frame), this.direction, this.spriteMode, this.spriteModeParam);
        }
    }
}

array<Key@> KEYS = {
  Key("F2", 0x71), // 0
  Key("F5", 0x74), // 1
  Key("F6", 0x75), // 2
  Key("F7", 0x76), // 3
  Key("F10", 0x79), // 4
  Key("F11", 0x7A), // 5
  Key("Insert", 0x2D), // 6
  Key("Home", 0x24), // 7
  Key("PageUp", 0x21), // 8
  Key("Delete", 0x2E), // 9
  Key("End", 0x23), // 10
  Key("PageDown", 0x22), // 11
  Key("Colon", 0xBA), // 12
  Key("QuotationMark", 0xDE), // 13
  Key("Backspace", 0x08), // 14
  Key("Backslash", 0xDC), // 15
  Key("Backquote", 0xC0), // 16
  Key("BracketLeft", 0xDB), // 17
  Key("BracketRight", 0xDD), // 18
  Key("Comma", 0xBC), // 19
  Key("Minus", 0xBD), // 20
  Key("Period", 0xBE), // 21
  Key("Slash", 0xBF), // 22
  Key("Plus", 0xBB), // 23
  Key("Shift", 0x10), // 24
  Key("Alt", 0x12), // 25
  Key("Control", 0x11), // 26
  Key("Tab", 0x09), // 27
  Key("Caps Lock", 0x14), // 28
  Key("Space", 0x20), // 29
  Key("Up", 0x26), // 30
  Key("Down", 0x28), // 31
  Key("Left", 0x25), // 32
  Key("Right", 0x27), // 33
  Key("NumpadSlash", 0x6F), // 34
  Key("NumpadAsterisk", 0x6A), // 35
  Key("NumpadMinus", 0x6D), // 36
  Key("NumpadPlus", 0x6B), // 37
  Key("Numpad1", 0x61), // 38
  Key("Numpad2", 0x62), // 39
  Key("Numpad3", 0x63), // 40
  Key("Numpad4", 0x64), // 41
  Key("Numpad5", 0x65), // 42
  Key("Numpad6", 0x66), // 43
  Key("Numpad7", 0x67), // 44
  Key("Numpad8", 0x68), // 45
  Key("Numpad9", 0x69), // 46
  Key("Numpad0", 0x60), // 47
  Key("NumpadPeriod", 0x6E), // 48
  Key("0", 0x30), // 49
  Key("1", 0x31), // 50
  Key("2", 0x32), // 51
  Key("3", 0x33), // 52
  Key("4", 0x34), // 53
  Key("5", 0x35), // 54
  Key("6", 0x36), // 55
  Key("7", 0x37), // 56
  Key("8", 0x38), // 57
  Key("9", 0x39), // 58
  Key("A", 0x41), // 59
  Key("B", 0x42), // 60
  Key("C", 0x43), // 61
  Key("D", 0x44), // 62
  Key("E", 0x45), // 63
  Key("F", 0x46), // 64
  Key("G", 0x47), // 65
  Key("H", 0x48), // 66
  Key("I", 0x49), // 67
  Key("J", 0x4A), // 68
  Key("K", 0x4B), // 69
  Key("L", 0x4C), // 70
  Key("M", 0x4D), // 71
  Key("N", 0x4E), // 72
  Key("O", 0x4F), // 73
  Key("P", 0x50), // 74
  Key("Q", 0x51), // 75
  Key("R", 0x52), // 76
  Key("S", 0x53), // 77
  Key("T", 0x54), // 78
  Key("U", 0x55), // 79
  Key("V", 0x56), // 80
  Key("W", 0x57), // 81
  Key("X", 0x58), // 82
  Key("Y", 0x59), // 83
  Key("Z", 0x5A), // 84
  Key("Enter", 0x0D), // 85
};

class Box
{
    uint x;
    uint y;
    uint width;
    uint height;

    Box(uint x, uint y, uint width, uint height)
    {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }

    void draw(jjCANVAS@ canvas)
    {
        canvas.drawRectangle(this.x, this.y, this.width, this.height, 0, SPRITE::NORMAL, 0);
    }
}

class Dialogue
{
    string text;
    string textDisplayed;
    int speed = 5;
    int x;
    int y;
    int lastCharTick;
    Box@ box;
    bool visible = false;
    bool finished = false;
    bool can_skip = true;
    bool moreDialog = false;
    bool skipped = false;

    Dialogue(string text)
    {
        this.text = text;
        this.x = 0;
        this.y = 0;
    }
    
    void initalize() {
        @this.box = Box(0, 0, getStringLength(this.text) * 15, 50);
        this.visible = true;
        this.finished = false;
        this.textDisplayed = "";
        this.lastCharTick = jjGameTicks;
    }

    void draw(jjCANVAS@ canvas) {
        if(this.visible) {
            this.box.x = jjResolutionWidth / 2 - (getStringLength(this.text) * 15) / 2 + this.x;
            this.box.y = (jjResolutionHeight - 100 + this.y) - 25;
            this.box.draw(canvas);

            canvas.drawString(
                this.box.x, // they're the same so why not reuse
                this.box.y + 25, // they're the same so why not reuse
                this.textDisplayed, STRING::MEDIUM, STRING::NORMAL, 0);
            
            if(this.moreDialog) {
                canvas.drawString(
                    this.box.x + this.box.width - 25,
                    this.box.y + 50,
                    ">>", STRING::SMALL, STRING::NORMAL, 0);
            // } else {
            //     canvas.drawString(
            //         this.box.x + this.box.width - 25,
            //         this.box.y + 50,
            //         ">", STRING::SMALL, STRING::NORMAL, 0);
            }
        }
    }

    void update() {
        if(this.visible && this.lastCharTick + this.speed < jjGameTicks) {
            this.textDisplayed = this.text.substr(0, this.textDisplayed.length() + 1);
            
            if(getStringLength(this.textDisplayed) == getStringLength(this.text)) {
                this.finished = true;
            }

            lastCharTick = jjGameTicks;
        }
    }

    void input(jjPLAYER@ player) {
        if(this.visible) {
            if(jjKey[KEYS[85].code] && this.can_skip) {
                this.end();

                if(!this.finished) {
                    this.skipped = true;
                }
            }
        }
    }

    void end() {
        this.visible = false;
        this.finished = true;
    }
}

// will need more stuff
enum RabbitState {
    IDLE, 
    WALKING, RUNNING,
    JUMPING, FALLING,
    DYING, DEAD,
    SHOOTING,
    PUSHING,
    HURT
};

class RabbitNPC
{
    uint32 fur;
    CHAR::Char character;
    AnimatedSprite@ sprite;
    RabbitState state = RabbitState::IDLE;
    int8 direction;

    RabbitNPC(int x, int y, int fur, CHAR::Char character)
    {
        ANIM::Set characterSet = ANIM::JAZZ;

        if(character == CHAR::SPAZ) characterSet = ANIM::SPAZ;
        if(character == CHAR::LORI) characterSet = ANIM::LORI;

        this.fur = fur;
        this.character = character;
        @this.sprite = AnimatedSprite(61, 0, 5, x, y, 0.15, false);
        this.sprite.spriteModeParam = fur;
        this.sprite.spriteMode = SPRITE::PLAYER;
        this.sprite.animSet = characterSet;
    }

    void updateFur(uint32 fur) {
        this.fur = fur;
        this.sprite.spriteModeParam = fur;
    }

    void draw(jjCANVAS@ canvas) {
        this.sprite.direction = this.direction > 0 ? SPRITE::FLIPNONE : SPRITE::FLIPH;

        this.sprite.draw(canvas);
    }

    int distToGround() {
        int len = 32;

        while(onGround(len--));

        return len - 17 < 0 ? 0 : len - 17;
    }

    bool colliding() {
        return false;
    }
       
    bool onGround(int charHeight = 21) {
        return jjMaskedHLine(int(this.sprite.x - 12), 24, int(this.sprite.y + charHeight));
    }

    void setState(RabbitState state) {
        int id = 61;    
        int frame_count = 5;

        this.sprite.frame = 0;
        this.state = state;

        switch (state)
        {
            case RabbitState::WALKING:
                id = 54;
                frame_count = 8;
                break;
            
            case RabbitState::RUNNING:
                id = 56;
                frame_count = 4;
                break;
            
            case RabbitState::JUMPING:
                id = 52;
                frame_count = 9;
                break;
            
            case RabbitState::FALLING:
                id = 11;
                frame_count = 3;
                break;
            
            case RabbitState::DYING:
                id = 4;
                frame_count = 20;
                break;
            
            case RabbitState::DEAD:
                id = 3;
                frame_count = 1;
                break;
            
            case RabbitState::SHOOTING:
                id = 15;
                frame_count = 2;
                break;

            case RabbitState::PUSHING:
                id = 46;
                frame_count = 9;
                break;
            
            case RabbitState::HURT:
                id = 29;
                frame_count = 9;
                break;
            
            default:
                break;
        }

        this.sprite.id = id;
        this.sprite.frame_count = frame_count;
    }

    void update() {
        this.sprite.update();
    }
}

uint getStringLength(string str) {
    string str2 = str;
    uint i = 0;

    while(i < str2.length()) {
        if(str2[i] == "|"[0]) {
            str2 = str2.substr(0, i) + str2.substr(i + 1);
        }

        i++;
    }

    return str2.length();
}