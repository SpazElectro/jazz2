// hooks that I would love to have integrated into plus

#pragma require "STVutil.asc"
#include "STVutil.asc"

funcdef void PlayerJoinCallback(jjPLAYER@);
funcdef void PlayerLeaveCallback(jjPLAYER@); // this happens AFTER the player leaves
funcdef void PlayerPropertyChangedCallback(jjPLAYER@, string);

array<PlayerJoinCallback@> playerJoinCallbacks;
array<PlayerLeaveCallback@> playerLeaveCallbacks;
array<PlayerPropertyChangedCallback@> playerPropertyChangedCallbacks;

array<uint> hooks_prevPlayers();
array<dictionary> hooks_prevPlayerProperties();

// we hate casting
uint castValueUInt(dictionary@ dict, const string key)
{
    uint x = 0;
    dict.get(key, x);
    return x;
}
int castValueInt(dictionary@ dict, const string key)
{
    int x = 0;
    dict.get(key, x);
    return x;
}
bool castValueBool(dictionary@ dict, const string key)
{
    bool x = false;
    dict.get(key, x);
    return x;
}
int8 castValueInt8(dictionary@ dict, const string key)
{
    int8 x = 0;
    dict.get(key, x);
    return x;
}
uint8 castValueUInt8(dictionary@ dict, const string key)
{
    uint8 x = 0;
    dict.get(key, x);
    return x;
}
float castValueFloat(dictionary@ dict, const string key)
{
    float x = 0.0;
    dict.get(key, x);
    return x;
}

// we hate casting
// this is terrible
void checkAndExecuteCallbackUInt(dictionary@ dict, const string key, uint expectedValue, jjPLAYER@ player)
{
    if (castValueUInt(dict, key) != expectedValue)
    {
        for (uint i = 0; i < playerPropertyChangedCallbacks.length(); i++)
        {
            playerPropertyChangedCallbacks[i](player, key);
        }
    }
}
void checkAndExecuteCallbackInt(dictionary@ dict, const string key, int expectedValue, jjPLAYER@ player)
{
    if (castValueInt(dict, key) != expectedValue)
    {
        for (uint i = 0; i < playerPropertyChangedCallbacks.length(); i++)
        {
            playerPropertyChangedCallbacks[i](player, key);
        }
    }
}
void checkAndExecuteCallbackBool(dictionary@ dict, const string key, bool expectedValue, jjPLAYER@ player)
{
    if (castValueBool(dict, key) != expectedValue)
    {
        for (uint i = 0; i < playerPropertyChangedCallbacks.length(); i++)
        {
            playerPropertyChangedCallbacks[i](player, key);
        }
    }
}
void checkAndExecuteCallbackInt8(dictionary@ dict, const string key, int8 expectedValue, jjPLAYER@ player)
{
    if (castValueInt8(dict, key) != expectedValue)
    {
        for (uint i = 0; i < playerPropertyChangedCallbacks.length(); i++)
        {
            playerPropertyChangedCallbacks[i](player, key);
        }
    }
}
void checkAndExecuteCallbackUInt8(dictionary@ dict, const string key, uint8 expectedValue, jjPLAYER@ player)
{
    if (castValueUInt8(dict, key) != expectedValue)
    {
        for (uint i = 0; i < playerPropertyChangedCallbacks.length(); i++)
        {
            playerPropertyChangedCallbacks[i](player, key);
        }
    }
}
void checkAndExecuteCallbackFloat(dictionary@ dict, const string key, float expectedValue, jjPLAYER@ player)
{
    if (castValueFloat(dict, key) != expectedValue)
    {
        for (uint i = 0; i < playerPropertyChangedCallbacks.length(); i++)
        {
            playerPropertyChangedCallbacks[i](player, key);
        }
    }
}

void updateHooks() {
    for(int i = 0; i < 32; i++) {
        jjPLAYER@ player = jjPlayers[i];
        
        if(player.isActive) {
            if(int(hooks_prevPlayerProperties.length()) <= i) {
                hooks_prevPlayerProperties.insertLast({});
            } else {
                array<string>@ keys = hooks_prevPlayerProperties[i].getKeys();
                
                for (uint keyIndex = 0; keyIndex < keys.length(); keyIndex++)
                {
                    string key = keys[keyIndex];
                    dictionaryValue value = hooks_prevPlayerProperties[i][key];
                    dictionary t = hooks_prevPlayerProperties[i];

                    if(key == "antiGrav")
                        checkAndExecuteCallbackBool(t, key, player.antiGrav, player);
                    if(key == "bossActivated")
                        checkAndExecuteCallbackBool(t, key, player.bossActivated, player);
                    if(key == "coins")
                        checkAndExecuteCallbackInt(t, key, player.coins, player);
                    if(key == "currWeapon")
                        checkAndExecuteCallbackUInt8(t, key, player.currWeapon, player);
                    if(key == "fly")
                        checkAndExecuteCallbackInt(t, key, player.fly, player);
                    if(key == "food")
                        checkAndExecuteCallbackInt(t, key, player.food, player);
                    if(key == "frozen")
                        checkAndExecuteCallbackInt8(t, key, player.frozen, player);
                    if(key == "health")
                        checkAndExecuteCallbackUInt8(t, key, player.health, player);
                    if(key == "helicopter")
                        checkAndExecuteCallbackInt(t, key, player.helicopter, player);
                    if(key == "invisibility")
                        checkAndExecuteCallbackBool(t, key, player.invisibility, player);
                    if(key == "jumpStrength")
                        checkAndExecuteCallbackFloat(t, key, player.jumpStrength, player);
                    if(key == "laps")
                        checkAndExecuteCallbackInt(t, key, player.laps, player);
                    if(key == "lapTimeBest")
                        checkAndExecuteCallbackInt(t, key, player.lapTimeBest, player);
                    if(key == "lapTimeCurrent")
                        checkAndExecuteCallbackInt(t, key, player.lapTimeCurrent, player);
                    if(key == "light")
                        checkAndExecuteCallbackInt8(t, key, player.light, player);
                    if(key == "lighting")
                        checkAndExecuteCallbackUInt8(t, key, player.lighting, player);
                }
            }

            hooks_prevPlayerProperties[i] = {
                {"antiGrav", player.antiGrav},
                {"bossActivated", player.bossActivated},
                // {"charCurr", player.charCurr},
                {"coins", player.coins},
                {"currWeapon", player.currWeapon},
                {"fly", player.fly},
                {"food", player.food},
                {"frozen", player.frozen},
                // {"gems", player.gems},
                {"health", player.health},
                {"helicopter", player.helicopter},
                {"invisibility", player.invisibility},
                {"jumpStrength", player.jumpStrength},
                {"laps", player.laps},
                {"lapTimeBest", player.lapTimeBest},
                {"lapTimeCurrent", player.lapTimeCurrent},
                // {"lapTimes", player.lapTimes},
                {"light", player.light},
                {"lighting", player.lighting}
                // {"lightType", player.lightType}
            };

            if(hooks_prevPlayers.find(i) < 0) {
                // this timer is for the player's properties to all load
                TimerV(1, function(args) {
                    jjPLAYER @player;
                    int i;
                    args.get("player", @player);
                    args.get("i", i);

                    for (uint pji = 0; pji < playerJoinCallbacks.length(); pji++)
                    {
                        playerJoinCallbacks[pji](player);
                    }

                    hooks_prevPlayers.insertLast(i);
                }, {{"player", player}, {"i", i}});
            }
        } else {
            if(hooks_prevPlayers.find(i) >= 0) {
                for (uint pli = 0; pli < playerLeaveCallbacks.length(); pli++)
                {
                    playerLeaveCallbacks[pli](player);
                }

                hooks_prevPlayers.removeAt(hooks_prevPlayers.find(i));
                hooks_prevPlayerProperties.removeAt(i);
            }
        }
    }
}
