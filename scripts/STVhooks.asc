// hooks that I would love to have integrated into plus

#pragma require "STVutil.asc"
#include "STVutil.asc"

funcdef void PlayerJoinCallback(jjPLAYER@);
funcdef void PlayerLeaveCallback(jjPLAYER@); // this happens AFTER the player leaves
funcdef void PlayerPropertyChangedCallback(jjPLAYER@, string);

array<PlayerJoinCallback@> playerJoinCallbacks;
array<PlayerLeaveCallback@> playerLeaveCallbacks;
array<PlayerPropertyChangedCallback@> playerPropertyChangedCallbacks;

array<uint> hooks_prevPlayers();
array<dictionary> hooks_prevPlayerProperties();

int executeCallbacks(jjPLAYER@ player, string key) {
    for (uint i = 0; i < playerPropertyChangedCallbacks.length(); i++)
    {
        playerPropertyChangedCallbacks[i](player, key);
    }

    return 1;
}

// this is terrible
int checkAndExecuteCallbackUInt(dictionary@ dict, string key, uint expectedValue, jjPLAYER@ player) { return castValueUInt(dict, key) != expectedValue ? executeCallbacks(player, key) : 0; }
int checkAndExecuteCallbackInt(dictionary@ dict, string key, int expectedValue, jjPLAYER@ player) { return castValueInt(dict, key) != expectedValue ? executeCallbacks(player, key) : 0; }
int checkAndExecuteCallbackBool(dictionary@ dict, string key, bool expectedValue, jjPLAYER@ player) { return castValueBool(dict, key) != expectedValue ? executeCallbacks(player, key) : 0; }
int checkAndExecuteCallbackInt8(dictionary@ dict, string key, int8 expectedValue, jjPLAYER@ player) { return castValueInt8(dict, key) != expectedValue ? executeCallbacks(player, key) : 0; }
int checkAndExecuteCallbackUInt8(dictionary@ dict, string key, uint8 expectedValue, jjPLAYER@ player) { return castValueUInt8(dict, key) != expectedValue ? executeCallbacks(player, key) : 0; }
int checkAndExecuteCallbackUInt16(dictionary@ dict, string key, uint16 expectedValue, jjPLAYER@ player) { return castValueUInt16(dict, key) != expectedValue ? executeCallbacks(player, key) : 0; }
int checkAndExecuteCallbackUInt32(dictionary@ dict, string key, uint32 expectedValue, jjPLAYER@ player) { return castValueUInt32(dict, key) != expectedValue ? executeCallbacks(player, key) : 0; }
int checkAndExecuteCallbackString(dictionary@ dict, string key, string expectedValue, jjPLAYER@ player) { return castValueString(dict, key) != expectedValue ? executeCallbacks(player, key) : 0; }
int checkAndExecuteCallbackFloat(dictionary@ dict, string key, float expectedValue, jjPLAYER@ player) { return castValueFloat(dict, key) != expectedValue ? executeCallbacks(player, key) : 0; }

void updateHooks() {
    for(int i = 0; i < 32; i++) {
        jjPLAYER@ player = jjPlayers[i];
        
        if(player.isActive) {
            if(int(hooks_prevPlayerProperties.length()) <= i) {
                hooks_prevPlayerProperties.insertLast({});
            } else {
                array<string>@ keys = hooks_prevPlayerProperties[i].getKeys();
                
                for (uint keyIndex = 0; keyIndex < keys.length(); keyIndex++)
                {
                    string key = keys[keyIndex];
                    dictionaryValue value = hooks_prevPlayerProperties[i][key];
                    dictionary t = hooks_prevPlayerProperties[i];

                    if(key == "alreadyDoubleJumped")
                        checkAndExecuteCallbackBool(t, key, player.alreadyDoubleJumped, player);
                    // if(key == "ammo[9]")
                    //     checkAndExecuteCallbackInt(t, key, player.ammo[9], player);
                    if(key == "antiGrav")
                        checkAndExecuteCallbackBool(t, key, player.antiGrav, player);
                    if(key == "ballTime")
                        checkAndExecuteCallbackInt(t, key, player.ballTime, player);
                    if(key == "blink")
                        checkAndExecuteCallbackInt(t, key, player.blink, player);
                    if(key == "boss")
                        checkAndExecuteCallbackInt(t, key, player.boss, player);
                    if(key == "bossActivated")
                        checkAndExecuteCallbackBool(t, key, player.bossActivated, player);
                    if(key == "buttstomp")
                        checkAndExecuteCallbackInt(t, key, player.buttstomp, player);
                    if(key == "cameraX")
                        checkAndExecuteCallbackFloat(t, key, player.cameraX, player);
                    if(key == "cameraY")
                        checkAndExecuteCallbackFloat(t, key, player.cameraY, player);
                    // if(key == "charCurr")
                    //     checkAndExecuteCallbackCHAR::Char(t, key, player.charCurr, player);
                    // if(key == "charOrig")
                    //     checkAndExecuteCallbackCHAR::Char(t, key, player.charOrig, player);
                    if(key == "coins")
                        checkAndExecuteCallbackInt(t, key, player.coins, player);
                    if(key == "curAnim")
                        checkAndExecuteCallbackUInt16(t, key, player.curAnim, player);
                    if(key == "curFrame")
                        checkAndExecuteCallbackUInt(t, key, player.curFrame, player);
                    if(key == "currTile")
                        checkAndExecuteCallbackInt(t, key, player.currTile, player);
                    if(key == "currWeapon")
                        checkAndExecuteCallbackUInt8(t, key, player.currWeapon, player);
                    if(key == "deaths")
                        checkAndExecuteCallbackInt(t, key, player.deaths, player);
                    if(key == "direction")
                        checkAndExecuteCallbackInt8(t, key, player.direction, player);
                    if(key == "doubleJumpCount")
                        checkAndExecuteCallbackInt(t, key, player.doubleJumpCount, player);
                    if(key == "fastfire")
                        checkAndExecuteCallbackInt(t, key, player.fastfire, player);
                    if(key == "flag")
                        checkAndExecuteCallbackInt(t, key, player.flag, player);
                    if(key == "fly")
                        checkAndExecuteCallbackInt(t, key, player.fly, player);
                    if(key == "food")
                        checkAndExecuteCallbackInt(t, key, player.food, player);
                    if(key == "frameID")
                        checkAndExecuteCallbackUInt8(t, key, player.frameID, player);
                    if(key == "frozen")
                        checkAndExecuteCallbackInt8(t, key, player.frozen, player);
                    if(key == "fur")
                        checkAndExecuteCallbackUInt32(t, key, player.fur, player);
                    // if(key == "gems[GEM::Color]")
                    //     checkAndExecuteCallbackInt(t, key, player.gems[GEM::Color], player);
                    if(key == "health")
                        checkAndExecuteCallbackUInt8(t, key, player.health, player);
                    if(key == "helicopter")
                        checkAndExecuteCallbackInt(t, key, player.helicopter, player);
                    if(key == "helicopterElapsed")
                        checkAndExecuteCallbackInt(t, key, player.helicopterElapsed, player);
                    if(key == "idle")
                        checkAndExecuteCallbackInt(t, key, player.idle, player);
                    if(key == "invincibility")
                        checkAndExecuteCallbackInt(t, key, player.invincibility, player);
                    if(key == "invisibility")
                        checkAndExecuteCallbackBool(t, key, player.invisibility, player);
                    if(key == "isActive")
                        checkAndExecuteCallbackBool(t, key, player.isActive, player);
                    if(key == "isAdmin")
                        checkAndExecuteCallbackBool(t, key, player.isAdmin, player);
                    if(key == "isConnecting")
                        checkAndExecuteCallbackBool(t, key, player.isConnecting, player);
                    if(key == "isIdle")
                        checkAndExecuteCallbackBool(t, key, player.isIdle, player);
                    if(key == "isInGame")
                        checkAndExecuteCallbackBool(t, key, player.isInGame, player);
                    if(key == "isJailed")
                        checkAndExecuteCallbackBool(t, key, player.isJailed, player);
                    if(key == "isLocal")
                        checkAndExecuteCallbackBool(t, key, player.isLocal, player);
                    if(key == "isOut")
                        checkAndExecuteCallbackBool(t, key, player.isOut, player);
                    if(key == "isSpectating")
                        checkAndExecuteCallbackBool(t, key, player.isSpectating, player);
                    if(key == "isZombie")
                        checkAndExecuteCallbackBool(t, key, player.isZombie, player);
                    if(key == "jumpStrength")
                        checkAndExecuteCallbackFloat(t, key, player.jumpStrength, player);
                    if(key == "keyDown")
                        checkAndExecuteCallbackBool(t, key, player.keyDown, player);
                    if(key == "keyFire")
                        checkAndExecuteCallbackBool(t, key, player.keyFire, player);
                    if(key == "keyJump")
                        checkAndExecuteCallbackBool(t, key, player.keyJump, player);
                    if(key == "keyLeft")
                        checkAndExecuteCallbackBool(t, key, player.keyLeft, player);
                    if(key == "keyRight")
                        checkAndExecuteCallbackBool(t, key, player.keyRight, player);
                    if(key == "keyRun")
                        checkAndExecuteCallbackBool(t, key, player.keyRun, player);
                    if(key == "keySelect")
                        checkAndExecuteCallbackBool(t, key, player.keySelect, player);
                    if(key == "keyUp")
                        checkAndExecuteCallbackBool(t, key, player.keyUp, player);
                    if(key == "laps")
                        checkAndExecuteCallbackInt(t, key, player.laps, player);
                    if(key == "lapTimeBest")
                        checkAndExecuteCallbackInt(t, key, player.lapTimeBest, player);
                    if(key == "lapTimeCurrent")
                        checkAndExecuteCallbackInt(t, key, player.lapTimeCurrent, player);
                    // if(key == "lapTimes[5]")
                    //     checkAndExecuteCallbackInt(t, key, player.lapTimes[5], player);
                    if(key == "light")
                        checkAndExecuteCallbackInt8(t, key, player.light, player);
                    if(key == "lighting")
                        checkAndExecuteCallbackUInt8(t, key, player.lighting, player);
                    // if(key == "lightType")
                    //     checkAndExecuteCallbackLIGHT::Type(t, key, player.lightType, player);
                    if(key == "lives")
                        checkAndExecuteCallbackInt(t, key, player.lives, player);
                    if(key == "localPlayerID")
                        checkAndExecuteCallbackInt(t, key, player.localPlayerID, player);
                    if(key == "lrsLives")
                        checkAndExecuteCallbackInt(t, key, player.lrsLives, player);
                    if(key == "name")
                        checkAndExecuteCallbackString(t, key, player.name, player);
                    if(key == "nameUnformatted")
                        checkAndExecuteCallbackString(t, key, player.nameUnformatted, player);
                    if(key == "noclipMode")
                        checkAndExecuteCallbackBool(t, key, player.noclipMode, player);
                    if(key == "noFire")
                        checkAndExecuteCallbackBool(t, key, player.noFire, player);
                    if(key == "platform")
                        checkAndExecuteCallbackInt(t, key, player.platform, player);
                    if(key == "playerID")
                        checkAndExecuteCallbackInt8(t, key, player.playerID, player);
                    // if(key == "powerup[9]")
                        // checkAndExecuteCallbackBool(t, key, player.powerup[9], player);
                    if(key == "roasts")
                        checkAndExecuteCallbackInt(t, key, player.roasts, player);
                    if(key == "running")
                        checkAndExecuteCallbackBool(t, key, player.running, player);
                    if(key == "score")
                        checkAndExecuteCallbackInt(t, key, player.score, player);
                    if(key == "scoreDisplayed")
                        checkAndExecuteCallbackInt(t, key, player.scoreDisplayed, player);
                    // if(key == "setID")
                    //     checkAndExecuteCallbackANIM::Set(t, key, player.setID, player);
                    if(key == "shieldTime")
                        checkAndExecuteCallbackInt(t, key, player.shieldTime, player);
                    if(key == "shieldType")
                        checkAndExecuteCallbackInt(t, key, player.shieldType, player);
                    if(key == "specialMove")
                        checkAndExecuteCallbackInt(t, key, player.specialMove, player);
                    // if(key == "spriteMode")
                    //     checkAndExecuteCallbackSPRITE::Mode(t, key, player.spriteMode, player);
                    if(key == "spriteParam")
                        checkAndExecuteCallbackUInt8(t, key, player.spriteParam, player);
                    if(key == "stoned")
                        checkAndExecuteCallbackInt(t, key, player.stoned, player);
                    if(key == "subscreenX")
                        checkAndExecuteCallbackInt(t, key, player.subscreenX, player);
                    if(key == "subscreenY")
                        checkAndExecuteCallbackInt(t, key, player.subscreenY, player);
                    // if(key == "team")
                    //     checkAndExecuteCallbackTEAM::Color(t, key, player.team, player);
                    if(key == "teamRed")
                        checkAndExecuteCallbackBool(t, key, player.teamRed, player);
                    if(key == "timerPersists")
                        checkAndExecuteCallbackBool(t, key, player.timerPersists, player);
                    if(key == "timerTime")
                        checkAndExecuteCallbackInt(t, key, player.timerTime, player);
                    if(key == "warpID")
                        checkAndExecuteCallbackInt(t, key, player.warpID, player);
                    if(key == "xAcc")
                        checkAndExecuteCallbackFloat(t, key, player.xAcc, player);
                    if(key == "xOrg")
                        checkAndExecuteCallbackFloat(t, key, player.xOrg, player);
                    if(key == "xPos")
                        checkAndExecuteCallbackFloat(t, key, player.xPos, player);
                    if(key == "xSpeed")
                        checkAndExecuteCallbackFloat(t, key, player.xSpeed, player);
                    if(key == "yAcc")
                        checkAndExecuteCallbackFloat(t, key, player.yAcc, player);
                    if(key == "yOrg")
                        checkAndExecuteCallbackFloat(t, key, player.yOrg, player);
                    if(key == "yPos")
                        checkAndExecuteCallbackFloat(t, key, player.yPos, player);
                    if(key == "ySpeed")
                        checkAndExecuteCallbackFloat(t, key, player.ySpeed, player);
                }
            }

            hooks_prevPlayerProperties[i] = {
                {"alreadyDoubleJumped", player.alreadyDoubleJumped},
                // {"ammo[9]", player.ammo[9]},
                {"antiGrav", player.antiGrav},
                {"ballTime", player.ballTime},
                {"blink", player.blink},
                {"boss", player.boss},
                {"bossActivated", player.bossActivated},
                {"buttstomp", player.buttstomp},
                {"cameraX", player.cameraX},
                {"cameraY", player.cameraY},
                {"charCurr", player.charCurr},
                {"charOrig", player.charOrig},
                {"coins", player.coins},
                {"curAnim", player.curAnim},
                {"curFrame", player.curFrame},
                {"currTile", player.currTile},
                {"currWeapon", player.currWeapon},
                {"deaths", player.deaths},
                {"direction", player.direction},
                {"doubleJumpCount", player.doubleJumpCount},
                {"fastfire", player.fastfire},
                {"flag", player.flag},
                {"fly", player.fly},
                {"food", player.food},
                {"frameID", player.frameID},
                {"frozen", player.frozen},
                {"fur", player.fur},
                // {"gems[GEM::Color]", player.gems[GEM::Color]},
                {"health", player.health},
                {"helicopter", player.helicopter},
                {"helicopterElapsed", player.helicopterElapsed},
                {"idle", player.idle},
                {"invincibility", player.invincibility},
                {"invisibility", player.invisibility},
                {"isActive", player.isActive},
                {"isAdmin", player.isAdmin},
                {"isConnecting", player.isConnecting},
                {"isIdle", player.isIdle},
                {"isInGame", player.isInGame},
                {"isJailed", player.isJailed},
                {"isLocal", player.isLocal},
                {"isOut", player.isOut},
                {"isSpectating", player.isSpectating},
                {"isZombie", player.isZombie},
                {"jumpStrength", player.jumpStrength},
                {"keyDown", player.keyDown},
                {"keyFire", player.keyFire},
                {"keyJump", player.keyJump},
                {"keyLeft", player.keyLeft},
                {"keyRight", player.keyRight},
                {"keyRun", player.keyRun},
                {"keySelect", player.keySelect},
                {"keyUp", player.keyUp},
                {"laps", player.laps},
                {"lapTimeBest", player.lapTimeBest},
                {"lapTimeCurrent", player.lapTimeCurrent},
                // {"lapTimes[5]", player.lapTimes[5]},
                {"light", player.light},
                {"lighting", player.lighting},
                {"lightType", player.lightType},
                {"lives", player.lives},
                {"localPlayerID", player.localPlayerID},
                {"lrsLives", player.lrsLives},
                {"name", player.name},
                {"nameUnformatted", player.nameUnformatted},
                {"noclipMode", player.noclipMode},
                {"noFire", player.noFire},
                {"platform", player.platform},
                {"playerID", player.playerID},
                // {"powerup[9]", player.powerup[9]},
                {"roasts", player.roasts},
                {"running", player.running},
                {"score", player.score},
                {"scoreDisplayed", player.scoreDisplayed},
                // {"setID", player.setID},
                {"shieldTime", player.shieldTime},
                {"shieldType", player.shieldType},
                {"specialMove", player.specialMove},
                // {"spriteMode", player.spriteMode},
                {"spriteParam", player.spriteParam},
                {"stoned", player.stoned},
                {"subscreenX", player.subscreenX},
                {"subscreenY", player.subscreenY},
                // {"team", player.team},
                {"teamRed", player.teamRed},
                {"timerPersists", player.timerPersists},
                {"timerTime", player.timerTime},
                {"warpID", player.warpID},
                {"xAcc", player.xAcc},
                {"xOrg", player.xOrg},
                {"xPos", player.xPos},
                {"xSpeed", player.xSpeed},
                {"yAcc", player.yAcc},
                {"yOrg", player.yOrg},
                {"yPos", player.yPos},
                {"ySpeed", player.ySpeed}
            };

            if(hooks_prevPlayers.find(i) < 0) {
                // this timer is for the player's properties to all load
                TimerV(1, function(args) {
                    jjPLAYER @player;
                    int i;
                    args.get("player", @player);
                    args.get("i", i);

                    for (uint pji = 0; pji < playerJoinCallbacks.length(); pji++)
                    {
                        playerJoinCallbacks[pji](player);
                    }

                    hooks_prevPlayers.insertLast(i);
                }, {{"player", player}, {"i", i}});
            }
        } else {
            if(hooks_prevPlayers.find(i) >= 0) {
                for (uint pli = 0; pli < playerLeaveCallbacks.length(); pli++)
                {
                    playerLeaveCallbacks[pli](player);
                }

                hooks_prevPlayers.removeAt(hooks_prevPlayers.find(i));
                hooks_prevPlayerProperties.removeAt(i);
            }
        }
    }
}
