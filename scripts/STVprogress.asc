#pragma require "STVutil.asc"

#include "STVutil.asc"

// ORDER
    // length: number (mainItemsLength + customItemsDataLength)
    // ammo: int (from this index to plus 9)
    // charCurr: CHAR::Char (read-only)
    // charOrig: CHAR::Char
    // coins: int
    // currWeapon: uint8
    // fastfire: int
    // food: int
    // gem: int (from this index to plus 4)
    // health: uint8
    // lives: int
    // noFire: bool
    // powerup: bool (from this index to plus 9)
    // score: int
    // scoreDisplayed: int
    // shieldTime: int
    // shieldType: int
    // xOrg: float
    // xPos: float
    // yOrg: float
    // yPos: float
// ORDER

class ProgressManager
{
    int mainItemsLength = 39;

    ProgressManager() {}

    array<string> _getMainItems(jjPLAYER@ player) {
        array<string> items;

        items.insertLast(formatInt(player.ammo[1]));
        items.insertLast(formatInt(player.ammo[2]));
        items.insertLast(formatInt(player.ammo[3]));
        items.insertLast(formatInt(player.ammo[4]));
        items.insertLast(formatInt(player.ammo[5]));
        items.insertLast(formatInt(player.ammo[6]));
        items.insertLast(formatInt(player.ammo[7]));
        items.insertLast(formatInt(player.ammo[8]));
        items.insertLast(formatInt(player.ammo[9]));
        items.insertLast(formatCharacter(player.charCurr));
        items.insertLast(formatCharacter(player.charOrig));
        items.insertLast(formatInt(player.coins));
        items.insertLast(formatInt(player.currWeapon));
        items.insertLast(formatInt(player.fastfire));
        items.insertLast(formatInt(player.food));
        items.insertLast(formatInt(player.gems[GEM::RED]));
        items.insertLast(formatInt(player.gems[GEM::GREEN]));
        items.insertLast(formatInt(player.gems[GEM::BLUE]));
        items.insertLast(formatInt(player.gems[GEM::PURPLE]));
        items.insertLast(formatInt(player.health));
        items.insertLast(formatInt(player.lives));
        items.insertLast(formatBool(player.noFire));
        items.insertLast(formatBool(player.powerup[1]));
        items.insertLast(formatBool(player.powerup[2]));
        items.insertLast(formatBool(player.powerup[3]));
        items.insertLast(formatBool(player.powerup[4]));
        items.insertLast(formatBool(player.powerup[5]));
        items.insertLast(formatBool(player.powerup[6]));
        items.insertLast(formatBool(player.powerup[7]));
        items.insertLast(formatBool(player.powerup[8]));
        items.insertLast(formatBool(player.powerup[9]));
        items.insertLast(formatInt(player.score));
        items.insertLast(formatInt(player.scoreDisplayed));
        items.insertLast(formatInt(player.shieldTime));
        items.insertLast(formatInt(player.shieldType));
        items.insertLast(formatFloat(player.xOrg));
        items.insertLast(formatFloat(player.xPos));
        items.insertLast(formatFloat(player.yOrg));
        items.insertLast(formatFloat(player.yPos));

        return items;
    }

    void _loadPlayerItems(jjPLAYER@ player, array<string> items) {
        player.ammo[1] = parseInt(items[0]);
        player.ammo[2] = parseInt(items[1]);
        player.ammo[3] = parseInt(items[2]);
        player.ammo[4] = parseInt(items[3]);
        player.ammo[5] = parseInt(items[4]);
        player.ammo[6] = parseInt(items[5]);
        player.ammo[7] = parseInt(items[6]);
        player.ammo[8] = parseInt(items[7]);
        player.ammo[9] = parseInt(items[8]);
        player.morphTo(parseCharacter(items[9]), false);
        player.charOrig = parseCharacter(items[10]);
        player.coins = parseInt(items[11]);
        player.currWeapon = parseUInt(items[12]);
        player.fastfire = parseInt(items[13]);
        player.food = parseInt(items[14]);
        player.gems[GEM::RED] = parseInt(items[15]);
        player.gems[GEM::GREEN] = parseInt(items[16]);
        player.gems[GEM::BLUE] = parseInt(items[17]);
        player.gems[GEM::PURPLE] = parseInt(items[18]);
        player.health = parseUInt(items[19]);
        player.lives = parseInt(items[20]);
        player.noFire = parseBool(items[21]);
        player.powerup[1] = parseBool(items[22]);
        player.powerup[2] = parseBool(items[23]);
        player.powerup[3] = parseBool(items[24]);
        player.powerup[4] = parseBool(items[25]);
        player.powerup[5] = parseBool(items[26]);
        player.powerup[6] = parseBool(items[27]);
        player.powerup[7] = parseBool(items[28]);
        player.powerup[8] = parseBool(items[29]);
        player.powerup[9] = parseBool(items[30]);
        player.score = parseInt(items[31]);
        player.scoreDisplayed = parseInt(items[32]);
        player.shieldTime = parseInt(items[33]);
        player.shieldType = parseInt(items[34]);
        player.xOrg = parseFloat(items[35]);
        player.xPos = parseFloat(items[36]);
        player.yOrg = parseFloat(items[37]);
        player.yPos = parseFloat(items[38]);
    }

    bool save(jjPLAYER@ player, int saveId, array<string> customItemsData) {
        array<string> mainItems = _getMainItems(player);

        string name = ("progressManager-" + jjLevelFileName + "-" + formatInt(saveId) + ".asdat");
        
        jjSTREAM file;
        file.push(mainItemsLength + customItemsData.length());

        for (int i = 0; i < mainItemsLength; i++) {
            file.push(mainItems[i]);
        }

        for (uint i = 0; i < customItemsData.length(); i++) {
            file.push(customItemsData[i]);
        }

        return file.save(name);
    }

    array<string> load(jjPLAYER@ player, int saveId) {
        string name = ("progressManager-" + jjLevelFileName + "-" + formatInt(saveId) + ".asdat");

        array<string> items;

        jjSTREAM file(name);

        uint length;

        if (file.pop(length)) {
            items.resize(length);
            
            for (uint i = 0; i < length; i++) {
                file.pop(items[i]);
            }
        } else {
            jjConsole("Failed to pop length (index 0)");
        }

        _loadPlayerItems(player, items);

        items.removeRange(0, mainItemsLength);

        return items;
    }
};
