#pragma require "STVutil.asc"

#include "STVutil.asc"

// ORDER
// length: number (mainItemsLength + customItemsDataLength)
// ammo: int (from this index to plus 9)
// charCurr: CHAR::Char (read-only)
// charOrig: CHAR::Char
// coins: int
// currWeapon: uint8
// fastfire: int
// food: int
// gem: int (from this index to plus 4)
// health: uint8
// lives: int
// noFire: bool
// powerup: bool (from this index to plus 9)
// score: int
// scoreDisplayed: int
// shieldTime, shieldType: int
// xOrg, yOrg: float
// xPos, yPos: float
// ORDER

// NOT ADDED
// antiGrav: bool
// ballTime: int
// blink: int
// boss, bossActivated: int, bool
// buttstomp: int
// cameraX, cameraY: float
// direction: int8
// doubleJumpCount: int
// fly: int
// frozen: int8
// fur: uint32
// helicopter, helicopterElapsed: int
// idle: int
// invincibility, invisibility: int, bool
// jumpStrength: float
// keyDown, keyFire, keyJump, keyLeft, keyRight, keyRun, keySelect, keyUp: bool
// light, lighting: int8, uint8
// lightType: LIGHT::Type
// name: string (unrecommended)
// noclipMode: bool
// platform: int
// running: bool
// specialMove: int
// spriteMode: SPRITE::Mode
// spriteParam: uint8
// stoned: int
// timerPersists: bool
// timerState: TIMER::State
// timerTime: int
// warpID: int
// NOT ADDED

// CANT ADD
// clientID: int
// curAnim: uint16
// curFrame: uint
// currTile: int
// deaths: int
// flag: int
// frameID: uint8
// isAdmin: bool
// isConnecting: bool
// isIdle: bool
// isInGame: bool
// isJailed: bool
// isLocal: bool
// isOut: bool
// isSpectating: bool
// isZombie: bool
// laps: int
// lapTimeBest: int
// lapTimeCurrent: int
// lapTimes[5]: int
// localPlayerID: int
// lrsLives: int
// nameUnformatted: string (already automatically set when name is set)
// playerID: int8
// roasts: int
// setID: ANIM::Set
// team: TEAM::Color
// CANT ADD

// "saveObjects" WIP

class ProgressManager
{
    bool _debugOn = true;
    bool saveObjects = false;

    int mainItemsLength = 39 + boolToInt(_debugOn);
    int objectItemsLength = 46 + boolToInt(_debugOn);

    ProgressManager() {}

    array<string> _getObjectItems(jjOBJ @obj)
    {
        array<string> items;

        // items.insertLast(objectsLength);
        items.insertLast(formatInt(obj.age));
        items.insertLast(formatInt(obj.animSpeed));
        // items.insertLast(formatInt(obj.behavior));
        // items.insertLast(formatInt(obj.bulletHandling));
        items.insertLast(formatBoolToStringInteger(obj.causesRicochet));
        items.insertLast(formatInt(obj.counter));
        items.insertLast(formatUInt(obj.counterEnd));
        items.insertLast(formatInt(obj.creator));
        items.insertLast(formatInt(obj.creatorID));
        // creatorType
        items.insertLast(formatInt(obj.curAnim));
        items.insertLast(formatInt(obj.curFrame));
        items.insertLast(formatBoolToStringInteger(obj.deactivates));
        items.insertLast(formatInt(obj.direction));
        items.insertLast(formatUInt(obj.doesHurt));
        items.insertLast(formatInt(obj.energy));
        items.insertLast(formatUInt(obj.eventID));
        items.insertLast(formatInt(obj.frameID));
        items.insertLast(formatUInt(obj.freeze));
        // isActive == (obj.behavior != BEHAVIOR::INACTIVE)
        items.insertLast(formatBoolToStringInteger(obj.isActive));
        items.insertLast(formatBoolToStringInteger(obj.isBlastable));
        items.insertLast(formatBoolToStringInteger(obj.isFreezable));
        items.insertLast(formatBoolToStringInteger(obj.isTarget));
        items.insertLast(formatUInt(obj.justHit));
        items.insertLast(formatInt(obj.killAnim));
        items.insertLast(formatInt(obj.light));
        // lightType
        // oldState
        // playerHandling
        items.insertLast(formatUInt(obj.points));
        items.insertLast(formatUInt(obj.objectID));
        items.insertLast(formatBoolToStringInteger(obj.scriptedCollisions));
        items.insertLast(formatInt(obj.special));
        // state
        items.insertLast(formatBoolToStringInteger(obj.triggersTNT));

        // var - added, just a section
        items.insertLast(formatInt(obj.var[1]));
        items.insertLast(formatInt(obj.var[2]));
        items.insertLast(formatInt(obj.var[3]));
        items.insertLast(formatInt(obj.var[4]));
        items.insertLast(formatInt(obj.var[5]));
        items.insertLast(formatInt(obj.var[6]));
        items.insertLast(formatInt(obj.var[7]));
        items.insertLast(formatInt(obj.var[8]));
        items.insertLast(formatInt(obj.var[9]));
        items.insertLast(formatInt(obj.var[10]));

        items.insertLast(formatFloat(obj.xAcc));
        items.insertLast(formatFloat(obj.xOrg));
        items.insertLast(formatFloat(obj.xPos));
        items.insertLast(formatFloat(obj.xSpeed));

        items.insertLast(formatFloat(obj.yAcc));
        items.insertLast(formatFloat(obj.yOrg));
        items.insertLast(formatFloat(obj.yPos));
        items.insertLast(formatFloat(obj.ySpeed));

        if (_debugOn)
            items.insertLast("objend");

        return items;
    }

    void _loadObjectItems(array<string> items, bool deletePreviousItems = true)
    {
        dictionary info = {};
        info.set("age", parseInt(items[0]));
        info.set("animSpeed", parseInt(items[1]));
        info.set("causesRicochet", parseBool(items[2]));
        info.set("counter", parseInt(items[3]));
        info.set("counterEnd", parseUInt(items[4]));
        info.set("creator", parseInt(items[5]));
        info.set("creatorID", parseInt(items[6]));
        info.set("curAnim", parseInt(items[7]));
        info.set("curFrame", parseInt(items[8]));
        info.set("deactivates", parseBool(items[9]));
        info.set("direction", parseInt(items[10]));
        info.set("doesHurt", parseUInt(items[11]));
        info.set("energy", parseInt(items[12]));
        info.set("eventID", parseUInt(items[13]));
        info.set("frameID", parseInt(items[14]));
        info.set("freeze", parseUInt(items[15]));
        info.set("isActive", parseBool(items[16]));
        info.set("isBlastable", parseBool(items[17]));
        info.set("isFreezable", parseBool(items[18]));
        info.set("isTarget", parseBool(items[19]));
        info.set("justHit", parseUInt(items[20]));
        info.set("killAnim", parseInt(items[21]));
        info.set("light", parseInt(items[22]));
        info.set("points", parseUInt(items[23]));
        info.set("objectID", parseUInt(items[24]));
        info.set("scriptedCollisions", parseBool(items[25]));
        info.set("special", parseInt(items[26]));
        info.set("triggersTNT", parseBool(items[27]));
        info.set("var[1]", parseInt(items[28]));
        info.set("var[2]", parseInt(items[29]));
        info.set("var[3]", parseInt(items[30]));
        info.set("var[4]", parseInt(items[31]));
        info.set("var[5]", parseInt(items[32]));
        info.set("var[6]", parseInt(items[33]));
        info.set("var[7]", parseInt(items[34]));
        info.set("var[8]", parseInt(items[35]));
        info.set("var[9]", parseInt(items[36]));
        info.set("var[10]", parseInt(items[37]));
        info.set("xAcc", parseFloat(items[38]));
        info.set("xOrg", parseFloat(items[39]));
        info.set("xPos", parseFloat(items[40]));
        info.set("xSpeed", parseFloat(items[41]));
        info.set("yAcc", parseFloat(items[42]));
        info.set("yOrg", parseFloat(items[43]));
        info.set("yPos", parseFloat(items[44]));
        info.set("ySpeed", parseFloat(items[45]));

        int objectId = jjAddObject(uint(info["eventID"]), float(info["xPos"]), float(info["yPos"]));
        jjOBJ @object = jjObjects[objectId];

        object.age = int(info["age"]);
        object.animSpeed = int(info["animSpeed"]);
        object.causesRicochet = bool(info["causesRicochet"]);
        object.counter = int(info["counter"]);
        object.counterEnd = uint(info["counterEnd"]);
        object.creator = int(info["creator"]);
        object.creatorID = int(info["creatorID"]);
        object.curAnim = int(info["curAnim"]);
        object.curFrame = int(info["curFrame"]);
        object.deactivates = bool(info["deactivates"]);
        object.direction = int(info["direction"]);
        object.doesHurt = uint(info["doesHurt"]);
        object.energy = int(info["energy"]);
        object.eventID = uint(info["eventID"]);
        object.frameID = int(info["frameID"]);
        object.freeze = uint(info["freeze"]);
        // object.isActive = bool(info["isActive"]);
        object.isBlastable = bool(info["isBlastable"]);
        object.isFreezable = bool(info["isFreezable"]);
        object.isTarget = bool(info["isTarget"]);
        object.justHit = uint(info["justHit"]);
        object.killAnim = int(info["killAnim"]);
        object.light = int(info["light"]);
        object.points = uint(info["points"]);
        // object.objectID = uint(info["objectID"]);
        object.scriptedCollisions = bool(info["scriptedCollisions"]);
        object.special = int(info["special"]);
        object.triggersTNT = bool(info["triggersTNT"]);
        object.var[1] = int(info["var[1]"]);
        object.var[2] = int(info["var[2]"]);
        object.var[3] = int(info["var[3]"]);
        object.var[4] = int(info["var[4]"]);
        object.var[5] = int(info["var[5]"]);
        object.var[6] = int(info["var[6]"]);
        object.var[7] = int(info["var[7]"]);
        object.var[8] = int(info["var[8]"]);
        object.var[9] = int(info["var[9]"]);
        object.var[10] = int(info["var[10]"]);
        object.xAcc = float(info["xAcc"]);
        object.xOrg = float(info["xOrg"]);
        // object.xPos = float(info["xPos"]);
        object.xSpeed = float(info["xSpeed"]);
        object.yAcc = float(info["yAcc"]);
        object.yOrg = float(info["yOrg"]);
        // object.yPos = float(info["yPos"]);
        object.ySpeed = float(info["ySpeed"]);
    }

    array<string> _getPlayerItems(jjPLAYER @player)
    {
        array<string> items;

        items.insertLast(formatInt(player.ammo[1]));
        items.insertLast(formatInt(player.ammo[2]));
        items.insertLast(formatInt(player.ammo[3]));
        items.insertLast(formatInt(player.ammo[4]));
        items.insertLast(formatInt(player.ammo[5]));
        items.insertLast(formatInt(player.ammo[6]));
        items.insertLast(formatInt(player.ammo[7]));
        items.insertLast(formatInt(player.ammo[8]));
        items.insertLast(formatInt(player.ammo[9]));

        items.insertLast(formatCharacter(player.charCurr));
        items.insertLast(formatCharacter(player.charOrig));

        items.insertLast(formatInt(player.coins));
        items.insertLast(formatInt(player.currWeapon));
        items.insertLast(formatInt(player.fastfire));
        items.insertLast(formatInt(player.food));

        items.insertLast(formatInt(player.gems[GEM::RED]));
        items.insertLast(formatInt(player.gems[GEM::GREEN]));
        items.insertLast(formatInt(player.gems[GEM::BLUE]));
        items.insertLast(formatInt(player.gems[GEM::PURPLE]));

        items.insertLast(formatInt(player.health));
        items.insertLast(formatInt(player.lives));
        items.insertLast(formatBoolToStringInteger(player.noFire));

        items.insertLast(formatBoolToStringInteger(player.powerup[1]));
        items.insertLast(formatBoolToStringInteger(player.powerup[2]));
        items.insertLast(formatBoolToStringInteger(player.powerup[3]));
        items.insertLast(formatBoolToStringInteger(player.powerup[4]));
        items.insertLast(formatBoolToStringInteger(player.powerup[5]));
        items.insertLast(formatBoolToStringInteger(player.powerup[6]));
        items.insertLast(formatBoolToStringInteger(player.powerup[7]));
        items.insertLast(formatBoolToStringInteger(player.powerup[8]));
        items.insertLast(formatBoolToStringInteger(player.powerup[9]));

        items.insertLast(formatInt(player.score));
        items.insertLast(formatInt(player.scoreDisplayed));
        items.insertLast(formatInt(player.shieldTime));
        items.insertLast(formatInt(player.shieldType));

        items.insertLast(formatFloat(player.xOrg));
        items.insertLast(formatFloat(player.xPos));
        items.insertLast(formatFloat(player.yOrg));
        items.insertLast(formatFloat(player.yPos));
        if (_debugOn)
            items.insertLast("playerend");

        return items;
    }

    void _loadPlayerItems(jjPLAYER @player, array<string> items)
    {
        player.ammo[1] = parseInt(items[0]);
        player.ammo[2] = parseInt(items[1]);
        player.ammo[3] = parseInt(items[2]);
        player.ammo[4] = parseInt(items[3]);
        player.ammo[5] = parseInt(items[4]);
        player.ammo[6] = parseInt(items[5]);
        player.ammo[7] = parseInt(items[6]);
        player.ammo[8] = parseInt(items[7]);
        player.ammo[9] = parseInt(items[8]);

        player.morphTo(parseCharacter(items[9]), false);
        player.charOrig = parseCharacter(items[10]);

        player.coins = parseInt(items[11]);
        player.currWeapon = parseUInt(items[12]);
        player.fastfire = parseInt(items[13]);
        player.food = parseInt(items[14]);

        player.gems[GEM::RED] = parseInt(items[15]);
        player.gems[GEM::GREEN] = parseInt(items[16]);
        player.gems[GEM::BLUE] = parseInt(items[17]);
        player.gems[GEM::PURPLE] = parseInt(items[18]);

        player.health = parseUInt(items[19]);
        player.lives = parseInt(items[20]);
        player.noFire = parseBool(items[21]);

        player.powerup[1] = parseBool(items[22]);
        player.powerup[2] = parseBool(items[23]);
        player.powerup[3] = parseBool(items[24]);
        player.powerup[4] = parseBool(items[25]);
        player.powerup[5] = parseBool(items[26]);
        player.powerup[6] = parseBool(items[27]);
        player.powerup[7] = parseBool(items[28]);
        player.powerup[8] = parseBool(items[29]);
        player.powerup[9] = parseBool(items[30]);

        player.score = parseInt(items[31]);
        player.scoreDisplayed = parseInt(items[32]);
        player.shieldTime = parseInt(items[33]);
        player.shieldType = parseInt(items[34]);

        player.xOrg = parseFloat(items[35]);
        player.xPos = parseFloat(items[36]);
        player.yOrg = parseFloat(items[37]);
        player.yPos = parseFloat(items[38]);
    }

    bool save(jjPLAYER @player, int saveId, array<string> customItemsData)
    {
        array<string> mainItems = _getPlayerItems(player);

        string name = ("progressManager-" + jjLevelFileName + "-" + formatInt(saveId) + ".asdat");

        int otSize = 0;

        for (int i = 1; i < jjObjectCount; i++)
        {
            jjOBJ @obj = jjObjects[i];

            array<string> objectItems = _getObjectItems(obj);

            for (int i2 = 0; i2 < objectItemsLength; i2++)
            {
                otSize += 1;
            }

            otSize += 1;
        }

        jjSTREAM file;

        file.push(mainItemsLength +
                  (this.saveObjects ? otSize : 0) +
                  customItemsData.length() + 1);

        for (int i = 0; i < mainItemsLength; i++)
        {
            file.push(mainItems[i]);
        }

        if (this.saveObjects == true)
        {
            file.push(formatInt(jjObjectCount - 1));

            for (int i = 1; i < jjObjectCount; i++)
            {
                jjOBJ @obj = jjObjects[i];

                array<string> objectItems = _getObjectItems(obj);

                for (int i2 = 0; i2 < objectItemsLength; i2++)
                {
                    file.push(objectItems[i2]);
                }
            }
        }

        for (uint i = 0; i < customItemsData.length(); i++)
        {
            file.push(customItemsData[i]);
        }

        return file.save(name);
    }

    array<string> load(jjPLAYER @player, int saveId, bool delPreviousObjects = true)
    {
        string name = ("progressManager-" + jjLevelFileName + "-" + formatInt(saveId) + ".asdat");

        array<string> items;

        jjSTREAM file(name);

        uint length;

        if (file.pop(length))
        {
            items.resize(length);

            for (uint i = 0; i < length; i++)
            {
                file.pop(items[i]);
            }
        }
        else
        {
            jjConsole("[STVprogress] Failed to pop length (index 0)");
        }

        _loadPlayerItems(player, items);

        int objectCount = parseInt(items[mainItemsLength]);

        for (int objectIndex = 0; objectIndex < objectCount; objectIndex++)
        {
            array<string> itemsClone = cloneStringArray(items);
            itemsClone.removeRange(0, mainItemsLength + 1 + (objectCount * objectItemsLength));
            itemsClone.removeRange(0, objectItemsLength);

            _loadObjectItems(itemsClone, delPreviousObjects);
        }

        jjConsole("[STVprogress] ObjectCount " + items[mainItemsLength]);

        if (objectCount == 0)
        {
            items.removeRange(0, mainItemsLength + 1);
        }
        else
        {
            items.removeRange(0, mainItemsLength + (objectCount * objectItemsLength));
        }

        return items;
    }
};
