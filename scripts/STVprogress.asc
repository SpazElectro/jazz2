#pragma require "STVutil.asc"

#include "STVutil.asc"

// ORDER
    // length: number (mainItemsLength + customItemsDataLength)
    // ammo: int (from this index to plus 9)
    // charCurr: CHAR::Char (read-only)
    // charOrig: CHAR::Char
    // coins: int
    // currWeapon: uint8
    // deaths: int
    // fastfire: int
    // food: int
    // gem: int (from this index to plus 4)
    // health: uint8
    // lives: int
    // lrsLives: int
    // noFire: bool
    // powerup: bool (from this index to plus 9)
    // score: int
    // scoreDisplayed: int
    // shieldTime: int
    // shieldType: int
    // xAcc: float
    // xOrg: float
    // xPos: float
    // xSpeed: float
    // yAcc: float
    // yOrg: float
    // yPos: float
    // ySpeed: float
// ORDER

class ProgressManager
{
    int mainItemsLength = 45;

    ProgressManager() {}

    array<string> _getMainItems(jjPLAYER@ player) {
        array<string> items;

        // ammo
        items.push_back(player.ammo[1]);
        items.push_back(player.ammo[2]);
        items.push_back(player.ammo[3]);
        items.push_back(player.ammo[4]);
        items.push_back(player.ammo[5]);
        items.push_back(player.ammo[6]);
        items.push_back(player.ammo[7]);
        items.push_back(player.ammo[8]);
        items.push_back(player.ammo[9]);
        
        items.push_back(player.charCurr);
        items.push_back(player.charOrig);
        
        items.push_back(string(player.coins))
        items.push_back(string(player.currWeapon))
        items.push_back(string(player.deaths))
        items.push_back(string(player.fastfire))
        items.push_back(string(player.food))
        
        // gems
        items.push_back(string(player.gems[1]))
        items.push_back(string(player.gems[2]))
        items.push_back(string(player.gems[3]))
        items.push_back(string(player.gems[4]))
        
        items.push_back(string(player.lives));
        items.push_back(string(player.lrsLives));
        items.push_back(string(player.noFire));

        // powerup
        items.push_back(string(player.powerup[1]));
        items.push_back(string(player.powerup[2]));
        items.push_back(string(player.powerup[3]));
        items.push_back(string(player.powerup[4]));
        items.push_back(string(player.powerup[5]));
        items.push_back(string(player.powerup[6]));
        items.push_back(string(player.powerup[7]));
        items.push_back(string(player.powerup[8]));
        items.push_back(string(player.powerup[9]));

        items.push_back(string(player.score));
        items.push_back(string(player.scoreDisplayed));
        items.push_back(string(player.shieldTime));
        items.push_back(string(player.shieldType));
        
        items.push_back(string(player.xAcc));
        items.push_back(string(player.xOrg));
        items.push_back(string(player.xPos));
        items.push_back(string(player.xSpeed));
        
        items.push_back(string(player.yAcc));
        items.push_back(string(player.yOrg));
        items.push_back(string(player.yPos));
        items.push_back(string(player.ySpeed));

        return items;
    }

    void _loadPlayerItems(jjPLAYER@ player, array<string> items) {
        player.ammo[1] = items[1];
        player.ammo[2] = items[2];
        player.ammo[3] = items[3];
        player.ammo[4] = items[4];
        player.ammo[5] = items[5];
        player.ammo[6] = items[6];
        player.ammo[7] = items[7];
        player.ammo[8] = items[8];
        player.ammo[9] = items[9];

        player.morphTo(items[10], false);
        player.charOrig = items[11];

        player.coins = int(items[12]);
        player.currWeapon = uint8(items[13]);
        player.deaths = int(items[14]);
        player.fastfire = int(items[15]);
        player.food = int(items[16]);

        player.gem[1] = int(items[17]);
        player.gem[2] = int(items[18]);
        player.gem[3] = int(items[19]);
        player.gem[4] = int(items[20]);
        
        player.health = uint8(items[21]);
        player.lives = int(items[22]);
        player.lrsLives = int(items[23]);
        player.noFire = bool(items[24]);
        
        player.powerup[1] = items[25];
        player.powerup[2] = items[26];
        player.powerup[3] = items[27];
        player.powerup[4] = items[28];
        player.powerup[5] = items[29];
        player.powerup[6] = items[30];
        player.powerup[7] = items[31];
        player.powerup[8] = items[32];
        player.powerup[9] = items[33];

        player.score = items[34];
        player.scoreDisplayed = items[35];
        player.shieldTime = int(items[36]);
        player.shieldType = int(items[37]);
        
        player.xAcc = float(items[38]);
        player.xOrg = float(items[39]);
        player.xPos = float(items[40]);
        player.xSpeed = float(items[41]);

        player.yAcc = float(items[42]);
        player.yOrg = float(items[43]);
        player.yPos = float(items[44]);
        player.ySpeed = float(items[45]);

        
    }

    bool save(jjPLAYER@ player, int saveId, array<string> customItemsData) {
        array<string> mainItems = _getMainItems(player);

        string name = ("progressManager-" + jjLevelFileName + "-" + formatInt(saveId) + ".asdat");
        
        jjSTREAM file;
        file.push(mainItemsLength + customItemData.length());

        for (uint i = 0; i < mainItemsLength; i++) {
            file.push(mainItems[i]);
        }

        for (uint i = 0; i < customItemData.length(); i++) {
            file.push(customItemData[i]);
        }

        return file.save(name);
    }

    array<string> load(jjPLAYER@ player, int saveId) {
        string name = ("progressManager-" + jjLevelFileName + "-" + formatInt(saveId) + ".asdat");

        array<string> items;

        jjSTREAM file(name);

        uint length;

        if (file.pop(length)) {
            items.resize(length);
            
            for (int i = 0; i < length; i++) {
                file.pop(items[i]);
            }
        } else {
            jjConsole("Failed to pop length (index 0)");
        }

        _loadPlayerItems(player, items);

        return items;
    }
};
