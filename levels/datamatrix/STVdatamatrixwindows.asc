#pragma require "STVutil.asc"

#include "STVutil.asc"

// for intellisense
#include "../../scripts/STVutil.asc"

enum WINDOW_FLAG {
    VISIBLE,
    EXIT_BUTTON,
    DRAGGABLE
};

// base
class Window
{
    string title;
    array<WINDOW_FLAG> flags;
    Vector2@ position = Vector2(0, 0);
    Vector2@ size = Vector2(200, 150);
    Vector2@ contentPosition = Vector2(0, 0);

    bool isDragging = false;
    Vector2@ mouseOffset = Vector2(0, 0);
    
    Window(string title, array<WINDOW_FLAG> flags, Vector2@ position) {
        this.title = title;
        this.flags = flags;
        @this.position = position;
        @this.contentPosition = Vector2(this.position.x, this.position.y + (15/2) + 12);

        if(jjGetStringWidth(title, STRING::SMALL, normalTextAppearance) + 20 >= int(this.size.x)) {
            @this.size = Vector2(this.size.x + ((jjGetStringWidth(title, STRING::SMALL, normalTextAppearance) + 20) - this.size.x), this.size.y);
        }
    }

    void update()
    {
        // incase position gets set
        @this.contentPosition = Vector2(this.position.x, this.position.y + (15/2) + 12);
        
        if(flags.find(VISIBLE) < 0) return;

        if(jjKey[0x1] && Vector2(this.position.x + this.size.x - 15, this.position.y, 15, 15 + 4).collidingWithMouse(true)) {
            flags.removeAt(flags.find(VISIBLE));
            return;
        }

        if(flags.find(DRAGGABLE) >= 0)
        {
            int mouseX = jjMouseX;
            int mouseY = jjMouseY;

            bool isWithinTitleBar = (mouseX >= int(position.x) && mouseX <= int(position.x) + size.x &&
                                    mouseY >= int(position.y) && mouseY <= int(position.y) + 20);

            if(jjKey[0x1]) { if(isWithinTitleBar) { if(!isDragging) {
                isDragging = true;
                mouseOffset.x = mouseX - position.x;
                mouseOffset.y = mouseY - position.y;
            }}} else { isDragging = false; }

            if(isDragging)
            {
                int deltaX = mouseX - (position.x + mouseOffset.x);
                int deltaY = mouseY - (position.y + mouseOffset.y);

                position.x += deltaX;
                position.y += deltaY;
                
                // prevent laggy positions
                @this.contentPosition = Vector2(this.position.x, this.position.y + (15/2) + 12);
            }
        }
    }

    void draw(jjCANVAS@ canvas) {
        if(flags.find(VISIBLE) >= 0) {
            canvas.drawRectangle(xPixel: this.position.x, yPixel: this.position.y, width: this.size.x, height: this.size.y, color: 15);
            canvas.drawRectangle(xPixel: this.position.x, yPixel: this.position.y, width: this.size.x, height: 20, color: 66);
            if(flags.find(EXIT_BUTTON) >= 0) canvas.drawRectangle(xPixel: this.position.x + this.size.x - 15, yPixel: this.position.y, width: 15, height: 15 + 4, color: 24);
            canvas.drawString(xPixel: this.position.x, yPixel: this.position.y + (15/2) + 3, text: this.title, size: STRING::SMALL, mode: STRING::NORMAL, param: 0);
            if(flags.find(EXIT_BUTTON) >= 0) canvas.drawString(xPixel: this.position.x + this.size.x - 15, yPixel: this.position.y + (15/2) + 3, text: "X", size: STRING::SMALL, mode: STRING::NORMAL, param: 0);
        }
    }
}

class TestWindow: Window
{
    TestWindow(Vector2@ position) {
        super("TestWindow", array<WINDOW_FLAG> = {VISIBLE, EXIT_BUTTON, DRAGGABLE}, position);
    }

    void update() {
        Window::update();
    }

    void draw(jjCANVAS@ canvas) {
        Window::draw(canvas);

        if(flags.find(VISIBLE) >= 0) {
            canvas.drawString(xPixel: this.contentPosition.x, yPixel: this.contentPosition.y + 15, text: "lol", size: STRING::SMALL, mode: STRING::NORMAL, param: 0);
        }
    }
};