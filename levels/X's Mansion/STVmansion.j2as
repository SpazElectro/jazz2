#pragma require "STVutil.asc"
#pragma require "STVprogress.asc"
#pragma require "STVmansion_dialogue.asc"

#include "STVutil.asc"
#include "STVprogress.asc"
#include "STVmansion_dialogue.asc"

jjTEXTAPPEARANCE dialogueTextAppearance = jjTEXTAPPEARANCE(STRING::NORMAL);

ProgressManager @progress = ProgressManager();

int partId = 0;

array<string> partStrings;
array<int> partIntegers;
array<bool> partBools;
string part0Dialogue0 = jjRegexReplace(_part0Dialogue0, "\\$PLAYER", jjLocalPlayers[1].name + "~~");

void onLevelBegin()
{
    // text displayed
    partStrings.insertLast("");

    // last dialogue character tick
    partIntegers.insertLast(0);

    // finished dialogue
    partBools.insertLast(false);

    dialogueTextAppearance.pipe = STRING::SPECIALSIGN;
    dialogueTextAppearance.tilde = STRING::SPECIALSIGN;

    progress.saveObjects = false;

    jjConsole("[MS] started");
}

void onMain()
{
    if (partId == 0)
    {
        if(partIntegers[0] + 10 < jjGameTicks) {
            if (uint(jjGetStringWidth(part0Dialogue0, STRING::MEDIUM, normalTextAppearance)) >= jjResolutionWidth / 2)
            {
                partStrings[0] = part0Dialogue0.substr(0, partStrings[0].length() + 1) + "@";
            }
            else
            {
                partStrings[0] = part0Dialogue0.substr(0, partStrings[0].length() + 1);
            }

            if (getStringLength(partStrings[0]) >= getStringLength(part0Dialogue0))
            {
                partBools[0] = true;
            }

            partIntegers[0] = jjGameTicks;
        }
    }
}

bool onDrawScore(jjPLAYER @player, jjCANVAS @canvas)
{
    if (partId == 0)
    {
        // canvas.drawRectangle(0, 0, jjResolutionWidth, jjResolutionHeight, 0);

        canvas.drawString(
            jjResolutionWidth - jjGetStringWidth(partStrings[0], STRING::MEDIUM, normalTextAppearance),
            jjResolutionHeight / 2 - getStringHeight(partStrings[0]),
            partStrings[0], STRING::MEDIUM, dialogueTextAppearance, 0);
    }

    return false;
}

// saving
void onChat(int clientID, string &in stringReceived, CHAT::Type chatType)
{
    if (stringReceived == "!save")
    {
        array<string> infoArray;
        infoArray.insertLast(formatInt(jjGameTicks));

        progress.save(jjPlayersWithClientID(clientID)[0], 1, infoArray);

        jjConsole("Saved!");
    }

    if (stringReceived == "!load")
    {
        array<string> d = progress.load(jjPlayersWithClientID(clientID)[0], 1);

        jjConsole("Game tick was: " + d[0]);

        jjConsole("Loaded!");
    }
}