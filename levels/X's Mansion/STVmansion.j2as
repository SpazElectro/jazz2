#pragma require "STVutil.asc"
#pragma require "STVprogress.asc"
#pragma require "STVmansion_dialogue.asc"

#include "STVutil.asc"
#include "STVprogress.asc"

ProgressManager @progress = ProgressManager();

int partId = 0;

array<string> partStrings;
array<int> partIntegers;

void onLevelBegin()
{
    // text displayed
    partStrings[0] = "";

    progress.saveObjects = false;

    jjConsole("[MS] started");
}

void onMain()
{
    if (partId == 0)
    {
        if (uint(jjGetStringWidth(this.text, STRING::MEDIUM, normalTextAppearance)) >= this.box.y)
        {
            this.textDisplayed = this.text.substr(0, this.textDisplayed.length() + 1) + "@";
        }
        else
        {
            this.textDisplayed = this.text.substr(0, this.textDisplayed.length() + 1);
        }

        if (getStringLength(this.textDisplayed) >= getStringLength(this.text))
        {
            this.finished = true;
        }

        lastCharTick = jjGameTicks;
    }
}

bool onDrawScore(jjPLAYER @player, jjCANVAS @canvas)
{
    if (partId == 0)
    {
        canvas.drawRectangle(0, 0, jjResolutionWidth, jjResolutionHeight, 0);

        canvas.drawString(
            jjResolutionWidth / 2 - jjGetStringWidth(partStrings[0], STRING::MEDIUM, normalTextAppearance),
            jjResolutionHeight / 2 - getStringHeight(partStrings[0]),
            partStrings[0], STRING::MEDIUM, STRING::NORMAL, 15);
    }

    return false;
}

// saving
void onChat(int clientID, string &in stringReceived, CHAT::Type chatType)
{
    if (stringReceived == "!save")
    {
        array<string> infoArray;
        infoArray.insertLast(formatInt(jjGameTicks));

        progress.save(jjPlayersWithClientID(clientID)[0], 1, infoArray);

        jjConsole("Saved!");
    }

    if (stringReceived == "!load")
    {
        array<string> d = progress.load(jjPlayersWithClientID(clientID)[0], 1);

        jjConsole("Game tick was: " + d[0]);

        jjConsole("Loaded!");
    }
}