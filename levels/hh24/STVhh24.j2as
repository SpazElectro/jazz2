const bool MLLESetupSuccessful = MLLE::Setup(); ///@MLLE-Generated
#include "MLLE-Include-1.6.asc" ///@MLLE-Generated
#pragma require "CrysilisV.j2t" ///@MLLE-Generated
#pragma require "Carrot1.j2t" ///@MLLE-Generated
#pragma require "Lomat.j2t" ///@MLLE-Generated
#pragma require "STVhh24.j2l" ///@MLLE-Generated
// This is an AngelScript file!
/*
	Holiday Hare 24
	Jazz Jackrabbit 2
	Idea points:
		- The level must be a Christmas-themed level
		- The level must be outside of the game world
		  (as in everything will be done by us,
		   the game engine will not be used)
		- The level must be fun to play
		- The level must be a single player level
		- The level must be an arcade level
		- The level must make people go "Wow, this was made in JJ2?"
		- The level must be very fascinating
		- The level must not need level design as I am awful at level design
	The idea:
		Space invaders but with Jazz Jackrabbit 2
		
*/
#pragma require "STVutil.asc"

#include "STVutil.asc"

#if __VERSION__ < 110
	#warn "Outdated version of AngelScript++!"
#endif

string compiledate = 
	%{__DATE__};
string compiletime =
	%{__TIME__};
string compileversion =
	%{__VERSION__};

jjPIXELMAP@ screen = jjPIXELMAP(1, 1);

void onLevelBegin() {
	// jjConsole("Compiled at " + compiledate + " " + compiletime);
	
	jjAnimSets[ANIM::FISH].load();
	screen[0, 0] = 1;
	@screen = screen.resize(jjResolutionWidth + 100, jjResolutionHeight + 100);
	refreshScreen();
}

void refreshScreen() {
	screen.save(jjAnimFrames[jjAnimations[jjAnimSets[ANIM::FISH].firstAnim].firstFrame]);
}

bool onDrawAmmo(jjPLAYER@ player, jjCANVAS@ canvas) {
	canvas.drawSprite(0, 0, ANIM::FISH, 0, 0, 0, SPRITE::NORMAL);
	return true;
}
bool onDrawHealth(jjPLAYER@ player, jjCANVAS@ canvas) { return true; }
bool onDrawLives(jjPLAYER@ player, jjCANVAS@ canvas) { return true; }
bool onDrawPlayerTimer(jjPLAYER@ player, jjCANVAS@ canvas) { return true; }
bool onDrawScore(jjPLAYER@ player, jjCANVAS@ canvas) { return true; }
bool onDrawGameModeHUD(jjPLAYER@ player, jjCANVAS@ canvas) { return true; }
