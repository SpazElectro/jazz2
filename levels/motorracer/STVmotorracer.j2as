/*
// psuedocode for all the packets

struct Vector2 {
	int x, y;
};

uint8 type = 0;
struct movepkt {
	/ if client
	uint8 id;
	/ endif
	Vector2 position;
	Vector2 velocity;
};

uint8 type = 1;
struct addplayerpkt {
	string name;
	int id;
};

uint8 type = 2;
struct remplayerpkt {
	int id;
};

// This is sent by all the clients when they are ready to start receiving information
uint8 type = 3;
struct readypkt {};

uint8 type = 4;
struct shootpkt {
	/ if client
	uint8 id;
	/ endif
	uint8 weapon;
};
*/

// god please give me power to finish this project
// -spaz electro

#pragma require "STVmotorracer_split.png"
#pragma require "STVutil.asc"

#include "STVutil.asc"

const ANIM::Set playerAnimSet = ANIM::CUSTOM[1];
Key@ leftKey;
Key@ rightKey;
Key@ jumpKey;

int min(int a, int b) {
	return a < b ? a : b;
}
int max(int a, int b) {
	return a > b ? a : b;
}

bool isChatting = false;
int bandwidthInThisSecond  = 0;
int bandwidthOutThisSecond = 0;
uint64 lastPKTtime = 0;

bool sendPacket(jjSTREAM &in packet, int toClientID = 0, uint toScriptModuleID = jjScriptModuleID) {
	bandwidthOutThisSecond += packet.getSize();
	return jjSendPacket(packet, toClientID, toScriptModuleID);
}

class MotorPlayer
{
	AnimatedSprite@ sprite;
	string name;
	bool isLocal;

	Vector2@ position;
	Vector2@ velocity;
	
	int speed;
	int jumpForce;

	int jumpHeld;
	bool isGrounded;

	int8 id;

	MotorPlayer(int8 id) {
		@this.sprite = AnimatedSprite(0, 0, 0, 0, 0.15, false);
		this.sprite.animSet = playerAnimSet;
		
		@this.position = Vector2((jjResolutionWidth/2)+64, 64);

		@this.velocity = Vector2(0, 0);

		this.isLocal = false;
		this.speed = 2;
		this.jumpForce = 25;
		this.jumpHeld = 0;
		this.isGrounded = false;
		this.id = id;
	}

	#pragma region base
	void update() {
		// physics
		if(!this.isGrounded)
			this.velocity.y += int((9.807)/3);

		// Add velocity to the position
		this.position.x += this.velocity.x;
		this.position.y += this.velocity.y;
		
		// Decrease velocity over time
		if(this.velocity.x > 0) {
			 this.velocity.x -= 1;
		} else if(this.velocity.x < 0) { this.velocity.x += 1; }
		if(this.velocity.y > 0) {
			 this.velocity.y -= 1;
		} else if(this.velocity.y < 0) { this.velocity.y += 1; }
		
		// Limit the bounds
		this.position.x = max(32, this.position.x);
		this.position.y = max(32, this.position.y);
		this.position.x = min(jjResolutionWidth-32, this.position.x);
		this.position.y = min(jjResolutionHeight-32, this.position.y);

		this.sprite.x = this.position.x;
		this.sprite.y = this.position.y;
		this.sprite.update();

		bool previouslyGrounded = this.isGrounded;
		// temporary
		this.isGrounded = this.position.y >= jjResolutionHeight-32;
		if(!previouslyGrounded && this.isGrounded)
			this.velocity.y = 0; // impact *sparkles*

		// makes the bike tilt up the faster you are
		this.sprite.angle = /*abs*/(this.velocity.x)*3;
		
		// controls

		if(this.isLocal) {
			bool anyInput = false;

			// dont gain velocity when colliding with the corners
			if(!(this.position.x <= 32))
				if(isKeyDown(leftKey) && !isChatting) {
					this.velocity.x -= this.speed; anyInput = true;
				}
			if(!(this.position.x >= jjResolutionWidth-32))
				if(isKeyDown(rightKey) && !isChatting) {
					this.velocity.x += this.speed; anyInput = true;
				}

			if(isKeyDown(jumpKey) && !isChatting) {
				if(this.isGrounded) {
					if(this.jumpHeld == -1)
						this.jumpHeld = 0;
					this.velocity.y -= this.jumpForce;
					anyInput = true;
				}

				this.jumpHeld += 15; // feedback
			} else {
				this.jumpHeld = 0;
			}

			if(this.jumpHeld > 0) {
				this.velocity.y -= 1;
				if(this.jumpHeld > 15) {
					this.jumpHeld = -1;
				}
			}

			if(anyInput)
				this.sendMovePacket();
		}
	}

	void draw(jjCANVAS@ canvas) {
		int width = jjGetStringWidth(this.name, STRING::SMALL, normalTextAppearance);

		canvas.drawString(
			this.position.x-(width/2),
			this.position.y-32,
			this.name,
			STRING::SMALL
		);

		this.sprite.draw(canvas);
	}

	void _update() {
		@motorPlayers[this.name] = this;
	}
	#pragma endregion

	#pragma region packets

	#pragma region recv
	bool recvMovePacket(jjSTREAM@ stream) {
		if(stream.getSize() != 4*4) // an int is 4 bytes, and we have 4 fields
			return false;

		stream.pop(this.position.x);
		stream.pop(this.position.y);
		stream.pop(this.velocity.x);
		stream.pop(this.velocity.y);

		return true;
	}
	#pragma endregion

	#pragma region send
	bool sendMovePacket() {
		uint8 type = 0;
		jjSTREAM stream;
		stream.push(type);
		if(jjIsServer)
			stream.push(this.id);
		stream.push(this.position.x);
		stream.push(this.position.y);
		stream.push(this.velocity.x);
		stream.push(this.velocity.y);

		// if we're the server
		// send to everyone except the person who moved
		// TODO check if this actually works because the bandwidth in/out says otherwise
		// maybe that's because our bandwidth in/out implementation doesn't check
		// if we're excluded?
		return sendPacket(stream, jjIsServer ? -this.id : 0);
	}
	#pragma endregion

	#pragma endregion
};

dictionary motorPlayers = {};
MotorPlayer@ localMotorPlayer;

void sendPlayerJoinPacket(string name, int8 id, int target = 0) {
	uint8 type = 1;
	jjSTREAM stream;
	stream.push(type);
	stream.push(id);
	stream.push(name);
	sendPacket(stream, target);
}

void sendPlayerLeavePacket(int8 id) {
	uint8 type = 2;
	jjSTREAM stream;
	stream.push(type);
	stream.push(id);
	sendPacket(stream);
}

MotorPlayer@ addPlayer(string name, int8 id) {
	MotorPlayer@ motorPlayer = MotorPlayer(id);
	motorPlayer.name = name;
	// jjConsole("Added player: " + name + " id: " + id);
	if(id == jjLocalPlayers[1].clientID) {
		// jjConsole("Found the local player! Name: " + name);
		motorPlayer.isLocal = true;
		@localMotorPlayer = motorPlayer;
	}
	motorPlayers.set(name, @motorPlayer);

	if(jjIsServer)
		sendPlayerJoinPacket(name, id);

	return motorPlayer;
}

MotorPlayer@ getMotorPlayerById(int8 id) {
	for(uint i = 0; i < motorPlayers.getKeys().length(); i++) {
		auto plr = cast<MotorPlayer@>(motorPlayers[motorPlayers.getKeys()[i]]);
		if(plr.id == id)
			return plr;
	}

	jjConsole("getMotorPlayerById returned null!");
	return null;
}

jjPLAYER@ getPlayerByClientID(int clientId) {
	for(uint i = 0; i < 32; i++) {
		if(jjPlayers[i].clientID == clientId) {
			return jjPlayers[i];
		}
	}

	jjConsole("getPlayerByClientID returned null!");
	return null;
}

void removePlayer(int8 id) {
	// jjConsole("I am a " + (jjIsServer ? "server" : "client") + ", deleting " + id);
	
	if(jjIsServer)
		sendPlayerLeavePacket(id);

	auto motorPlayer = getMotorPlayerById(id);
	if(@motorPlayer != null) {
		// jjConsole("Deleted " + id + "!");
		motorPlayers.delete(motorPlayer.name);
	} else {
		jjConsole("removePlayer()::motorPlayer is null! I am a " + (jjIsServer ? "server" : "client") + " ID: " + id);
	}
}

array<bool> activePlayersArray(32, false);
array<int8> activePlayersClientIDsArray(32, -1);

void onLevelBegin() {
	// jjConsole("Started!");

	@leftKey  = getKeyById("A");
	@rightKey = getKeyById("D");
	@jumpKey  = getKeyById("Space");

	jjAnimSets[playerAnimSet].load(
		jjPIXELMAP("STVmotorracer_split.png"),
		frameWidth: 64,
		frameHeight: 64,
		frameSpacingX: 4,
		frameSpacingY: 0,
		startY: 0,
		firstAnimToOverwrite: jjAnimSets[playerAnimSet]
	);

	if(jjIsServer) {
		addPlayer(jjLocalPlayers[1].nameUnformatted, jjLocalPlayers[1].clientID);
    } else {
		uint8 id = 3;
		jjSTREAM readyPacket;
		readyPacket.push(id);
		sendPacket(readyPacket);
	}
}

void onReceive(jjSTREAM &in packet, int clientID) {
	uint8 type;
	packet.pop(type);

	bandwidthInThisSecond += packet.getSize();
	// if(jjIsServer)
	// 	jjConsole("Recv: " + type + " from " + clientID);

	if(!jjIsServer) {
		switch(type) {
			// move
			case 0: {
				uint8 id;
				packet.pop(id);
				getMotorPlayerById(id).recvMovePacket(packet);
				break;
			}
			// join
			case 1: {
				uint8 id;
				string name;
				packet.pop(id);
				packet.pop(name);
				addPlayer(name, id);
				break;
			}
			// leave
			case 2: {
				uint8 id;
				packet.pop(id);
				removePlayer(id);
				break;
			}
			default: {
				jjConsole("Unknown packet with type: " + type);
				break;
			}
		}
	} else {
		switch(type) {
			// move
			case 0: {
				auto plr = getMotorPlayerById(clientID);
				plr.recvMovePacket(packet);
				plr.sendMovePacket();
				break;
			}
			// ready
			case 3: {
				// send all the other players that have joined
				for(uint i = 0; i < motorPlayers.getKeys().length(); i++) {
					sendPlayerJoinPacket(motorPlayers.getKeys()[i], cast<MotorPlayer@>(motorPlayers[motorPlayers.getKeys()[i]]).id, clientID);
					cast<MotorPlayer@>(motorPlayers[motorPlayers.getKeys()[i]]).sendMovePacket();
				}

				auto player = getPlayerByClientID(clientID);
				// jjConsole(player.nameUnformatted + " is ready!");
				addPlayer(player.nameUnformatted, clientID);

				break;
			}
			default: {
				jjConsole("Unknown packet with type: " + type);
				break;
			}
		}
	}
}

void onMain() {
	if(jjKey[jjKeyChat])
		isChatting = true;
	if(isChatting && (jjKey[27] || jjKey[13]))
		isChatting = false;

	for(uint i = 0; i < motorPlayers.getKeys().length(); i++)
		cast<MotorPlayer@>(motorPlayers[motorPlayers.getKeys()[i]]).update();
	
	if(jjIsServer) {
		for(uint i = 0; i < 32; i++) {
			if(activePlayersArray[i] && !jjPlayers[i].isActive) {
				// jjConsole(jjPlayers[i].nameUnformatted + " has left the game!");
				// jjPlayers[i].clientID here is going to be -1 so we use this array 
				removePlayer(activePlayersClientIDsArray[i]);
			}

			activePlayersArray[i] = jjPlayers[i].isActive;
			activePlayersClientIDsArray[i] = jjPlayers[i].clientID;
		}
	}

	if(jjUnixTimeSec() >= lastPKTtime+1) {
		lastPKTtime = jjUnixTimeSec();
		bandwidthInThisSecond = 0;
		bandwidthOutThisSecond = 0;
	}
}

bool onDrawAmmo(jjPLAYER@ player, jjCANVAS@ canvas) {
	canvas.drawRectangle(0, 0, jjResolutionWidth, jjResolutionHeight, 0);
	
	for(uint i = 0; i < motorPlayers.getKeys().length(); i++)
		cast<MotorPlayer@>(motorPlayers[motorPlayers.getKeys()[i]]).draw(canvas);

	if(@localMotorPlayer != null)
		canvas.drawString(0, 16, "||||Velocity: "+localMotorPlayer.velocity.x+", "+localMotorPlayer.velocity.y+" -| Bandwidth IN: " + bandwidthInThisSecond);
	
	canvas.drawString(0, 32, "|Player count: "+motorPlayers.getKeys().length()+" -| Bandwidth OUT: " + bandwidthOutThisSecond);
	canvas.drawString(0, 48, "-- MotorPlayer ids in order --");
	for(uint i = 0; i < motorPlayers.getKeys().length(); i++)
		canvas.drawString(0, 60+(i*12), "|||ID: " + (cast<MotorPlayer@>(motorPlayers[motorPlayers.getKeys()[i]]).id));

	return false;
}