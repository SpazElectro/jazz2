/*
// psuedocode for all the packets

struct Vector2 {
	int x, y;
};

uint8 type = 0;
struct movepkt {
	/ if client
	uint8 id;
	/ endif
	Vector2 position;
	Vector2 velocity;
};

uint8 type = 1;
struct addplayerpkt {
	string name;
	int id;
};

uint8 type = 2;
struct remplayerpkt {
	int id;
};

// This is sent by all the clients when they are ready to start receiving information
uint8 type = 3;
struct readypkt {};

uint8 type = 4;
struct shootpkt {
	/ if client
	uint8 id;
	/ endif
	uint8 weapon;
};
*/

// god please give me power to finish this project
// -spaz electro

#pragma require "STVmotorracer_split.png"
#pragma require "STVutil.asc"

#include "STVutil.asc"

// #define INFINITE_TILT
// #define DEBUG_MOTORPLAYER_IDS
#define TILT_NEGATIVE

const ANIM::Set playerAnimSet = ANIM::CUSTOM[1];
Key@ leftKey;
Key@ rightKey;
Key@ jumpKey;

int min(int a, int b) {
	return a < b ? a : b;
}
int max(int a, int b) {
	return a > b ? a : b;
}

bool isChatting = false;

float lerp(float a, float b, float t)
{
	return a + (b - a) * t;
}

class MotorPlayer
{
	AnimatedSprite@ sprite;
	string name;
	bool isLocal;

	Vector2@ position;
	Vector2@ velocity;

	int8 id;
	float prevPosX;

	MotorPlayer(int8 id) {
		@this.sprite = AnimatedSprite(0, 0, 0, 0, 0.15, false);
		this.sprite.animSet = playerAnimSet;
		this.sprite.spriteMode = SPRITE::PLAYER;

		@this.position = Vector2((jjResolutionWidth/2)+64, 64);
		@this.velocity = Vector2(0, 0);
		this.isLocal = false;
		this.id = id;
		this.prevPosX = 0;
	}

	#pragma region base
	void update() {
		// Decrease velocity over time
		const int VEL_SPEED = 2;
		if(this.velocity.x > 0) {
			 this.velocity.x -= VEL_SPEED;
		} else if(this.velocity.x < 0) { this.velocity.x += VEL_SPEED; }
		if(this.velocity.y > 0) {
			 this.velocity.y -= VEL_SPEED;
		} else if(this.velocity.y < 0) { this.velocity.y += VEL_SPEED; }

		this.sprite.x = this.position.x;
		this.sprite.y = this.position.y;
		this.sprite.update();

		this.velocity.x += int(jjP.xPos-this.prevPosX);
		this.prevPosX = jjP.xPos;

		const int MAX_ANGLE = 180;
		const int MAX_NEG_ANGLE = 90;
		if(this.velocity.x*3 >= MAX_ANGLE)
			this.velocity.x = MAX_ANGLE/3;
		if(this.velocity.x*3 < -MAX_NEG_ANGLE)
			this.velocity.x = -MAX_NEG_ANGLE/3;
		
		// makes the bike tilt up the faster you are
		#ifdef TILT_NEGATIVE
		this.sprite.angle = lerp(this.sprite.angle, this.velocity.x*3, 0.3);
		#else
		this.sprite.angle = lerp(this.sprite.angle, abs(this.velocity.x)*3, 0.3);
		#endif

		/*
		0 air
		721 ground

		702-703-712 solid going up
		704-705-715 solid going down
		*/
		int tileUnder = jjTileGet(4, this.position.x/32, (this.position.y/32)+1);
		float alpha = 0.3;
		// jjConsole(""+tileUnder);
		if(tileUnder == 702 || tileUnder == 703 || tileUnder == 712 || tileUnder == 700)
			this.sprite.angle = int(lerp(float(this.sprite.angle), 90.0, alpha));
		else if(tileUnder == 704 || tileUnder == 705 || tileUnder == 715 || tileUnder == 701)
			this.sprite.angle = int(lerp(float(this.sprite.angle), -90.0, alpha));
		else if(tileUnder == 721)
			this.sprite.angle = int(lerp(float(this.sprite.angle), 0.0, alpha*2));
	}

	void draw(jjCANVAS@ canvas, int clientID) {
		int width = jjGetStringWidth(this.name, STRING::SMALL, normalTextAppearance);

		canvas.drawString(
			this.position.x-(width/2),
			this.position.y-32,
			this.name,
			STRING::SMALL
		);

		this.sprite.spriteModeParam = clientID;
		this.sprite.draw(canvas);
	}

	void _update() {
		// Why is this in update?
		@motorPlayers[this.name] = this;
	}
	#pragma endregion
};

dictionary motorPlayers = {};
MotorPlayer@ localMotorPlayer;

MotorPlayer@ addPlayer(string name, int8 id) {
	MotorPlayer@ motorPlayer = MotorPlayer(id);
	motorPlayer.name = name;
	// jjConsole("Added player: " + name + " id: " + id);
	if(id == jjLocalPlayers[1].clientID) {
		// jjConsole("Found the local player! Name: " + name);
		motorPlayer.isLocal = true;
		@localMotorPlayer = motorPlayer;
	}
	motorPlayers.set(name, @motorPlayer);

	return motorPlayer;
}

MotorPlayer@ getMotorPlayerById(int8 id) {
	for(uint i = 0; i < motorPlayers.getKeys().length(); i++) {
		auto plr = cast<MotorPlayer@>(motorPlayers[motorPlayers.getKeys()[i]]);
		if(plr.id == id)
			return plr;
	}

	jjConsole("getMotorPlayerById returned null!");
	return null;
}

jjPLAYER@ getPlayerByClientID(int clientId) {
	for(uint i = 0; i < 32; i++) {
		if(jjPlayers[i].clientID == clientId) {
			return jjPlayers[i];
		}
	}

	jjConsole("getPlayerByClientID returned null!");
	return null;
}

void removePlayer(int8 id) {
	// jjConsole("I am a " + (jjIsServer ? "server" : "client") + ", deleting " + id);

	auto motorPlayer = getMotorPlayerById(id);
	if(@motorPlayer != null) {
		// jjConsole("Deleted " + id + "!");
		motorPlayers.delete(motorPlayer.name);
	} else {
		jjConsole("removePlayer()::motorPlayer is null! I am a " + (jjIsServer ? "server" : "client") + " ID: " + id);
	}
}

array<bool> activePlayersArray(32, false);
array<int8> activePlayersClientIDsArray(32, -1);

void onLevelBegin() {
	// jjConsole("Started!");

	@leftKey  = getKeyById("A");
	@rightKey = getKeyById("D");
	@jumpKey  = getKeyById("Space");

	jjAnimSets[playerAnimSet].load(
		jjPIXELMAP("STVmotorracer_split.png"),
		frameWidth: 64,
		frameHeight: 64,
		frameSpacingX: 4,
		frameSpacingY: 0,
		startY: 0,
		firstAnimToOverwrite: jjAnimSets[playerAnimSet]
	);

	if(jjIsServer) {
		addPlayer(jjLocalPlayers[1].nameUnformatted, jjLocalPlayers[1].clientID);
    }

	// remove all abilities
	array<CHAR::Char> characters = {CHAR::JAZZ, CHAR::SPAZ, CHAR::LORI};
	for(uint i = 0; i < characters.length(); i++) {
		jjCHARACTER@ character = jjCharacters[characters[i]];
		character.airJump = AIR::NONE;
		character.doubleJumpCountMax = 0;
		character.groundJump = GROUND::CROUCH;
	}
	
	jjGenerateSettableTileArea(4, 0, 0, 255, 63);
	for(int x = 0; x < 255; x += chunkSize) {
		// jjConsole("Generate: "+x);
		generateTilesAt(x/chunkSize);
	}
}

int chunkSize = 32;
int chunkHeight = 16;

void generateTilesAt(int xChunk) {
	int startX = xChunk * chunkSize;
	int startY = 16;

	for(int i = 0; i < chunkSize; i++) {
		jjTileSet(4, startX+i, startY, 721);
		generateGrassUnder(startX+i, startY);
	}
	
	// generateRampAt(startX+8, startY, 4);
	// generateDownRampAt(
	// 	startX
	// 	+8   // from previous
	// 	+14   // 4*2
	// 	+10, // constant
	// 	startY, 4, startY);
	// generateRampAt(startX+32, startY, 5);
	// generateDownRampAt(
	// 	startX
	// 	+32   // from previous
	// 	+14   // 5*2
	// 	+10,  // constant
	// 	startY, 5, startY);
	
	bool previousIsRamp = false;
	for(int i = 0; i < chunkSize; i++) {
		if(getRandomNumber(min: 0, max: 10) == 1 && !previousIsRamp) {
			generateRampAt(startX+(getRandomNumber(min: 0, max: chunkSize)-16), startY, getRandomNumber(min: 0, max: 10));
			previousIsRamp = true;
		} else {
			previousIsRamp = false;
		}
	}
}

int MAX_ITERATIONS = 30;
int iterations = 0;

/*
	UP
	702-703
	712-713

	DOWN
	704-705
	714-715
*/
void generateRampAt(int xTile, int startY, int height, bool base = true) {
	int t = jjTileGet(4, xTile-1, startY);
	if(base && (t == 702 || t == 703 || t == 712 || t == 713 ||
	   t == 704 || t == 705 || t == 714 || t == 715 ||
	   t == 729)
	)
	   return;
	
	jjTileSet(4, xTile, startY, 712);
	jjTileSet(4, xTile, startY-1, 702);
	jjTileSet(4, xTile+1, startY, 713);
	jjTileSet(4, xTile+1, startY-1, 703);
	generateGrassUnder(xTile, startY);
	generateGrassUnder(xTile+1, startY);
	if(height != 0) {
		iterations += 1;
		if(iterations >= MAX_ITERATIONS) {
			jjConsole("upramp; Reached max iterations! Stopping!");
			iterations = 0;
			return;
		}

		generateRampAt(
			xTile+2,
			startY-1,
			height-1,
			false
		);
	}
	
	if(base)
		iterations = 0;
}

void generateDownRampAt(int xTile, int startY, int height, int targetHeight, bool base = true) {
	jjTileSet(4, xTile, startY, 714);
	jjTileSet(4, xTile, startY-1, 704);
	jjTileSet(4, xTile+1, startY, 715);
	jjTileSet(4, xTile+1, startY-1, 705);
	generateGrassUnder(xTile, startY);
	generateGrassUnder(xTile+1, startY);
	jjConsole("downramp; "+startY+" "+height+" "+targetHeight);
	if(height <= targetHeight) {
		iterations += 1;
		if(iterations >= MAX_ITERATIONS) {
			jjConsole("downramp; Reached max iterations! Stopping!");
			iterations = 0;
			return;
		}
		//jjConsole("iterate");

		generateDownRampAt(
			xTile-2,
			startY-1,
			height+2,
			targetHeight,
			false
		);
	}
	
	if(base)
		iterations = 0;
}

void generateGrassUnder(int xTile, int startY, int height = chunkHeight) {
	for(int y = 1; y < height; y++)
		jjTileSet(4, xTile, startY+y, 729);
}

void onMain() {
	if(jjKey[jjKeyChat])
		isChatting = true;
	if(isChatting && (jjKey[27] || jjKey[13]))
		isChatting = false;

	for(uint i = 0; i < motorPlayers.getKeys().length(); i++)
		cast<MotorPlayer@>(motorPlayers[motorPlayers.getKeys()[i]]).update();
	
	// TODO prevent spamming run to get a boost
	
	jjP.keyDown = false;
	// jjP.keyRight = true;

	localMotorPlayer.position.x = int(jjP.xPos);
	localMotorPlayer.position.y = int(jjP.yPos);
}

void onDrawLayer4(jjPLAYER@ player, jjCANVAS@ canvas) {
	for(uint i = 0; i < motorPlayers.getKeys().length(); i++)
		cast<MotorPlayer@>(motorPlayers[motorPlayers.getKeys()[i]]).draw(canvas, player.clientID);

}

bool onDrawAmmo(jjPLAYER@ player, jjCANVAS@ canvas) {
	// canvas.drawRectangle(0, 0, jjResolutionWidth, jjResolutionHeight, 0);

	if(@localMotorPlayer != null)
		canvas.drawString(0, 16, "||||Velocity: "+localMotorPlayer.velocity.x+", "+localMotorPlayer.velocity.y);

	#ifdef DEBUG_MOTORPLAYER_IDS
	canvas.drawString(0, 48, "-- MotorPlayer ids in order --");
	for(uint i = 0; i < motorPlayers.getKeys().length(); i++)
		canvas.drawString(0, 60+(i*12), "|||ID: " + (cast<MotorPlayer@>(motorPlayers[motorPlayers.getKeys()[i]]).id));
	#endif
	// TODO this overlaps with other debug text
	canvas.drawString(0, 48, "|||Position: "+localMotorPlayer.position.x+", "+localMotorPlayer.position.y);

	return false;
}

void onPlayerDraw(jjPLAYERDRAW& pd) {
	pd.sprite = false;
	pd.name = false;
}
bool onDrawScore(jjPLAYER@ player, jjCANVAS@ canvas) {
	return true;
}
bool onDrawGameModeHUD(jjPLAYER@ player, jjCANVAS@ canvas) {
	return true;
}
