#pragma name "customweapons"
#pragma require "STVutil.asc"

#include "STVutil.asc"

// for intellisense
#include "../../scripts/STVutil.asc"

// plan:
// make custom weapon class, which takes most properties from jjWEAPON
// how will we get these "custom weapons"? Weapon sets, weapon set 0
// is just the default game weapon set, other mutators can make their own weapons
// but they have to make and register a weapon set, a weapon set will have an
// array of the CustomWeapon class which you register in the constructor of the weapon set

int currentWeaponSet = 0;

namespace CustomWeapons {
    class CustomWeapon {
        // normal jjWEAPON properties
        bool defaultSample = true;
        int gemsLost = 0;
        int gemsLostPowerup = 0;
        bool gradualAim = false;
        bool infinite = false;
        int maximum = -1; // -1 == 99 in single player or cooperative, otherwise 50
        int multiplier = 1; // toaster uses 32
        bool replacedByBubbles = false;
        bool replacedByShield = false;
        bool replenishes = false;
        SPREAD::Spread spread = SPREAD::NORMAL;
        WEAPON::Style style = WEAPON::NORMAL;

        // custom properties
        CustomWeapons::CustomWeaponSet@ parentSet;

        CustomWeapon() {}

        void onUsage(jjPLAYER@ player) {}
        void onHeld(jjPLAYER@ player) {}
        void onDamage(jjPLAYER@ attacker, jjPLAYER@ victim, int damage) {}
    };

    class CustomWeaponSet {
        array<CustomWeapon@> customWeapons();

        CustomWeaponSet() {}
    }
};

array<CustomWeapons::CustomWeaponSet@> customWeaponSets();

void registerWeaponSet(CustomWeapons::CustomWeaponSet@ set) {
    customWeaponSets.insertLast(set);
}

void onLevelBegin() {
    jjConsole("Started!");

    // register the default weapons into 1 weapon set
    CustomWeapons::CustomWeaponSet@ defaultWeaponSet = CustomWeapons::CustomWeaponSet();

    for(int i = 1; i < 9; i++) {
        jjWEAPON@ weapon = jjWeapons[i];

        CustomWeapons::CustomWeapon@ customWeapon = CustomWeapons::CustomWeapon();
        customWeapon.defaultSample = weapon.defaultSample;
        customWeapon.gemsLost = weapon.gemsLost;
        customWeapon.gemsLostPowerup = weapon.gemsLostPowerup;
        customWeapon.gradualAim = weapon.gradualAim;
        customWeapon.infinite = weapon.infinite;
        customWeapon.maximum = weapon.maximum;
        customWeapon.multiplier = weapon.multiplier;
        customWeapon.replacedByBubbles = weapon.replacedByBubbles;
        customWeapon.replacedByShield = weapon.replacedByShield;
        customWeapon.replenishes = weapon.replenishes;
        customWeapon.spread = weapon.spread;
        customWeapon.style = weapon.style == 0 ? WEAPON::NORMAL : weapon.style == 1 ? WEAPON::MISSILE : weapon.style == 2 ? WEAPON::POPCORN : WEAPON::CAPPED;

        @customWeapon.parentSet = defaultWeaponSet;

        defaultWeaponSet.customWeapons.insertLast(customWeapon);
    }

    registerWeaponSet(defaultWeaponSet);

    CustomWeapons::CustomWeapon@ customWeapon = CustomWeapons::CustomWeapon();
    customWeapon.infinite = false;

    CustomWeapons::CustomWeaponSet@ testSet = CustomWeapons::CustomWeaponSet();
    testSet.customWeapons.insertLast(customWeapon);
    registerWeaponSet(testSet);

    jjConsole("Default weapon set has been registered!");

    keyPressCallbacks.insertLast(function(uint key) {
        if(key == getKeyById("P").code) {
            currentWeaponSet += 1;

            if(currentWeaponSet > customWeaponSets.length() - 1)
                currentWeaponSet = customWeaponSets.length() - 1;
        } else if(key == getKeyById("O").code) {
            currentWeaponSet -= 1;

            if(currentWeaponSet < 0)
                currentWeaponSet = 0;
        }
    });
}

void onMain() {
    updateKeys();
}

bool onDrawAmmo(jjPLAYER@ player, jjCANVAS@ canvas) {
    canvas.drawString(jjResolutionWidth / 2, 20, "Current weapon set: " + currentWeaponSet);
    canvas.drawString(jjResolutionWidth / 2, 40, "Weapon 0 infinite: " + customWeaponSets[currentWeaponSet].customWeapons[0].infinite);

    return false;
}