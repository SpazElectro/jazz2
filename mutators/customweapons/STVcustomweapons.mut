// main goal:
// making custom weapons with a weapons set feature without replacing the original weapons
//
// Version: 1.1
// Date: 8/8/2022
// Author: Steve
//

#pragma require "STVutil.asc"
#include "STVutil.asc"

int weaponSet = 0;
int lastWeaponSet = 0;
int maxWeaponSets = 2;

bool weaponSetCooldown = false;

AnimatedSprite@ sprite = AnimatedSprite(0, 0, 0, 0, 0.15, false);

array<int> original_unupgradedIds = {
    25,  // bouncer
    29,  // ice
    34,  // seeker
    49,  // rf
    57,  // toaster
    59,  // tnt
    62,  // fireball
    68   // electroblaster
};

array<int> original_upgradedIds = {
    24,  // bouncer
    28,  // ice
    33,  // seeker
    48,  // rf
    56,  // toaster
    58,  // tnt
    61,  // fireball
    67   // electroblaster
};

array<int> unupgradedIds;
array<int> upgradedIds;

array<int> oldWeaponAmmo;
array<int> weaponAmmo;

void onLevelBegin() {
    // start of custom weapons

    unupgradedIds.insertLast(68); // bouncer
    unupgradedIds.insertLast(62); // test

    upgradedIds.insertLast(67); // bouncer
    upgradedIds.insertLast(61); // test

    weaponAmmo.insertLast(50); // bouncer
    weaponAmmo.insertLast(30); // test

    // end of custom weapons
 
    jjAnimSets[65].load();

    jjConsole("[STV] Custom Weapons v1.1 by Steve has started!");
}

void onPlayerInput(jjPLAYER@ player) {
    if(jjKey[0x47] && !weaponSetCooldown) {
        weaponSet = (++weaponSet) % maxWeaponSets;
        weaponSetCooldown = true;

        TimerV(20, function() {
            weaponSetCooldown = false;
        });
    }

    // since the game thinks the weapon you want to equip has no ammo
    // we'll just bind them again but we'll check if the weapon set isnt 0

    // if(weaponSet != 0) {
        for(uint i = 0; i < 10; i++) {
            if(jjKey[0x30 + i] && player.currWeapon != i) {
                player.currWeapon = i;
            }
        }
    // }
}

bool upgraded(jjPLAYER@ player, int id) {
    return player.powerup[id];
}

void onPlayer(jjPLAYER@ player) {
    sprite.x = jjResolutionWidth - 88;
    sprite.y = jjResolutionHeight - 14;
    sprite.update();
}

bool onDrawAmmo(jjPLAYER@ player, jjCANVAS@ canvas) {
    if(player.currWeapon != 1) {
        sprite.animSet = ANIM::AMMO;
        sprite.spriteMode = SPRITE::NORMAL;

        if(upgraded(player, player.currWeapon)) {
            sprite.setId(original_upgradedIds[player.currWeapon - 2]);
        } else {
            sprite.setId(original_unupgradedIds[player.currWeapon - 2]);
        }
    } else {
        sprite.spriteMode = SPRITE::PLAYER;
        sprite.spriteModeParam = 0;

        if(sprite.animSet == ANIM::PLUS_AMMO && player.charCurr != CHAR::LORI) sprite.animSet = ANIM::AMMO;

        switch (player.charCurr)
        {
            case CHAR::SPAZ:
                if(upgraded(player, 1)) {
                    sprite.setId(19);
                } else {
                    sprite.animSet = ANIM::PICKUPS;
                    sprite.setId(30);
                }

                break;
            
            case CHAR::LORI:
                sprite.animSet = ANIM::PLUS_AMMO;
                sprite.setId(5);
                
                break;

            default:
                // default as jazz
                if(upgraded(player, 1)) {
                    sprite.setId(18);
                } else {
                    sprite.animSet = ANIM::PICKUPS;
                    sprite.setId(29);
                }

                break;
        }
    }

    if(weaponSet == 0) {
        for (uint i = 0; i < oldWeaponAmmo.length(); i++)
        {
            oldWeaponAmmo.removeAt(i);
        }

        for (int i = 0; i < 10; i++)
        {
            oldWeaponAmmo.insertLast(player.ammo[i]);
        }
    }
    
    if(weaponSet == 1 && player.currWeapon > upgradedIds.length) {
        weaponSet = 0;
        lastWeaponSet = 1;
    }

    if(weaponSet == 0 && lastWeaponSet != weaponSet) {
        jjConsole("ohoh");

        
        for (uint i = 0; i < 10; i++)
        {
            if(i < weaponAmmo.length()) {
                weaponAmmo[i] = player.ammo[i + 1];
            }
            
            player.ammo[i] = oldWeaponAmmo[i];
        }
    }
    
    if(weaponSet != 0 && lastWeaponSet != weaponSet) {
        jjConsole("ohohe");

        for (uint i = 0; i < weaponAmmo.length(); i++)
        {
            player.ammo[i + 1] = weaponAmmo[i];
        }
    }

    if(weaponSet == 1) {
        sprite.animSet = ANIM::AMMO;
        sprite.spriteMode = SPRITE::NORMAL;

        if(player.currWeapon == 1) {
            jjWeapons[1].infinite = false;
            jjWeapons[1].spread = SPREAD::RF;
        } else if(player.currWeapon == 2) {
            
        }

        if(upgraded(player, player.currWeapon)) {
            sprite.setId(upgradedIds[player.currWeapon - 1]);
        } else {
            sprite.setId(unupgradedIds[player.currWeapon - 1]);
        }
    }

    if(weaponSet == 0) {
        if(player.currWeapon == 1 && jjWeapons[1].infinite == false) {
            jjWeapons[1].infinite = true;
            jjWeapons[1].spread = SPREAD::NORMAL;
        }
    }

    lastWeaponSet = weaponSet;

    string ammo = "" + player.ammo[player.currWeapon];

    if(jjWeapons[player.currWeapon].infinite == true) ammo = "^";

    canvas.drawString(jjResolutionWidth - 80, jjResolutionHeight - 14, "x" + ammo, STRING::MEDIUM);

    sprite.draw(canvas);
    
    return true;
}

bool onCheat(string &in cheat) {
    if(cheat == "jjgod" or cheat == "jjguns") {
        for (uint weaponIndex = 0; weaponIndex < unupgradedIds.length(); weaponIndex++)
        {
            weaponAmmo[weaponIndex] = 50;
        }
    }

    return false;
}