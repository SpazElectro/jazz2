#pragma require "STVutil.asc"
#pragma require "STVmenu.asc"

#include "STVutil.asc"
#include "STVmenu.asc"

// for intellisense
#include "../../scripts/STVutil.asc"

bool toggled_on = true;

bool locatingItem = false;
string itemBeingLocated = "";

string settingsVersion = "0.1A";

array<int> upgradedIds;
array<int> unupgradedIds;

int gridSize = 10;

AnimatedSprite@ gun = AnimatedSprite(ANIM::AMMO, 0, 0, 0, 0.25, false);
AnimatedSprite@ flag = AnimatedSprite(ANIM::FLAG, 0, 0, 0, 0.15, false);

int snap(int spot) {
    return (spot + gridSize / 2) / gridSize * gridSize;
}

bool upgraded(jjPLAYER @player, int id)
{
    return player.powerup[id];
}

int idToSprite(jjPLAYER@ player, int id)
{
    if(id == 1) {
        if(gun.animSet == ANIM::PLUS_AMMO && player.charCurr != CHAR::LORI) gun.setAnimSet(ANIM::AMMO);

        if(player.charCurr == CHAR::JAZZ) {
            return 18; // jazz blaster
        } else if(player.charCurr == CHAR::SPAZ) {
            return 19; // spaz blaster
        } else if(player.charCurr == CHAR::LORI) {
            gun.setAnimSet(ANIM::PLUS_AMMO);
            
            return 5;
        }
    }

    if (upgraded(player, id))
    {
        return upgradedIds[id - 2];
    }
    else
    {
        return unupgradedIds[id - 2];
    }
}

jjSTREAM saveSettings() {
    jjSTREAM settingsStream = jjSTREAM();
    settingsStream.push(settingsVersion);
    settingsStream.push(toggled_on);
    
    // the magic starts here
    settingsStream.push(formatInt(ammoX));
    settingsStream.push(formatInt(ammoY));
    settingsStream.push(formatSize(ammoSize));
    settingsStream.push(formatBool(ammoEnabled));
    
    settingsStream.push(formatInt(healthX));
    settingsStream.push(formatInt(healthY));
    settingsStream.push(formatInt(healthSize));
    settingsStream.push(formatInt(healthPadding));
    settingsStream.push(formatBool(healthEnabled));
    
    settingsStream.push(formatInt(flagX));
    settingsStream.push(formatInt(flagY));
    settingsStream.push(formatInt(flagSize));
    settingsStream.push(formatBool(flagEnabled));
    
    settingsStream.push(formatInt(teamScoreX));
    settingsStream.push(formatInt(teamScoreY));
    settingsStream.push(formatSize(teamScoreSize));
    settingsStream.push(formatBool(teamScoreEnabled));
    
    settingsStream.push(formatInt(gridSize));

    // the magic ends here

    settingsStream.save("STVcustomhud-" + p.nameUnformatted + ".asdat");
    
    return settingsStream;
}

void loadSettings(jjSTREAM settingsStream) {
    string version;
    if (!settingsStream.pop(version)) {
        jjConsole("[CH] Version not found!");
        return;
    }

    if (version != settingsVersion) {
        jjConsole("[CH] Version mismatch found! Your settings have not been loaded, ");
        jjConsole("      changing any of the options will lead into your old settings being overwritten!");
        return;
    }

    if (!settingsStream.pop(toggled_on)) {
        jjConsole("[CH] Settings not found!");
        return;
    }

    string ammoXStr, ammoYStr, ammoSizeStr, ammoEnabledStr;
    settingsStream.pop(ammoXStr);
    settingsStream.pop(ammoYStr);
    settingsStream.pop(ammoSizeStr);
    settingsStream.pop(ammoEnabledStr);

    ammoX = parseInt(ammoXStr);
    ammoY = parseInt(ammoYStr);
    ammoSize = parseSize(ammoSizeStr);
    ammoEnabled = parseBool(ammoEnabledStr);

    string healthXStr, healthYStr, healthSizeStr, healthPaddingStr, healthEnabledStr;
    
    settingsStream.pop(healthXStr);
    settingsStream.pop(healthYStr);
    settingsStream.pop(healthSizeStr);
    settingsStream.pop(healthPaddingStr);
    settingsStream.pop(healthEnabledStr);
    
    healthX = parseInt(healthXStr);
    healthY = parseInt(healthYStr);
    healthSize = parseInt(healthSizeStr);
    healthPadding = parseInt(healthPaddingStr);
    healthEnabled = parseBool(healthEnabledStr);

    string flagXStr, flagYStr, flagSizeStr, flagEnabledStr;
    
    settingsStream.pop(flagXStr);
    settingsStream.pop(flagYStr);
    settingsStream.pop(flagSizeStr);
    settingsStream.pop(flagEnabledStr);

    flagX = parseInt(flagXStr);
    flagY = parseInt(flagYStr);
    flagSize = parseInt(flagSizeStr);
    flagEnabled = parseBool(flagEnabledStr);

    string teamScoreXStr, teamScoreYStr, teamScoreSizeStr, teamScoreEnabledStr;
    settingsStream.pop(teamScoreXStr);
    settingsStream.pop(teamScoreYStr);
    settingsStream.pop(teamScoreSizeStr);
    settingsStream.pop(teamScoreEnabledStr);

    teamScoreX = parseInt(teamScoreXStr);
    teamScoreY = parseInt(teamScoreYStr);
    teamScoreSize = parseSize(teamScoreSizeStr);
    teamScoreEnabled = parseBool(teamScoreEnabledStr);

    string snappingStr;
    settingsStream.pop(snappingStr);

    gridSize = parseInt(snappingStr);
}

void onLevelBegin() {
    jjConsole("[CH] Started!");
    flag.animSet = ANIM::FLAG;
    
    jjSTREAM settingsStream("STVcustomhud-" + p.nameUnformatted + ".asdat");
    
    if(settingsStream.isEmpty()) settingsStream = saveSettings();
    loadSettings(settingsStream);

    jjConsole("[CH] Loaded settings!");

    unupgradedIds.insertLast(25); // bouncer
    unupgradedIds.insertLast(29); // ice
    unupgradedIds.insertLast(34); // seeker
    unupgradedIds.insertLast(49); // rf
    unupgradedIds.insertLast(57); // toaster
    unupgradedIds.insertLast(59); // tnt
    unupgradedIds.insertLast(62); // fireball
    unupgradedIds.insertLast(68); // electroblaster

    upgradedIds.insertLast(24); // bouncer
    upgradedIds.insertLast(28); // ice
    upgradedIds.insertLast(33); // seeker
    upgradedIds.insertLast(48); // rf
    upgradedIds.insertLast(56); // toaster
    upgradedIds.insertLast(59); // tnt
    upgradedIds.insertLast(61); // fireball
    upgradedIds.insertLast(67); // electroblaster

    jjConsole("[CH] Loaded ids!");
}

void onPlayer(jjPLAYER@ player) {
    if(locatingItem) {
        int x = snap(jjMouseX);
        int y = snap(jjMouseY);
        
        if(itemBeingLocated == "ammo") {
            ammoX = x;
            ammoY = y;
        }
        
        if(itemBeingLocated == "health") {
            healthX = x;
            healthY = y;
        }

        if(itemBeingLocated == "flag") {
            flagX = x;
            flagY = y;
        }

        if(itemBeingLocated == "teamscore") {
            teamScoreX = x;
            teamScoreY = y;
        }

        if(isKeyDown(getKeyById("LeftMouse"))) {
            locatingItem = false;
            saveSettings();
        }
    }

    gun.setId(idToSprite(player, player.currWeapon));
}

void onMain() {
    gun.update();
    flag.update();

    gun.visible = ammoEnabled;
    flag.visible = flagEnabled;
}

bool onLocalChat(string &in stringReceived, CHAT::Type chatType) {
    if(stringReceived == "!locateammo") {
        locatingItem = true;
        itemBeingLocated = "ammo";
        
        return true;
    }

    if(stringReceived == "!locatehealth") {
        locatingItem = true;
        itemBeingLocated = "health";
        
        return true;
    }

    if(stringReceived == "!locateflag") {
        locatingItem = true;
        itemBeingLocated = "flag";
        
        return true;
    }

    if(stringReceived == "!locateteamscore") {
        locatingItem = true;
        itemBeingLocated = "teamscore";
        
        return true;
    }

    if(stringReceived.findFirst("!setsnapping") == 0) {
        int snapping = parseInt(stringReceived.split(" ")[1]);

        gridSize = snapping;

        jjConsole("[CH] Snapping has been set to " + snapping);
    }

    if(stringReceived == "!hudhelp") {
        jjConsole("----------------");
        jjConsole("!locateammo");
        jjConsole("!locatehealth");
        jjConsole("!locateflag");
        jjConsole("!locateteamscore");
        jjConsole("!setsnapping");
        jjConsole("----------------");
        return true;
    }

    return false;
}

string determineTeamColor(TEAM::Color color) {
    if(color == TEAM::RED) return "||";
    if(color == TEAM::BLUE) return "|||";
    if(color == TEAM::YELLOW) return "||||";
    
    // green
    return "|";
}

// the magic starts here

int ammoX = 0;
int ammoY = 0;
STRING::Size ammoSize = STRING::MEDIUM;
bool ammoEnabled = true;

int healthX       = 0;
int healthY       = 0;
int healthSize    = 1;
int healthPadding = 15;
bool healthEnabled = true;

int flagX         = 0;
int flagY         = 0;
int flagSize      = 1;
bool flagEnabled = true;

int teamScoreX    = 0;
int teamScoreY    = 0;
STRING::Size teamScoreSize = STRING::MEDIUM;
bool teamScoreEnabled = true;

// the magic ends here

bool onDrawAmmo(jjPLAYER@ player, jjCANVAS@ canvas) {
    // utils
    if(locatingItem) {
        int x = ammoX;
        int y = ammoY;

        if(itemBeingLocated == "health") { x = healthX; y = healthY; }
        if(itemBeingLocated == "flag") { x = flagX; y = flagY; }
        if(itemBeingLocated == "teamScore") { x = teamScoreX; y = teamScoreY; }

        x += 10;

        canvas.drawString(x, y - 10, "" + snap(jjMouseX) + " - " + snap(jjMouseY), STRING::SMALL);
        canvas.drawString(x, y - 20, "Ratio: " + (jjResolutionWidth - snap(jjMouseX)) + "x" + (jjResolutionHeight - snap(jjMouseY)), STRING::SMALL);
        canvas.drawString(x, y - 30, "Center ratio: " + ((jjResolutionWidth / 2) - snap(jjMouseX)) + "x" + ((jjResolutionHeight / 2) - snap(jjMouseY)), STRING::SMALL);
        canvas.drawString(x, y - 40, "Bottom center ratio: " + ((jjResolutionWidth / 2) - snap(jjMouseX)) + "x" + (jjResolutionHeight - snap(jjMouseY)), STRING::SMALL);
    }

    if(toggled_on) {
        string ammo = "" + player.ammo[player.currWeapon];
        if(player.currWeapon == 1) ammo = "^"; // infinity
        canvas.drawString(ammoX, ammoY, "x" + ammo, ammoSize);
        
        gun.x = ammoX - 10;
        gun.y = ammoY;
        gun.draw(canvas);
        return true;
    } else { return false; }
}

bool onDrawHealth(jjPLAYER@ player, jjCANVAS@ canvas) {
    if(toggled_on) {
        if(healthEnabled) {
            for(int i = 0; i < player.health; i++) {
                canvas.drawResizedSprite(healthX - (i * (healthPadding * healthSize)), healthY, ANIM::PICKUPS, 41, 0, healthSize, healthSize);
            }
        }

        // flag

        if(jjGameMode == GAME::CTF) {
            
            flag.x = flagX;
            flag.y = flagY;
            //                                                                                                  5 is green or red - it's temporary
            flag.id = player.team == TEAM::RED ? 7 : (player.team == TEAM::BLUE ? 3 : 5);
            flag.draw(canvas);

            if(teamScoreEnabled) canvas.drawString(teamScoreX, teamScoreY, "" + determineTeamColor(player.team) + jjTeamScore[player.team] + "/" + jjMaxScore, teamScoreSize);
        }

        return true;
    } else { return false; }
}

// bool onDrawLives(jjPLAYER@ player, jjCANVAS@ canvas) {return true;}
// bool onDrawPlayerTimer(jjPLAYER@ player, jjCANVAS@ canvas) {return true;}
// bool onDrawScore(jjPLAYER@ player, jjCANVAS@ canvas) {return true;}
// bool onDrawGameModeHUD(jjPLAYER@ player, jjCANVAS@ canvas) {return true;}
