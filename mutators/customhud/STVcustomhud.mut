#pragma require "STVutil.asc"
#include "STVutil.asc"

bool health_numberified = false;
bool toggled_on = true;

bool locatingItem = false;
string itemBeingLocated = "";

string settingsVersion = "0.1A";

array<int> upgradedIds;
array<int> unupgradedIds;

int gridSize = 10;

AnimatedSprite@ gun = AnimatedSprite(0, 0, 0, 0, 0.25, false);

int snap(int spot) {
    return (spot + gridSize / 2) / gridSize * gridSize;
}

bool upgraded(jjPLAYER @player, int id)
{
    return player.powerup[id];
}

int idToSprite(jjPLAYER@ player, int id)
{
    if(id == 1) {
        if(player.charCurr == CHAR::JAZZ) {
            return 18; // jazz blaster
        } else if(player.charCurr == CHAR::SPAZ) {
            return 19; // spaz blaster
        } else if(player.charCurr == CHAR::LORI) {
            return 18; // temporary jazz blaster
        }
    }

    if (upgraded(player, id))
    {
        return upgradedIds[id - 2];
    }
    else
    {
        return unupgradedIds[id - 2];
    }
}

void saveSettings(jjSTREAM settingsStream) {
    settingsStream.push(settingsVersion);
    settingsStream.push(health_numberified);
    settingsStream.push(toggled_on);
    settingsStream.save("STVcustomhud.asdat");
}

void loadSettings(jjSTREAM settingsStream) {
    settingsStream.pop(settingsVersion);
    settingsStream.pop(health_numberified);
    // settingsStream.pop(toggled_on);
}

void onLevelBegin() {
    jjConsole("[CH] Started!");
    
    jjSTREAM settingsStream("STVcustomhud.asdat");
    
    if(!settingsStream.isEmpty()) saveSettings(jjSTREAM());
    loadSettings(settingsStream);

    jjConsole("[CH] Loaded settings!");

    unupgradedIds.insertLast(25); // bouncer
    unupgradedIds.insertLast(29); // ice
    unupgradedIds.insertLast(34); // seeker
    unupgradedIds.insertLast(49); // rf
    unupgradedIds.insertLast(57); // toaster
    unupgradedIds.insertLast(59); // tnt
    unupgradedIds.insertLast(62); // fireball
    unupgradedIds.insertLast(68); // electroblaster

    upgradedIds.insertLast(24); // bouncer
    upgradedIds.insertLast(28); // ice
    upgradedIds.insertLast(33); // seeker
    upgradedIds.insertLast(48); // rf
    upgradedIds.insertLast(56); // toaster
    upgradedIds.insertLast(59); // tnt
    upgradedIds.insertLast(61); // fireball
    upgradedIds.insertLast(67); // electroblaster

    jjConsole("[CH] Loaded ids!");
}

void onPlayer(jjPLAYER@ player) {
    if(locatingItem) {
        int x = snap(jjMouseX);
        int y = snap(jjMouseY);
        
        if(itemBeingLocated == "ammo") {
            ammoX = x;
            ammoY = y;
        }
        
        if(itemBeingLocated == "health") {
            healthX = x;
            healthY = y;
        }

        if(isKeyDown(getKeyById("LeftMouse"))) {
            locatingItem = false;
        }
    }

    gun.setId(idToSprite(player, player.currWeapon));
}

void onMain() {
    gun.update();
}

bool onLocalChat(string &in stringReceived, CHAT::Type chatType) {
    if(stringReceived == "!locateammo") {
        locatingItem = true;
        itemBeingLocated = "ammo";
        
        return true;
    }

    if(stringReceived == "!locatehealth") {
        locatingItem = true;
        itemBeingLocated = "health";
        
        return true;
    }

    return false;
}

// the magic starts here

int ammoX = 0;
int ammoY = 0;

STRING::Size ammoSize = STRING::MEDIUM;

int healthX = 0;
int healthY = 0;
int healthSize = 1;

// the magic ends here

bool onDrawAmmo(jjPLAYER@ player, jjCANVAS@ canvas) {
    // utils
    if(locatingItem) {
        int x = ammoX;
        int y = ammoY;

        if(itemBeingLocated == "health") { x = healthX; y = healthY; }

        x += 10;

        canvas.drawString(x, y - 10, "" + snap(jjMouseX) + " - " + snap(jjMouseY), STRING::SMALL);
        canvas.drawString(x, y - 20, "Ratio: " + (jjResolutionWidth - snap(jjMouseX)) + "x" + (jjResolutionHeight - snap(jjMouseY)), STRING::SMALL);
        canvas.drawString(x, y - 30, "Center ratio: " + ((jjResolutionWidth / 2) - snap(jjMouseX)) + "x" + ((jjResolutionHeight / 2) - snap(jjMouseY)), STRING::SMALL);
        canvas.drawString(x, y - 40, "Bottom center ratio: " + ((jjResolutionWidth / 2) - snap(jjMouseX)) + "x" + (jjResolutionHeight - snap(jjMouseY)), STRING::SMALL);
    }

    if(toggled_on) {
        string ammo = "" + player.ammo[player.currWeapon];
        if(player.currWeapon == 1) ammo = "^";
        canvas.drawString(ammoX, ammoY, "x" + ammo, ammoSize);
        
        gun.x = ammoX - 10;
        gun.y = ammoY;
        gun.draw(canvas);
        return true;
    } else { return false; }
}

bool onDrawHealth(jjPLAYER@ player, jjCANVAS@ canvas) {
    if(toggled_on) {
        for(int i = 0; i < player.health; i++) {
            canvas.drawResizedSprite(healthX + (i * (15 * healthSize)), healthY, ANIM::PICKUPS, 41, 0, healthSize, healthSize);
        }

        return true;
    } else { return false; }
}

// bool onDrawLives(jjPLAYER@ player, jjCANVAS@ canvas) {return true;}
// bool onDrawPlayerTimer(jjPLAYER@ player, jjCANVAS@ canvas) {return true;}
// bool onDrawScore(jjPLAYER@ player, jjCANVAS@ canvas) {return true;}
// bool onDrawGameModeHUD(jjPLAYER@ player, jjCANVAS@ canvas) {return true;}
