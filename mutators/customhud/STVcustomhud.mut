#pragma require "STVutil.asc"
#include "STVutil.asc"

bool health_numberified = false;
bool toggled_on = true;

bool locatingItem = false;
string itemBeingLocated = "";

string settingsVersion = "0.1A";

void saveSettings(jjSTREAM settingsStream) {
    settingsStream.push(settingsVersion);
    settingsStream.push(health_numberified);
    settingsStream.push(toggled_on);
    settingsStream.save("STVcustomhud.asdat");
}

void loadSettings(jjSTREAM settingsStream) {
    settingsStream.pop(settingsVersion);
    settingsStream.pop(health_numberified);
    settingsStream.pop(toggled_on);
}

void onLevelBegin() {
    jjConsole("[CH] Started!");
    
    jjSTREAM settingsStream("STVcustomhud.asdat");
    
    if(!settingsStream.isEmpty()) saveSettings(jjSTREAM());
    loadSettings(settingsStream);

    jjConsole("[CH] Loaded settings!");
}

void onPlayer(jjPLAYER@ player) {
    if(locatingItem) {
        if(itemBeingLocated == "ammo") {
            ammoX = jjMouseX;
            ammoY = jjMouseY;
        }
        
        if(itemBeingLocated == "health") {
            healthX = jjMouseX;
            healthY = jjMouseY;
        }

        if(isKeyDown(getKeyById("LeftMouse"))) {
            locatingItem = false;
        }
    }
}

bool onLocalChat(string &in stringReceived, CHAT::Type chatType) {
    if(stringReceived == "!locateAmmo") {
        locatingItem = true;
        itemBeingLocated = "ammo";
        
        return true;
    }

    if(stringReceived == "!locateHealth") {
        locatingItem = true;
        itemBeingLocated = "health";
        
        return true;
    }

    return false;
}

// the magic starts here

int ammoX = 0;
int ammoY = 0;

STRING::Size ammoSize = STRING::MEDIUM;

int healthX = 0;
int healthY = 0;

// the magic ends here

bool onDrawAmmo(jjPLAYER@ player, jjCANVAS@ canvas) {
    // utils
    if(locatingItem) {
        int x = ammoX;
        int y = ammoY;

        if(itemBeingLocated == "health") { x = healthX; y = healthY; }

        x += 10;
        y -= 10;

        canvas.drawString(x, y, "" + jjMouseX + " - " + jjMouseY, STRING::SMALL);
    }

    if(toggled_on) {
        canvas.drawString(ammoX, ammoY, "" + player.ammo[player.currWeapon], ammoSize);
        return true;
    } else { return false; }
}

bool onDrawHealth(jjPLAYER@ player, jjCANVAS@ canvas) {
    if(toggled_on) {

        return true;
    } else { return false; }
}
