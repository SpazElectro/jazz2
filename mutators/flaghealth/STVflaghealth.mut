#pragma name "Flag Health"

class AnimatedSprite
{
    int id;
    float frame;
    int frame_count;
    int x;
    int y;
    float anim_speed;
    bool can_reverse;
    bool reverse = false;
    bool visible = true;
    ANIM::Set animSet = ANIM::AMMO;

    AnimatedSprite(int id, int frame, int frame_count, int x, int y, float anim_speed, bool can_reverse)
    {
        this.id = id;
        this.frame = frame;
        this.frame_count = frame_count;
        this.x = x;
        this.y = y;
        this.anim_speed = anim_speed;
        this.can_reverse = can_reverse;
    }

    void setVisible(bool visible)
    {
        this.visible = visible;
    }

    void setAnimSet(ANIM::Set animSet)
    {
        this.animSet = animSet;
    }

    void setId(int id)
    {
        this.id = id;
    }
    
    void setFrame(int frame)
    {
        this.frame = frame;
    }

    void setFrameCount(int frame_count)
    {
        this.frame_count = frame_count;
    }

    void update()
    {
        if(this.reverse == false) {
            this.frame += this.anim_speed;
        } else {
            this.frame -= this.anim_speed;
        }

        if (this.frame > this.frame_count)
        {
            if(this.can_reverse == true) {
                this.reverse = not this.reverse;
            } else {
                this.frame = 0;
            }
        }

        if(this.frame <= 0)
        {
            if(this.can_reverse == true) {
                this.reverse = not this.reverse;
            } else {
                this.frame = 0;
            }
        }
    }

    void draw(jjCANVAS@ canvas)
    {
        if(this.visible) {
            canvas.drawSprite(this.x, this.y, this.animSet, this.id, this.frame, 0, SPRITE::NORMAL, 123);
        }
    }
}

AnimatedSprite@ red = AnimatedSprite(8, 0, 8, 750, 300, 0.15, false);
AnimatedSprite@ red_weapon = AnimatedSprite(0, 0, 10, 650, 300, 0.25, false);
AnimatedSprite@ red_character = AnimatedSprite(10, 0, 0, 725, 300, 0.25, false);

AnimatedSprite@ blue = AnimatedSprite(4, 0, 8, 750, 400, 0.15, false);
AnimatedSprite@ blue_weapon = AnimatedSprite(0, 0, 10, 650, 400, 0.25, false);
AnimatedSprite@ blue_character = AnimatedSprite(10, 0, 0, 725, 400, 0.25, false);

bool show = true;

array<int> unupgradedIds;
array<int> upgradedIds;

int getFlagHolder(string color) {
    for(int i = 0; i < 32; i++) {
        if(jjPlayers[i].isInGame == true) {
            if(((jjPlayers[i].flag == 153) or (jjPlayers[i].flag == 590)) and jjObjects[jjPlayers[i].flag].var[0] == 0) {
                continue;
            }

            if((color == "blue" and jjPlayers[i].flag == 153) or (color == "red" and jjPlayers[i].flag == 590)) {
                return i;
            }
        }
    }
    
    return -1;
}

int getCorrespondingGunId(jjPLAYER@ player) {
    if(player.charCurr == CHAR::SPAZ) {
        return 19;
    }

    return 20;
}

int getCorrespondingCharacterFrame(jjPLAYER@ player) {
    return 0;
}

int getCorrespondingCharacterId(jjPLAYER@ player) {    
    return 10;
}

ANIM::Set getCorrespondingAnimSet(jjPLAYER@ player) {
    if(player.charCurr == CHAR::SPAZ) {
        return ANIM::SPAZ;
    } else if(player.charCurr == CHAR::LORI) {
        return ANIM::LORI;
    }
    
    return ANIM::JAZZ;
}

void onLevelBegin() {
    jjAnimSets[ANIM::FLARE].load();

    jjConsole("[FH] Flag Health started.");

    unupgradedIds.insertLast(25); // bouncer
    unupgradedIds.insertLast(29); // ice
    unupgradedIds.insertLast(34); // seeker
    unupgradedIds.insertLast(49); // rf
    unupgradedIds.insertLast(57); // toaster
    unupgradedIds.insertLast(59); // tnt
    unupgradedIds.insertLast(62); // fireball
    unupgradedIds.insertLast(68); // electroblaster

    upgradedIds.insertLast(24); // bouncer
    upgradedIds.insertLast(28); // ice
    upgradedIds.insertLast(33); // seeker
    upgradedIds.insertLast(48); // rf
    upgradedIds.insertLast(56); // toaster
    upgradedIds.insertLast(59); // tnt
    upgradedIds.insertLast(61); // fireball
    upgradedIds.insertLast(67); // electroblaster

    red.setAnimSet(ANIM::FLAG);
    blue.setAnimSet(ANIM::FLAG);
    red_character.setAnimSet(ANIM::SPAZ);
    blue_character.setAnimSet(ANIM::SPAZ);
}

void onMain() {
    red.update();
    blue.update();
    red_weapon.update();
    blue_weapon.update();
    red_character.update();
    blue_character.update();

    int redFlagHolder = getFlagHolder("red");    

    if(redFlagHolder == -1) {
        red.setVisible(false);
        red_character.setVisible(false);
        red_weapon.setVisible(false);
    } else {
        red_character.setAnimSet(getCorrespondingAnimSet(jjPlayers[redFlagHolder]));
        red_character.setId(getCorrespondingCharacterId(jjPlayers[redFlagHolder]));
        red_character.setFrame(getCorrespondingCharacterFrame(jjPlayers[redFlagHolder]));
        red.setVisible(true);
        red_character.setVisible(true);
        red_weapon.setVisible(true);

        if(jjPlayers[redFlagHolder].currWeapon != 1) {
            if(jjPlayers[redFlagHolder].powerup[jjPlayers[redFlagHolder].currWeapon] == true) {
                red_weapon.setId(upgradedIds[jjPlayers[redFlagHolder].currWeapon - 2]);
            } else {
                red_weapon.setId(unupgradedIds[jjPlayers[redFlagHolder].currWeapon - 2]);
            }
        } else {
            red_weapon.setId(getCorrespondingGunId(jjPlayers[redFlagHolder]));
        }
    }

    int blueFlagHolder = getFlagHolder("blue");

    if(blueFlagHolder == -1) {
        blue_character.setId(getCorrespondingCharacterId(jjPlayers[blueFlagHolder]));
        blue_character.setFrame(getCorrespondingCharacterFrame(jjPlayers[blueFlagHolder]));
        blue_weapon.setId(getCorrespondingGunId(jjPlayers[blueFlagHolder]));
        blue.setVisible(false);
        blue_character.setVisible(false);
        blue_weapon.setVisible(false);
    } else {
        blue.setVisible(true);
        blue_character.setVisible(true);
        blue_weapon.setVisible(true);

        if(jjPlayers[blueFlagHolder].currWeapon != 1) {
            if(jjPlayers[blueFlagHolder].powerup[jjPlayers[blueFlagHolder].currWeapon] == true) {
                blue_weapon.setId(upgradedIds[jjPlayers[blueFlagHolder].currWeapon - 2]);
            } else {
                blue_weapon.setId(unupgradedIds[jjPlayers[blueFlagHolder].currWeapon - 2]);
            }
        } else {
            blue_weapon.setId(getCorrespondingGunId(jjPlayers[blueFlagHolder]));
        }
    }
}

bool onDrawAmmo(jjPLAYER@ player, jjCANVAS@ canvas)
{
    if(show) {
        red.draw(canvas);
        blue.draw(canvas);
        red_weapon.draw(canvas);
        blue_weapon.draw(canvas);
        red_character.draw(canvas);
        blue_character.draw(canvas);

        // names
        if(getFlagHolder("red") != -1) canvas.drawString(660, 275, jjPlayers[getFlagHolder("red")].nameUnformatted, STRING::SMALL, STRING::NORMAL, 0);
        if(getFlagHolder("blue") != -1) canvas.drawString(660, 375, jjPlayers[getFlagHolder("blue")].nameUnformatted, STRING::SMALL, STRING::NORMAL, 0);

        // ammo
        if(getFlagHolder("red") != -1) {
            int fixedAmmo = jjPlayers[getFlagHolder("red")].ammo[jjPlayers[getFlagHolder("red")].currWeapon];
            
            if(fixedAmmo > 99 or jjPlayers[getFlagHolder("red")].currWeapon == 1) fixedAmmo = 99;

            canvas.drawString(660, 300, "x" + fixedAmmo, STRING::MEDIUM, STRING::NORMAL, 0);
        }

        if(getFlagHolder("blue") != -1) {
            int fixedAmmo = jjPlayers[getFlagHolder("blue")].ammo[jjPlayers[getFlagHolder("blue")].currWeapon];
            
            if(fixedAmmo > 99 or jjPlayers[getFlagHolder("blue")].currWeapon == 1) fixedAmmo = 99;
            
            canvas.drawString(660, 400, "x" + fixedAmmo, STRING::MEDIUM, STRING::NORMAL, 0);
        }

        // hearts
        for(int i = 0; i < jjPlayers[getFlagHolder("red")].health; i++) {
            canvas.drawSprite(770 - (i * 30), 340, 71, 21, 6, 0, SPRITE::NORMAL, 123);
        }

        for(int i = 0; i < jjPlayers[getFlagHolder("blue")].health; i++) {
            canvas.drawSprite(770 - (i * 30), 440, 71, 21, 6, 0, SPRITE::NORMAL, 123);
        }
    }

    return false;
}