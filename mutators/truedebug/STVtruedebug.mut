#pragma require "STVutil.asc"

#include "STVutil.asc"

array<string> drawQueue;

int drawId = 1;

string getDifficultyString() {
    if(jjDifficulty <= 0) return "Easy";
    if(jjDifficulty == 2) return "Hard";
    
    return "Turbo";
}

string getTeamsString() {
    string teams = "";

    bool team = false;

    if(jjEnabledTeams[TEAM::BLUE]) {
        teams = "Blue";
        team = true;
    }

    if(jjEnabledTeams[TEAM::RED]) {
        if(team) {
            teams = teams + " and Red";
        } else { teams = teams + "Red"; }
        
        team = true;
    }

    if(jjEnabledTeams[TEAM::GREEN]) {
        if(team) {
            teams = teams + " and Green";
        } else { teams = teams + "Green"; }

        team = true;
    }

    if(jjEnabledTeams[TEAM::YELLOW]) {
        if(team) teams = teams + " and Yellow";
            else teams = teams + "Yellow";
        
        team = true;
    }

    return teams;
}

string getGamemodeString() {
    if(jjGameCustom == GAME::NOCUSTOM) {
        if(jjGameMode == GAME::SP) return "Singleplayer";
        if(jjGameMode == GAME::COOP) return "Coop";
        if(jjGameMode == GAME::BATTLE) return "Battle";
        if(jjGameMode == GAME::CTF) return "CTF";
        if(jjGameMode == GAME::TREASURE) return "Treasure Hunt";
    } else {
        if(jjGameCustom == GAME::RT) return "Roast Tag";
        if(jjGameCustom == GAME::LRS) return "Last Rabbit Standing";
        if(jjGameCustom == GAME::XLRS) return "Extended Last Rabbit Standing";
        if(jjGameCustom == GAME::PEST) return "Pestilence";
        if(jjGameCustom == GAME::TB) return "Team Battle";
        if(jjGameCustom == GAME::JB) return "Jailbreak";
        if(jjGameCustom == GAME::DCTF) return "Death CTF";
        if(jjGameCustom == GAME::FR) return "Flag Run";
        if(jjGameCustom == GAME::TLRS) return "Team Last Rabbit Standing";
        if(jjGameCustom == GAME::DOM) return "Domination";

        return "Head Hunters";
    }

    return "Race";
}

string getGameConnection() {
    if(jjGameConnection == GAME::LOCAL) return "Local";
    if(jjGameConnection == GAME::ONLINE) return "Online";
    
    return "LAN";
}

string getGameState() {
    if(jjGameState == GAME::STOPPED) return "Stopped";
    if(jjGameState == GAME::STARTED) return "Started";
    if(jjGameState == GAME::PAUSED) return "Paused";
    if(jjGameState == GAME::PREGAME) return "Pregame";
    
    return "Overtime";
}

void draw(string str) {
    if(int(drawQueue.length) < drawId) drawQueue.insertLast("");
    drawQueue[drawId - 1] = str;

    drawId += 1;
}

void onMain() {
    draw("|||! |truedebug||||||| !");
    draw("|X: ||" + formatInt(jjMouseX));
    draw("|Y: ||" + formatInt(jjMouseY));
    draw("|Difficulty: ||" + getDifficultyString());
    draw("|Teams: ||" + getTeamsString());
    draw("|Border Width: ||" + formatInt(jjBorderWidth));
    draw("|Border Height: ||" + formatInt(jjBorderHeight));
    draw("|Color depth: ||" + formatInt(jjColorDepth));
    draw("|FPS: ||" + formatInt(jjFPS));
    draw("|Gamemode: ||" + getGamemodeString());
    draw("|Game Connection: ||" + getGameConnection());
    draw("|Game State: ||" + getGameState());
    draw("|Game Ticks: ||" + formatInt(jjGameTicks));
    draw("|Level: ||" + jjLevelName + " (" + jjLevelFileName + ")");
    draw("|Local players: ||" + formatInt(jjLocalPlayerCount));
    draw("|Low detail? ||" + formatBool(jjLowDetail));
    draw("|TSF? ||" + formatBool(jjIsTSF));

    drawId = 1;
}

bool onDrawAmmo(jjPLAYER@ player, jjCANVAS@ canvas) {
    for (uint drawQueueIndex = 0; drawQueueIndex < drawQueue.length; drawQueueIndex++)
    {
        canvas.drawString(0, 20 * (drawQueueIndex + 4), drawQueue[drawQueueIndex]);
    }

    return false;
}