#pragma name "cartoonfade"

bool isFading = false;

const float DEFAULT_FADE_SCALE = 0.0;
const float FADE_SCALE_STEP = 0.05;

float fadeScale = DEFAULT_FADE_SCALE;

void initFade() {
	jjAnimSets[45].load(
		jjPIXELMAP(
			#asset "fade.png"
		),
		frameWidth: 600,
		frameHeight: 600,
		frameSpacingX: 0,
		frameSpacingY: 0,
		startY: 0,
		firstAnimToOverwrite: jjAnimSets[45]
	);
}

void updateFade() {
	if (isFading) {
		fadeScale += FADE_SCALE_STEP;

		if (fadeScale >= 4) {
			fadeScale = DEFAULT_FADE_SCALE;
			isFading = false;
			jjNxt(false, true);
		}
	}
}

void drawFade(jjPLAYER@ player, jjCANVAS@ canvas) {
	int adjustedXPos = int(player.xPos) - int(player.cameraX);
	int adjustedYPos = int(player.yPos) - int(player.cameraY);

	canvas.drawResizedSprite(
		adjustedXPos, adjustedYPos,
		45, 0, 0,
		fadeScale, fadeScale,
		SPRITE::ALPHAMAP, 1
	);
}

void playerDrawFade(jjPLAYERDRAW& pd) {
	pd.name = !isFading;
}

void fade() {
	isFading = true;
}

void onLevelLoad() {
	initFade();
}

void onMain() {
	updateFade();
}

bool onDrawHealth(jjPLAYER@ player, jjCANVAS@ canvas) {
	drawFade(player, canvas);
	return false;
}

bool onLocalChat(string &in stringReceived, CHAT::Type chatType) {
	if (stringReceived == "fade") {
		fade();
		return true;
	}

	return false;
}

void onPlayerDraw(jjPLAYERDRAW& pd) {
	playerDrawFade(pd);
}