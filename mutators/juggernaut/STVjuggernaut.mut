#pragma name "Juggernaut"
#pragma require "STVutil.asc"
#pragma require "juggernaut.j2a"

#include "STVutil.asc"

// for intellisense
#include "../../scripts/STVutil.asc"

enum packet_type { GET_JUGGERNAUT,
				   SEND_JUGGERNAUT_HEALTH,
				   JUGGERNAUT_DEAD,
				   JUGGERNAUT_GIVEUP,
				   TIME_OUT,
				   TIME_GET }

bool gameStarted = false;

AnimatedSprite@ juggernautPlayerSprite = AnimatedSprite(10, 0, 0, 0, 0.15, false);
jjPLAYER @juggernautPlayer;
int juggernautHealth = 100;
bool juggernautsDeathConfirmed = false;

int timeLeft = 0;

string convertSecondsToTimeString(int seconds)
{
    int minutes = seconds / 60;
    int remainingSeconds = seconds % 60;

    // convert minutes and remaining seconds to strings
    string minuteString = formatInt(minutes, "02");
    string secondString = formatInt(remainingSeconds, "02");

	string finalString = minuteString + ":";

	if(remainingSeconds < 10)
		finalString += "0";

	finalString += secondString;

    // return the formatted time string
    return finalString;
}

void onChat(int clientID, string &in stringReceived, CHAT::Type chatType) {
	if(stringReceived == "!k") {

		if(gameStarted && juggernautPlayer.clientID == clientID) {
			if(jjIsServer) {
				jjSTREAM packet;
				packet.push(uint8(TIME_OUT));
				jjSendPacket(packet);
			} else {
				jjSTREAM packet;
				packet.push(uint8(JUGGERNAUT_GIVEUP));
				jjSendPacket(packet, 0);
			}

			jjConsole("[JN] The juggernaut commited suicide!", true);
			
			endGame();
		}
	}
}

void onLevelBegin()
{
	juggernautPlayerSprite.animSet = ANIM::JAZZ;
	juggernautPlayerSprite.spriteMode = SPRITE::PLAYER;

	jjPAL newPal;
	newPal.load("Diam2.j2t");
	newPal.apply();

	if (jjIsServer) {
		if(jjGameMode != GAME::CTF) {
			jjChat("/ctf");
		}

		if(jjEnabledTeams[TEAM::GREEN])
			jjChat("/teams green off");
		if(jjEnabledTeams[TEAM::YELLOW])
			jjChat("/teams yellow off");
		
		if(!jjEnabledTeams[TEAM::RED])
			jjChat("/teams red on");
		if(!jjEnabledTeams[TEAM::BLUE])
			jjChat("/teams red on");

		if(!jjNoBlink)
			jjChat("/noblink on");
		
		jjChat("/selfswap off");
		jjChat("/eventeams off");

		selectJuggernaut();
	}
	
	if (!jjIsServer)
	{
		jjSTREAM packet;
		packet.push(uint8(GET_JUGGERNAUT));
		jjSendPacket(packet, 0);

		jjSTREAM packet2;
		packet2.push(uint8(TIME_GET));
		jjSendPacket(packet2, 0);
	}

	jjAnimSets[ANIM::CUSTOM[1]].load(0, "juggernaut.j2a");

	jjConsole("|||Custom Mode: Juggernaut");
}

void endGame() {
	if(jjIsServer) {
		for (int i = 0; i < 32; i++)
		{
			if (jjPlayers[i].isActive) {
				if(jjPlayers[i].team == TEAM::RED)
					jjChat("/swap " + (jjPlayers[i].clientID + 1));
			}
		}

		selectJuggernaut();
	}

	juggernautsDeathConfirmed = true;
	gameStarted = false;
}

void onPlayer(jjPLAYER @player)
{
	juggernautPlayerSprite.visible = gameStarted;

	if(gameStarted) {
		juggernautPlayerSprite.animSet = juggernautPlayer.charCurr == CHAR::JAZZ ? ANIM::JAZZ : (juggernautPlayer.charCurr == CHAR::SPAZ ? ANIM::SPAZ : ANIM::LORI);
		juggernautPlayerSprite.spriteModeParam = juggernautPlayer.clientID;

		juggernautPlayerSprite.x = jjResolutionWidth / 2 - 160 + (jjGetStringWidth(juggernautPlayer.nameUnformatted + ": " + juggernautHealth, STRING::SMALL, normalTextAppearance) / 2);
		juggernautPlayerSprite.y = jjResolutionHeight / 2 - 200;

		if(jjGameTicks % 70 == 0 && timeLeft > 0) {
			timeLeft -= 1;
		}
	}

	if (gameStarted && jjIsServer)
	{
		if(!juggernautPlayer.isActive && !juggernautsDeathConfirmed) {
			jjSTREAM packet;
			packet.push(uint8(JUGGERNAUT_DEAD));
			jjSendPacket(packet);

			jjConsole("[JN] The juggernaut left the game!", true);

			endGame();
		}

		if(timeLeft <= 0 && !juggernautsDeathConfirmed) {
			jjSTREAM packet;
			packet.push(uint8(TIME_OUT));
			jjSendPacket(packet);

			jjConsole("[JN] The time ran out!", true);
			
			endGame();
		}

		if (juggernautPlayer.health != 7)
		{
			juggernautHealth -= (7 - juggernautPlayer.health);
			juggernautPlayer.health = 7;

			jjSTREAM healthPacket;
			healthPacket.push(int8(SEND_JUGGERNAUT_HEALTH));
			healthPacket.push(juggernautHealth);
			jjSendPacket(healthPacket);
		}

		juggernautPlayer.fastfire = 10;

		if (juggernautHealth <= 0 && !juggernautsDeathConfirmed)
		{
			jjSTREAM deadPacket;
			deadPacket.push(int8(JUGGERNAUT_DEAD));
			jjSendPacket(deadPacket);

			jjConsole("[JN] The Juggernaut is dead!", true);

			endGame();
		}

		for (int i = 1; i < 10; i++)
		{
			juggernautPlayer.ammo[i] = 999;
		}
	}
}

void selectJuggernaut()
{
	jjConsole("[JN] Game starting in 5 seconds.", true);

	TimerV(
		5 * 70, function() {
			jjConsole("[JN] Selecting juggernaut.", true);

			for (int i = 0; i < 32; i++)
			{
				if (jjPlayers[i].isActive) {
					if(jjPlayers[i].team == TEAM::RED)
						jjChat("/swap " + i);
				}
			}

			juggernautHealth = 100 + (jjMaxHealth + jjMaxHealth + 1);

			@juggernautPlayer = getRandomPlayer();
			jjChat("/swap " + (juggernautPlayer.clientID + 1));
			
			juggernautPlayer.health = 0;
			
			gameStarted = true;
			timeLeft = 8*60;
			juggernautsDeathConfirmed = false;

			jjConsole("[JN] The juggernaut is " + juggernautPlayer.nameUnformatted + ".", true);

			jjSTREAM stream;
			stream.push(int8(GET_JUGGERNAUT));
			stream.push(juggernautPlayer.playerID);
			jjSendPacket(stream);
		});
}

void onReceive(jjSTREAM &in packet, int fromClientID)
{
	if (!jjIsServer)
	{
		int8 type;
		packet.pop(type);

		if(fromClientID != 0) {
			jjConsole(jjPlayers[fromClientID].nameUnformatted + " tried to send you false info!");
			return;
		}

		if (type == GET_JUGGERNAUT)
		{
			int8 juggernautID;
			packet.pop(juggernautID);

			timeLeft = 8*60;
			@juggernautPlayer = jjPlayers[juggernautID];
			gameStarted = true;
		} else if (type == SEND_JUGGERNAUT_HEALTH) {
			packet.pop(juggernautHealth);
		} else if(type == JUGGERNAUT_DEAD || type == TIME_OUT) {
			endGame();
		} else if(type == TIME_GET) {
			packet.pop(timeLeft);
		}
	}

	if (jjIsServer)
	{
		int8 type;
		packet.pop(type);

		if (type == GET_JUGGERNAUT && gameStarted)
		{
			jjSTREAM newPacket;
			newPacket.push(int8(GET_JUGGERNAUT));
			newPacket.push(juggernautPlayer.playerID);

			jjSendPacket(newPacket, fromClientID);
		} else if (type == JUGGERNAUT_GIVEUP && gameStarted) {
			jjSTREAM newPacket;
			newPacket.push(uint8(JUGGERNAUT_DEAD));
			jjSendPacket(newPacket);
			
			jjConsole("[JN] The juggernaut commited suicide!", true);
			
			endGame();
		} else if (type == TIME_GET && gameStarted) {
			jjSTREAM newPacket;
			newPacket.push(uint8(TIME_GET));
			newPacket.push(timeLeft);

			jjSendPacket(newPacket, fromClientID);
		}
	}
}

bool onDrawAmmo(jjPLAYER @player, jjCANVAS @canvas)
{
	juggernautPlayerSprite.draw(canvas);

	if (gameStarted)
	{
		canvas.drawString(
			jjResolutionWidth / 2 - 150 + ((
				jjGetStringWidth(juggernautPlayer.nameUnformatted + ": " + juggernautHealth, STRING::SMALL, normalTextAppearance
			) / 2) * 2) - 50,
			jjResolutionHeight / 2 - 220,
			convertSecondsToTimeString(timeLeft), STRING::MEDIUM, STRING::NORMAL, 0);
		
		canvas.drawString(
			jjResolutionWidth / 2 - 150 + (
				jjGetStringWidth(juggernautPlayer.nameUnformatted + ": " + juggernautHealth, STRING::SMALL, normalTextAppearance) / 2
			), jjResolutionHeight / 2 - 200,
			juggernautPlayer.nameUnformatted + ": " + juggernautHealth, STRING::SMALL, STRING::NORMAL, 0);
	}

	return false;
}

void onDrawLayer3(jjPLAYER @player, jjCANVAS @canvas)
{
	if(gameStarted)
		canvas.drawResizedSprite(
			int(juggernautPlayer.xPos - 18),
			int(juggernautPlayer.yPos),
			ANIM::CUSTOM[1], 0, 0,
			0.3, 0.3);
}
