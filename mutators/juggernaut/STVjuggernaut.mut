#pragma name "Juggernaut"
#pragma require "STVutil.asc"

#include "STVutil.asc"

// for intellisense
#include "../../scripts/STVutil.asc"

enum packet_type { GET_JUGGERNAUT,
				   SEND_JUGGERNAUT_HEALTH,
				   JUGGERNAUT_DEAD }

bool gameStarted = false;
jjPLAYER @jagganut;
int jnHealth = 100;
bool confirmed = false;

void onLevelBegin()
{
	if (jjIsServer)
		selectJuggernaut();
	if (!jjIsServer)
	{
		jjSTREAM packet;
		packet.push(uint8(GET_JUGGERNAUT));
		jjSendPacket(packet);
	}

	jjConsole("||||Custom Mode: Juggernaut");
}

void onPlayer(jjPLAYER @player)
{
	if (gameStarted && jjIsServer)
	{
		if (jagganut.health != 7)
		{
			jnHealth -= (7 - jagganut.health);
			jagganut.health = 7;

			jjSTREAM healthPacket;
			healthPacket.push(int8(SEND_JUGGERNAUT_HEALTH));
			healthPacket.push(jnHealth);
			jjSendPacket(healthPacket);
		}

		jagganut.fastfire = 10;

		if (jnHealth <= 0 && !confirmed)
		{
			confirmed = true;
			jjConsole("[JN] The Juggernaut is dead!", true);
			selectJuggernaut();

			jjSTREAM deadPacket;
			deadPacket.push(int8(JUGGERNAUT_DEAD));
			jjSendPacket(deadPacket);
		}
	}
}

void selectJuggernaut()
{
	jjConsole("[JN] Game starting in 5 seconds.", true);

	TimerV(
		5 * 70, function() {
			jjConsole("[JN] Selecting juggernaut.", true);

			jnHealth = 100;

			// @jagganut = getRandomPlayer();
			@jagganut = jjPlayers[1];

			for (int i = 1; i < 9; i++)
			{
				jagganut.ammo[i] = 999;
			}

			jagganut.health = 7;

			gameStarted = true;
			confirmed = false;

			jjConsole("[JN] The juggernaut is " + jagganut.nameUnformatted + ".", true);

			jjSTREAM stream;
			stream.push(int8(GET_JUGGERNAUT));
			stream.push(jagganut.playerID);
			jjSendPacket(stream);
		});
}

void onReceive(jjSTREAM &in packet, int fromClientID)
{
	if (!jjIsServer)
	{
		int8 type;
		packet.pop(type);

		if (type == GET_JUGGERNAUT)
		{
			int8 juggernautID;
			packet.pop(juggernautID);

			@jagganut = jjPlayers[juggernautID];
			gameStarted = true;
		} else if (type == SEND_JUGGERNAUT_HEALTH) {
			packet.pop(jnHealth);
		} else if(type == JUGGERNAUT_DEAD) {
			gameStarted = false;
		}
	}

	if (jjIsServer)
	{
		int8 type;
		packet.pop(type);

		if (type == GET_JUGGERNAUT && gameStarted)
		{
			jjSTREAM newPacket;
			newPacket.push(int8(GET_JUGGERNAUT));
			newPacket.push(jagganut.playerID);

			jjSendPacket(newPacket, fromClientID);
		}
	}
}

bool onDrawAmmo(jjPLAYER @player, jjCANVAS @canvas)
{
	if (gameStarted)
	{
		canvas.drawString(jjResolutionWidth / 2 - 150, jjResolutionHeight / 2 - 200, jagganut.nameUnformatted + ": " + jnHealth, STRING::SMALL, STRING::NORMAL, 0);
	}

	return false;
}

//void onDrawLayer3(jjPLAYER @player, jjCANVAS @canvas)
//{
//	canvas.drawSprite(player.xPos - 18, player.yPos, ANIM::SNOW, 0, 0, 0, SPRITE::NORMAL, 0);
//}